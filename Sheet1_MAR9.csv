Old Family #,Family Name,Looked at?,Subproblem,Variation,Algo ID,Algorithm Description,Final Call,Exact Problem Statement?,Exact algorithm?,Time Complexity (Average),Average Case Distribution,Reference?,,Algorithm Name,Year,Paper/Reference Link,DOI,Authors,Number of Authors,Title,Constants,Derived?,Paper Reference for Constants,Time Complexity Improvement?,Transition Class,Time Complexity Class,Param: Time Class,Time Complexity (Worst Only),Time Encoding,Parameter definitions,Preferred Parameter,Time Complexity Reference,Derived Time Complexity?,Computational Model,Unit of Space,Space Complexity Class,Param: Space Class,Space Complexity (Auxiliary),Space Complexity Notes or Reference,Derived Space Complexity?,Space Complexity in Original Paper?,Interesting Space Complexity?,Randomized?,"Type of Randomized Algorithm (e.g. Las Vegas, Monte Carlo, Atlantic City)",Approximate?,Approximation Factor (if approximate algorithm),Heuristic-based?,Parallel?,"# of
Processors",Quantum?,GPU-based?,Other References,Problem Statement,"Algorithm family
parameters",Description of Inputs,Ratios of input parameter sizes,Space n = 1000 value,Space n = 1000 rate,Space n = 10^6 value,Space n = 10^6 rate,Space n = 10^9 value,Space n = 10^9 rate,n = 1000 value,n = 1000 scale,n = 1000 Rate,n = 10^6 value,n = 10^6 scale,n = 10^6 Rate,n = 10^9 value,n = 10^9 scale,n = 10^9 Rate,Starting Complexity,Remarks,Papers for ratio evaluations,Domains,Intractable
38,Optimal Binary Search Trees,2,,Approximate OBST,348,,,1,0,$O(n)$,,,[https://people.mpi-inf.mpg.de/~mehlhorn/ftp/mehlhorn3.pdf Melhorn's Approximation algorithm (1975)],Melhorn's Approximation algorithm,1975,https://people.mpi-inf.mpg.de/~mehlhorn/ftp/mehlhorn3.pdf,,['Kurt Mehlhorn'],1,['Nearly Optimal Binary Search Trees'],,,,0,0,3,n: 3,$O(n)$,10,"$H$: entropy of the distribution
$P_{opt}$:
$P_{balanced}$: 
$n$: number of elements",n,,,,,3,n: 3,$O(n)$,"https://people.mpi-inf.mpg.de/~mehlhorn/ftp/mehlhorn3.pdf, storing left/right subtrees' weights",0,1,,0,,1,$0.63 H \leq P_{opt} \leq P_{balanced} \leq 2 + 1.44 H$,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000,,,,,,,,,1,,,Combinatorics,FALSE
38,Optimal Binary Search Trees,2,,Approximate OBST,350,,,1,0,$O(n^{0.6})$,,,[https://citeseerx.ist.psu.edu/pdf/4af91d48d513fbcf64e277c07c17615c31726ec6 Karpinski (1996)],Karpinski,1996,https://citeseerx.ist.psu.edu/pdf/4af91d48d513fbcf64e277c07c17615c31726ec6,,"['Marek Karpinski', 'Lawrence L. Larmore', 'Wojciech Rytter']",3,['Sequential and Parallel Subquadratic Work Algorithms for Constructing Approximately Optimal Binary Search Trees'],,,,0,0,2.6,n: 2.6,$O(n^{0.6})$,6.5,$n$: number of elements,n,,,,,1,n: 1,$O(1)$,Derived: dynamic programming and making use of Monge matrix properties,1,0,,0,,1,$\epsilon = o(1)$,0,1,$n$,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,63,,,,,,,,,1,,,Combinatorics,FALSE
38,Optimal Binary Search Trees,2,,Alphabetic Tree Problem,351,,,1,1,$O(n)$,,,[https://epubs.siam.org/doi/abs/10.1137/S0895480193256651?journalCode=sjdmec Klawe; Mumey (1993)],Klawe; Mumey,1993,https://epubs.siam.org/doi/abs/10.1137/S0895480193256651?journalCode=sjdmec,10.1137/S0895480193256651,"['Maria Klawe', 'Brendan Mumey']",2,['Upper and Lower Bounds on Constructing Alphabetic Binary Trees'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of elements,n,,,,,3,n: 3,$O(n)$,Derived: uses a worklist of size $O(n)$,1,0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,weights within constant factors of each other or exponentially separated,,,,,,,,1000,Inf,,1000000,Inf,,1000000000,Inf,,1,,,Combinatorics,FALSE
38,Optimal Binary Search Trees,2,,Approximate OBST,352,,,1,0,$O(n^{1.6})$,,,[https://www.sciencedirect.com/science/article/pii/0196677487900526 Larmore (1987)],Larmore,1987,https://www.sciencedirect.com/science/article/pii/0196677487900526,,['Lawrence L Larmore'],1,['A subquadratic algorithm for constructing approximately optimal binary search trees'],,,,0,0,4.6,n: 4.6,$O(n^{1.6})$,16.4,$n$: number of elements,n,,,,,3,n: 3,$O(n)$,"Derived: Computing and storing $f_{d,l}$ for each $n$ elements",1,0,,0,,1,$\epsilon = o(1)$,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,63095,,,,,,,,,1,,,Combinatorics,FALSE
49,Nearest Neighbor Search,2,,k-ANNS,419,,,1,0,$O(n \log n)$,,,[https://doi.org/10.1109/TPAMI.2018.2889473 Hierarchical Navigable Small World (HNSW) (2018)],Hierarchical Navigable Small World (HNSW),2018,https://doi.org/10.1109/TPAMI.2018.2889473,10.1109/TPAMI.2018.2889473,"['Yu A. Malkov', 'D. A. Yashunin']",2,['Efficient and Robust Approximate Nearest Neighbor Search Using Hierarchical Navigable Small World Graphs'],,,,0,0,4,n: 4,$O(n \log n)$,11,"$n$: number of elements
$M$: heuristic choice -- number of closest neighbors for a part of the algo",n,,,,bytes of memory,1,"n: 1,
M: 3",$O(M)$,"https://arxiv.org/abs/1603.09320, ""Memory usage is proportional to choice of $M$""",0,1,,0,,1,? experimental results,1,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics,FALSE
49,Nearest Neighbor Search,2,,k-ANNS,420,,,1,0,"$O(nLkt)$ [pre-processing]
$O(L(kt+dnP_2^k))$ [query-time]",,,[http://infolab.stanford.edu/~ullman/mmds/ch3n.pdf Locality-sensitive hashing (2010)],Locality-sensitive hashing,2010,http://infolab.stanford.edu/~ullman/mmds/ch3n.pdf,,"['Jure Leskovec', 'Anand Rajaraman', 'Jeffrey David Ullman']",3,['Finding Similar Items'],,,,0,0,3,"n: 3,
k: 3,
L: 3,
t: 3,
d: 3","$O(nLkt)$ [pre-processing]
$O(L(kt+dnP_2^k))$ [query-time]",,"$n$: number of elements
$L$: number of hash tables
$k$: width parameter
$t$: time to evaluate a function
$d$: dimensionality of the data
$P_1, P_2$: Probabilities inherent in the hash functions
$c$: approximation factor",n,,,,hash table cells,3,"n: 3,
L: 3",$O(nL)$,https://en.wikipedia.org/wiki/Locality-sensitive_hashing#LSH_algorithm_for_nearest_neighbor_search,0,0,,0,,1,$c$,0,0,,0,0,https://en.wikipedia.org/wiki/Locality-sensitive_hashing#LSH_algorithm_for_nearest_neighbor_search,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics,FALSE
49,Nearest Neighbor Search,2,,k-ANNS for a dense 3D map of geometric points,421,,,1,0,$O(k)$,,,[http://www.araa.asn.au/acra/acra2013/papers/pap148s1-file1.pdf Projected radial search (2013)],Projected radial search,2013,http://www.araa.asn.au/acra/acra2013/papers/pap148s1-file1.pdf,,"['Alex Bewley, 'Ben Upcroft']",2,['Advantages of Exploiting Projection Structure for Segmenting Dense 3D Point Clouds'],,,,0,0,3,k: 3,$O(n \log n)$?,,"$n$: number of elements
$k$: number of neighbors to find",n,,1,Word RAM,words,3,n: 3,$O(n)$,"Derived: There are 5 local variables, one of which is a list",1,0,,0,,1,?,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Combinatorics,FALSE
49,Nearest Neighbor Search,2,,k-ANNS,422,,,1,0,Varies by codebook structure,,,[ Compression/Clustering [Vector Quantization] (1992)],Compression/Clustering [Vector Quantization],1992,,,[],0,,,,,1,5->6,3,n: 3,Varies by codebook structure,,$n$: number of elements,n,,,,,#VALUE!,,Varies by codebook structure,Table 2,0,0,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Combinatorics,FALSE
66,The Subset-Sum Problem,2,Subset Sum,Subset Sum,546,,,1,1,$O(nt/\log t)$,,,[https://link.springer.com/article/10.1007/s00453-002-0989-y Pisinger (2003)],Pisinger,2003,https://link.springer.com/article/10.1007/s00453-002-0989-y,10.1007/s00453-002-0989-y,['Pisinger'],1,['Dynamic Programming on the Word RAM'],,,,0,0,8,"n: 8,
t: 4",$O(nt/\log t)$,1000,"$n$: number of elements in the set
$t$: target sum",n,,,Word RAM,words,1,"n: 1,
t: 2.5",$O(t/\log t)$,https://link.springer.com/article/10.1007/s00453-002-0989-y,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
66,The Subset-Sum Problem,2,Subset Sum,Subset Sum,547,,,1,1,$O(n' t)$,,,[https://doi.org/10.1287/opre.21.1.332 Faaland (1973)],Faaland,1973,https://doi.org/10.1287/opre.21.1.332,10.1287/opre.21.1.332,['Bruce Faaland'],1,['Technical Note‚ÄîSolution of the Value-Independent Knapsack Problem by Partitioning'],,,,0,0,8,"n: 8,
n': 8,
t: 3",$O(n' t)$,1000,"$n'$: number of distinct elements in the set
$t$: target sum",n,,,,,1,"n: 1,
t: 3",$O(t)$,https://doi.org/10.1287/opre.21.1.332,0,1,,0,,0,,0,0,,0,0,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",,,,,,,,,,,,,,,,,,,,1,Dynamic Programming,,Combinatorics,TRUE
66,The Subset-Sum Problem,2,Subset Sum,Subset Sum,548,,,1,1,$O(n' t)$,,,[https://link.springer.com/article/10.1007/s006070050042 Pferschy (1999)],Pferschy,1999,https://link.springer.com/article/10.1007/s006070050042,10.1007/s006070050042,['U. Pferschy'],1,['Dynamic Programming Revisited: Improving Knapsack Algorithms'],,,,0,0,8,"n: 8,
n': 8,
t: 3",$O(n' t)$,1000,"$n'$: number of distinct elements in the set
$t$: target sum",n,,,,,1,"n: 1,
t: 3",$O(t)$,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0,0,,0,,0,,0,0,,0,0,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
66,The Subset-Sum Problem,2,Subset Sum,Subset Sum,549,,,1,1,$O(\sigma^{3/2})$,,,[https://doi.org/10.1002/(SICI)1097-0037(199905)33:3%3C189::AID-NET5%3E3.0.CO;2-2 Klinz (1999)],Klinz,1999,https://doi.org/10.1002/(SICI)1097-0037(199905)33:3%3C189::AID-NET5%3E3.0.CO;2-2,10.1002/(SICI)1097-0037(199905)33:3%3C189::AID-NET5%3E3.0.CO;2-2,"['Bettina Klinz', 'Gerhard J. Woeginger']",2,['A note on the bottleneck graph partition problem'],,,,0,0,8,"n: 8,
\sigma: 4.5",$O(\sigma^{3/2})$,1515,$\sigma$: sum of integers in the set ($\sigma \geq n$),n,,,,,1,"n: 1,
t: 3",$O(t)$,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0,0,,0,,0,,0,0,,0,0,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
66,The Subset-Sum Problem,2,Subset Sum,Subset Sum,550,,,1,1,$\tilde{O}(n \max(S))$,,,[https://www.sciencedirect.com/science/article/abs/pii/S019667749690841X?via%3Dihub Eppstein (1997)],Eppstein,1997,https://www.sciencedirect.com/science/article/abs/pii/S019667749690841X?via%3Dihub,,['David Eppstein'],1,['Minimum Range Balanced Cuts via Dynamic Subset Sums'],,,,0,0,8,"n: 8,
max(S): 3",$\tilde{O}(n \max(S))$,1045,"$n$: number of elements in the set
$S$: the set
$t$: target sum",n,,,,,1,"n: 1,
t: 4",$O(t\log t)$,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0,0,,0,,0,,0,0,,0,0,https://escholarship.org/uc/item/6sd695gn,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
66,The Subset-Sum Problem,2,Subset Sum,Subset Sum,551,,,1,1,$\tilde{O}(n \max(S))$,,,[https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0091507 Serang (2014)],Serang,2014,https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0091507,10.1371/journal.pone.0091507,['Oliver Serang'],1,['The Probabilistic Convolution Tree: Efficient Exact Bayesian Inference for Faster LC-MS/MS Protein Inference'],,,,0,0,8,"n: 8,
max(S): 3",$\tilde{O}(n \max(S))$,1045,"$n$: number of elements in the set
$S$: the set
$t$: target sum",n,,,,,1,"n: 1,
t: 4",$O(t\log t)$,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
66,The Subset-Sum Problem,2,Subset Sum,Subset Sum,552,,,1,1,$\tilde{O}(n \max(S))$,,,[https://www.liebertpub.com/doi/10.1089/cmb.2015.0013 Serang (2015)],Serang,2015,https://www.liebertpub.com/doi/10.1089/cmb.2015.0013,10.1089/cmb.2015.0013,['Oliver Serang'],1,['A Fast Numerical Method for Max-Convolution and the Application to Efficient <tt>Max-Product</tt> Inference in Bayesian Networks'],,,,0,0,8,"n: 8,
max(S): 3",$\tilde{O}(n \max(S))$,1045,"$n$: number of elements in the set
$S$: the set
$t$: target sum",n,,,,,1,"n: 1,
t: 4",$O(t\log t)$,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
66,The Subset-Sum Problem,2,Subset Sum,Subset Sum,553,,,1,1,$\tilde{O}(n^3 t)$,,,[https://dl.acm.org/doi/abs/10.1145/1806689.1806735 Lokshtanov (2010)],Lokshtanov,2010,https://dl.acm.org/doi/abs/10.1145/1806689.1806735,10.1145/1806689.1806735,"['Daniel Lokshtanov', 'Jesper Nederlof']",2,['Saving space by algebraization'],,,,0,0,8,"n: 8,
t: 3",$\tilde{O}(n^3 t)$,1045,"$n$: number of elements in the set
$t$: target sum",n,,,,,5,"n: 5,
t: 1",$O(n^2)$,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
78,Stable Matching Problem,2,,Almost Stable Marriage Problem,619,,,1,0,$O(\Delta^2/\epsilon)$,,,"[https://arxiv.org/pdf/0812.4893.pdf Valentin Polishchuk, and Jukka Suomela (2008)]","Valentin Polishchuk, and Jukka Suomela",2008,https://arxiv.org/pdf/0812.4893.pdf,,"['Patrik Floréen', 'Petteri Kaski', 'Valentin Polishchuk', 'Jukka Suomela']",4,['Almost Stable Matchings in Constant Time'],,,,0,0,5,n: 5,$O(\Delta^2/\epsilon)$,20,"$n$: number of people in set
$\Delta$: maximum degree of vertex in graph
$\epsilon$: stability parameter",n,,,Word RAM,words,5,n: 5,$O(\Delta^2/\epsilon)$,derived: must be less than or equal to time complexity,1,0,,0,,1,$\epsilon$,0,1,,0,0,,,,,,,,,,,,1,,,,,,,,,4,,,Combinatorics,FALSE
99,Motif Search,2,Motif Search,Motif Search,784,,,1,0,$O(nm)$,,,"[https://www.ncbi.nlm.nih.gov/pubmed/2184437 Lawrence, Reilly (1990)]","Lawrence, Reilly",1990,https://www.ncbi.nlm.nih.gov/pubmed/2184437,10.1002/prot.340070105,"['Charles E. Lawrence', 'Andrew A. Reilly']",2,['An expectation maximization (EM) algorithm for the identification and characterization of common sites in unaligned biopolymer sequences'],,,,0,0,3,"n: 3,
m: 3,
mn: 3",$O(nm)$,10,"$n$: number of sequences
$m$: length of sequences",mn,,,Word RAM,words,3,"n: 3,
m: 3,
mn: 3",$O(nm)$,https://www.ncbi.nlm.nih.gov/pubmed/2184437,0,1,,0,,1,,0,0,,0,0,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/,,,,m=n= (value/2),,,,,,,250000,0,,250000000000,0,,2.5E+17,0,,4,,,Bioinformatics,TRUE
99,Motif Search,2,Motif Search,Motif Search,785,,,1,0,$O(nm)$,,,[https://science.sciencemag.org/content/262/5131/208 Lawrence Gibbs Sampling (1993)],Lawrence Gibbs Sampling,1993,https://science.sciencemag.org/content/262/5131/208,,"['CHARLES E. LAWRENCE', 'STEPHEN F. ALTSCHUL', 'MARK S. BOGUSKI', 'JUN S. LIU', 'ANDREW F. NEUWALD', 'JOHN C. WOOTTON']",6,['Detecting Subtle Sequence Signals: a Gibbs Sampling Strategy for Multiple Alignment'],,,,0,0,3,"n: 3,
m: 3,
mn: 3",$O(nm)$,10,"$n$: number of sequences
$m$: length of sequences",mn,,,Word RAM,words,2.5,"n: 3,
m: 3,
mn: 2.5",$O(n + m)$,"derived: two data structures, one uses $O(n)$ and one uses $O(m)$",1,0,,0,,1,,0,0,,0,0,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,TRUE
99,Motif Search,2,Motif Search,Motif Search,787,,,1,0,$O(nm)$,,,[https://www.ncbi.nlm.nih.gov/pubmed/12015892 MotifSampler  (2001)],MotifSampler ,2001,https://www.ncbi.nlm.nih.gov/pubmed/12015892,10.1089/10665270252935566,"['Gert Thijs', 'Kathleen Marchal', 'Magali Lescot', 'Stephane Rombauts', 'Bart De Moor', 'Pierre Rouz√©', 'Yves Moreau']",7,['A Gibbs Sampling Method to Detect Overrepresented Motifs in the Upstream Regions of Coexpressed Genes'],,,,0,0,3,"n: 3,
m: 3,
mn: 3",$O(nm)$,10,"$n$: number of sequences
$m$: length of sequences",mn,,,Word RAM,words,2.5,"n: 3,
m: 3,
mn: 2.5",$O(n + m)$,derived: essentially just modified Gibbs sampling,1,0,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,TRUE
103.1,Texture Synthesis,2,,Texture Synthesis,809,,,0,0,$O(n^2 \log n)$,,,[https://dl.acm.org/doi/abs/10.1145/344779.345009 tree-structured vector quantization Wei-Levoy (2000)],tree-structured vector quantization Wei-Levoy,2000,https://dl.acm.org/doi/abs/10.1145/344779.345009,10.1145/344779.345009,"['Li-Yi Wei', 'Marc Levoy']",2,['Fast texture synthesis using tree-structured vector quantization'],,,,0,0,5.01,n: 5.01,$O(n^2 \log n)$,21,"$n$: number of pixels in input image
$d$: neighborhood size",n,,,TSVQ Tree,,3,"n: 3,
d: 3",$O(nd)$,https://dl.acm.org/doi/abs/10.1145/344779.345009,0,1,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
103.1,Texture Synthesis,2,,Texture Synthesis,812,,,0,0,$O(N)$,,,"[https://arxiv.org/abs/1705.06566 Spatial GAN-Based; Urs Bergmann, Nikolay Jetchev, Roland Vollgraf (2017)]","Spatial GAN-Based; Urs Bergmann, Nikolay Jetchev, Roland Vollgraf",2017,https://arxiv.org/abs/1705.06566,,"['Urs Bergmann', 'Nikolay Jetchev', 'Roland Vollgraf']",3,['Learning Texture Manifolds with the Periodic Spatial GAN'],,,,0,0,3,"n: 3,
N: 3",$O(N)$,,$N$: number of pixels in output image,n,,,,,3,N: 3,$O(N)$,https://arxiv.org/abs/1705.06566,0,1,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
132,n-Queens Problem,2,,n-Queens Completion,970,,,1,0,$O(n)$,,experimental results in paper,[https://arxiv.org/abs/1912.05935 Grigoryan (2018)],Grigoryan,2018,https://arxiv.org/abs/1912.05935,,['E. Grigoryan'],1,['Linear algorithm for solution n-Queens Completion problem'],,,,1,1->6,3,"n: 3,
n^2: 2.5",$O(n)$,6,"$n$: dimension of board
$k$: number of queens",n^2,,,,,5,"n: 3,
n^2: 5",$O(n)$,Derived: two control arrays of size $O(n)$,1,0,,1,Monte Carlo,1,error < 0.0001 and decreases with increasing $n$,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,1,,,Combinatorics,FALSE
32,Cycle Detection,2,,Cycle Detection,324,,,1,0,$(\mu + \lambda)(1+\Theta(1/\sqrt{M}))$,"mentioned in conclusion that the analysis might be interesting, but it wasn't actually done",https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat,[https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat Sedgewick; Szymanski; and Yao (1982)],Sedgewick; Szymanski; and Yao,1982,https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat,10.1137/0211030,"['Robert Sedgewick', 'Thomas G. Szymanski', 'Andrew C. Yao']",3,['The Complexity of Finding Cycles in Periodic Functions'],1,0,https://www.semanticscholar.org/paper/The-Complexity-of-Finding-Cycles-in-Periodic-Sedgewick-Szymanski/8f1e5d92733380112a44630d0561611121c3228d,0,0,3,"\mu: 3,
\lambda: 3,
M: 1.5",$(\mu + \lambda)(1+\Theta(1/\sqrt{M}))$,,"$\mu$: first index of element in cycle
$\lambda$: period
$M$: number of memory cells available",\mu,,,,Memory cells,1,"M: 3,
\mu: 1",$M$,https://epubs.siam.org/doi/abs/10.1137/0211030?journalCode=smjcat,0,1,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,9.965,100.3512293,,#REF!,#REF!,,#REF!,#REF!,,6,,,Combinatorics,FALSE
32,Cycle Detection,2,,Cycle Detection,325,,,1,0,$\mu + 1.5\lambda$,"Elements have independently random magnitudes, subject to periodicity constraints $\mu$ and $\lambda$",https://drive.google.com/file/d/16H_lrjeaBJqWvcn07C_w-6VNHldJ-ZZl/view,[https://drive.google.com/file/d/16H_lrjeaBJqWvcn07C_w-6VNHldJ-ZZl/view Nivasch (2004)],Nivasch,2004,https://drive.google.com/file/d/16H_lrjeaBJqWvcn07C_w-6VNHldJ-ZZl/view,,['Gabriel Nivasch'],1,['Cycle Detection Using a Stack'],,,,0,0,3,"\mu: 3,
\lambda: 3",$O(\mu + \lambda)$,,"$\mu$: index of first element in cycle
$\lambda$: cycle length",\mu,,,not mentioned,Stack size,2,\mu: 2,$O(\log\mu)$,https://www.gabrielnivasch.org/fun/cycle-detection,0,1,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,9.965,,,,,,,,,6,,,Combinatorics,FALSE
1,Sorting,2,Comparison Sorting,Comparison Sorting,1,,,1,1,$O(n^2)$,uniform distribution over all possible permutations,"""CLRS""?",[- Insertion Sort (1940)],Insertion Sort,1940,-,,[],0,,1,1,,1,0,5,n: 5,$O(n^2)$,20,$n$: size of list,n,,,Word RAM,words,1,n: 1,$O(1)$,in-situ sorting algorithm,1,0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,NA,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,NA,NA,Combinatorics,FALSE
1,Sorting,2,Comparison Sorting,Comparison Sorting,2,,,1,1,$O(n^2)$,Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Selection Sort (1962)],Selection Sort,1962,-,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,$n$: size of list,n,,,Word RAM,words,1,n: 1,$O(1)$,in-situ sorting algorithm,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Selection_sort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000000,1,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,2,Comparison Sorting,Comparison Sorting,3,,,1,1,$O(n \log n)$,"Any distribution (runtime is same regardless of input, at least in the typical implementation)",(same behavior across all inputs),[- Merge Sort (1945)],Merge Sort,1945,-,,[],0,,,,,1,4->5,4,n: 4,$O(n \log n)$,11,$n$: size of list,n,,,Word RAM,words,3,n: 3,$O(n)$,need some way to store partially processed lists while merging,1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Merge_sort#cite_note-2

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9965,100.3512293,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,2,Comparison Sorting,Comparison Sorting,5,,,1,1,$O(n^2)$,uniform distribution over all possible permutations,(can be easily derived),[- Bubble Sort (1956)],Bubble Sort,1956,-,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,$n$: size of list,n,,,Word RAM,words,1,n: 1,$O(1)$,in-situ sorting algorithm,1,0,,0,,0,,0,0,,0,0,https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000000,1,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,2,Comparison Sorting,Comparison Sorting,8,,,1,1,$O(n \log n)$,uniform distribution over all possible permutations,(lower bound for average-case in sorting + upper bound for heapsort),[https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291097-024X%28199708%2927%3A8%3C983%3A%3AAID-SPE117%3E3.0.CO%3B2-%23 Intro Sort (1997)],Intro Sort,1997,https://onlinelibrary.wiley.com/doi/abs/10.1002/%28SICI%291097-024X%28199708%2927%3A8%3C983%3A%3AAID-SPE117%3E3.0.CO%3B2-%23,10.1002/%28SICI%291097-024X%28199708%2927%3A8%3C983%3A%3AAID-SPE117%3E3.0.CO%3B2-%23,['DAVID R. MUSSER'],1,['Introspective Sorting and Selection Algorithms'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: size of list,n,,,Word RAM,words,2,n: 2,$O(\log n)$,(see quicksort + heapsort),1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Introsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9965,100.3512293,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,2,Comparison Sorting,Comparison Sorting,24,,,1,1,$O(n \log n)$,uniform distribution over all possible permutations (reference proof possibly not complete?),https://www.sciencedirect.com/science/article/pii/030439759390364Y?via%3Dihub,[https://www.bibsonomy.org/bibtex/2f485e4ea9a877871b59ab503151a7f10/bjoern Heap Sort (1964)],Heap Sort,1964,https://www.bibsonomy.org/bibtex/2f485e4ea9a877871b59ab503151a7f10/bjoern,,['J. Williams'],1,['Algorithm 232: Heapsort'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: size of list,n,,,Word RAM,words,1,n: 1,$O(1)$,in-situ sorting algorithm,1,0,,0,,0,,0,0,0,0,0,https://en.wikipedia.org/wiki/Heapsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9965,100.3512293,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,2,Non-comparison Sorting,Non-Comparison Sorting,7,,,1,1,$O(n+k)$,uniform distribution over all sets of key values,CLRS,[http://bitsavers.org/pdf/mit/whirlwind/R-series/R-232_Information_Sorting_in_the_Application_of_Electronic_Digital_Computers_to_Business_Operations_May54.pdf Counting Sort (1954)],Counting Sort,1954,http://bitsavers.org/pdf/mit/whirlwind/R-series/R-232_Information_Sorting_in_the_Application_of_Electronic_Digital_Computers_to_Business_Operations_May54.pdf,,['HAROLD H. SEWARD'],1,['INFORMATION SORTING IN THE APPLICATION OF DIGITAL COMPUTERS TO BUSINESS OPERATIONS'],,,,0,0,3,"n: 3,
k: 3",$O(n+k)$,10,"$n$: size of list
$k$: range of non-negative key values",n,,,Word RAM,words,3,"n: 3,
k: 3",$O(n+k)$,(can be easily derived),1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Counting_sort

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000,1000,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,2,Non-comparison Sorting,Non-Comparison Sorting,16,,,1,1,$O(n)$,uniform distribution of elements within domain of array,CLRS,[- Bucket Sort (1940)],Bucket Sort,1940,-,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,$n$: size of list,n,,,Word RAM,words,3,n: 3,$O(n)$,CLRS,0,0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000000,1,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,2,Non-comparison Sorting,Non-Comparison Sorting,21,,,1,1,$O(wn)$,Any distribution (runtime is same regardless of input),(same general behavior across all inputs),[- Radix Sort (1940)],Radix Sort,1940,-,,[],0,,4,1,,1,4->6,4,"n: 4,
w: 3",$O(wn)$,11,"$n$: size of list
$w$: length of word",n,,,Word RAM,words,3,"n: 3,
w: 3",$O(w+n)$,(wikipedia page?),0,0,,0,,0,,mit.zoom.us/j/99635636496,0,,0,0,"https://en.wikipedia.org/wiki/Radix_sort

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,NA,,,,,,,1000,1000,999,1000000,1000000,999999,1000000000,1000000000,999999999,4,NA,NA,Combinatorics,FALSE
2,kth Order Statistic,2,kth Order Statistic,kth Order Statistic,26,,,1,1,$O(n \log n)$,uniform distribution over all possible permutations (see sorting),(can derive from sorting + linear scan),[- Naive Selection (1940)],Naive Selection,1940,-,,[],0,,1,1,https://en.wikipedia.org/wiki/Selection_algorithm,1,0,4,n: 4,$O(n \log n)$,11,$n$: size of list,n,,,Word RAM,words,1,n: 1,$O(1)$,uses an in-situ sorting algorithm,1,0,,0,,0,,0,0,,0,0,,the kth order statistic of a statistical sample is equal to its kth-smallest value.,1,n is the size of the array,,,,,,,,9965,1,,19931568,1,,29897352854,1,,5,,,Combinatorics,FALSE
2,kth Order Statistic,2,kth Order Statistic,kth Order Statistic,27,,,1,1,$O(n)$,uniform distribution over all possible permutations,https://11011110.github.io/blog/2007/10/09/blum-style-analysis-of.html,[https://dl.acm.org/citation.cfm?doid=366622.366647 Hoare's Selection Algorithm (QuickSelect) (1961)],Hoare's Selection Algorithm (QuickSelect),1961,https://dl.acm.org/citation.cfm?doid=366622.366647,,['C. A. R. Hoare'],1,['Algorithm 65: find'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: size of list,n,,,Word RAM,words,1,n: 1,$O(1)$,uses an in-situ sorting algorithm,1,0,,0,,0,,0,0,,0,0,,the kth order statistic of a statistical sample is equal to its kth-smallest value.,1,n is the size of the array,,,,,,,,1000,9.965,,,,,,,,5,,,Combinatorics,FALSE
3,Matrix Chain Multiplication,2,MCOP,Matrix Chain Ordering Problem,29,,,1,1,$O(4^n)$,Any distribution (runtime is same regardless of input),CLRS for runtime,[- Brute Force (1940)],Brute Force,1940,-,,[],0,,1,1,http://www.cs.tut.fi/~elomaa/teach/AADS-2014-7.pdf,1,0,8,n: 8,$O(4^n)$,2000,$n$: number of matrices,n,,,Word RAM,words,3,n: 3,$O(n)$,can be derived,1,0,,0,,0,,0,0,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
3,Matrix Chain Multiplication,2,MCOP,Matrix Chain Ordering Problem,30,,,1,1,$O(n^3)$,Any distribution (runtime is same regardless of input),CLRS for runtime,[- Dynamic Programming Algorithm (S. S. Godbole) (1953)],Dynamic Programming Algorithm (S. S. Godbole),1953,-,,[],0,,,,,1,1->3,6,n: 6,$O(n^3)$,30,$n$: number of matrices,n,,,Word RAM,words,5,n: 5,$O(n^2)$,CLRS http://mitpress.mit.edu/9780262046305/introduction-to-algorithms/,0,0,,0,,0,,0,0,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,1000000000,Inf,,,,,,,,1,,,Combinatorics,FALSE
4,Longest Common Subsequence,2,LCS,LCS,38,,,1,1,$O(mn)$,Any distribution (runtime is same regardless of input),(can be easily derived),[https://dl.acm.org/citation.cfm?doid=321796.321811 Wagner and Fischer (1974)],Wagner and Fischer,1974,https://dl.acm.org/citation.cfm?doid=321796.321811,,"['Robert A. Wagner', 'Michael J. Fischer']",2,['The String-to-String Correction Problem'],,,,1,-,5,"n: 3,
m: 3,
m+n: 5",$O(mn)$,20,"$n$, $m$: lengths of input strings",m+n,,,Word RAM,words,5,"n: 3,
m: 3,
m+n: 5",$O(mn)$,https://dl.acm.org/doi/10.1145/360825.360861,0,0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,1000000,,1000000000000,,1E+18,,250000,1,,250000000000,1,,2.5E+17,1,,4,,,Combinatorics,TRUE
5,Maximum Flow,2,Max Flow,,54,,,1,1,$O(E^2U)$,<= possibly open if there's a better bound? i.e. for Erdos-Renyi with uniform edge weights,,[http://www.cs.yale.edu/homes/lans/readings/routing/ford-max_flow-1956.pdf Ford & Fulkerson (1955)],Ford & Fulkerson,1955,http://www.cs.yale.edu/homes/lans/readings/routing/ford-max_flow-1956.pdf,,"['L. R. Ford, Jr.', 'D. R. Fulkerson']",2,['Maximal Flow Through A Network'],,,,1,2->3,7,"V: 7,
E: 5,
U: 3",$O(E^2U)$,942,"$V:$ number of vertices
$E$: number of edges
$U$: maximum edge capacity
Edge weights must be integers",V,,,Word RAM,words,5,"E: 3,
V: 5",$O(E)$,https://core.ac.uk/download/pdf/81946904.pdf,0,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",1666.666667,4.623413252,1666666.667,30.6227766,1666666667,176.827941,56895766.95,0.004394,,5.68958E+16,0.000004394,,5.68958E+25,0.000000004394,,2,,,Combinatorics,FALSE
5,Maximum Flow,2,Max Flow,,55,,,1,1,$O(V^2 E)$,^ see above,,[https://www.scirp.org/(S(lz5mqp453edsnp55rrgjct55))/reference/ReferencesPapers.aspx?ReferenceID=1690549 Dinitz (1970)],Dinitz,1970,https://www.scirp.org/(S(lz5mqp453edsnp55rrgjct55))/reference/ReferencesPapers.aspx?ReferenceID=1690549,,['E. A. Dinic'],1,['Algorithm for Solution of a Problem of Maximum Flow in a Network with Power Estimation'],,,,0,0,7,"V: 7,
E: 3",$O(V^2 E)$,20,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,,,Word RAM,words,5,"E: 3,
V: 5",$O(E)$,https://core.ac.uk/download/pdf/81946904.pdf,0,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,20482476,384.6153865,,,,,,,,2,,,Combinatorics,FALSE
5,Maximum Flow,2,Max Flow,,56,,,1,1,$O(E^2 V)$,^ see above,,[https://web.eecs.umich.edu/~pettie/matching/Edmonds-Karp-network-flow.pdf Edmonds & Karp (1972)],Edmonds & Karp,1972,https://web.eecs.umich.edu/~pettie/matching/Edmonds-Karp-network-flow.pdf,,"['Jack Edmonds', 'Richard M. Karp']",2,['Theoretical Improvements in Algorithmic Efficiency for Network Flow Problems'],,,,1,0,7,"V: 7,
E: 5,
U: 2",$O(E^2 V)$,26.5,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,,,Word RAM,words,5,"E: 3,
V: 5",$O(E)$,https://core.ac.uk/download/pdf/81946904.pdf,0,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,1270306.607,0.196802881,,2744535051194,0.0910901101,,4.21876E+18,0.05925906969,,2,,,Combinatorics,FALSE
5,Maximum Flow,2,Max Flow,,58,,,1,1,$O(V^3)$,^ see above,,[http://alexander-karzanov.net/Publications/maxflow-acyc.pdf Karzanov (1974)],Karzanov,1974,http://alexander-karzanov.net/Publications/maxflow-acyc.pdf,,['Alexander Karzanov'],1,['The preflow algorithm for the maximum flow problem'],,,,0,0,6,V: 6,$O(V^3)$,16,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,,,Word RAM,words,5,"E: 1,
V: 5",$O(V^2)$,https://core.ac.uk/download/pdf/81946904.pdf,0,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,12289485,641.0256755,,,,,,,,2,,,Combinatorics,FALSE
5,Maximum Flow,2,Max Flow,,60,,,1,1,$O(VE \log^2 V)$,^ see above,,[https://core.ac.uk/download/pdf/81946904.pdf Galil & Naamad (1980)],Galil & Naamad,1980,https://core.ac.uk/download/pdf/81946904.pdf,,"['Zvi Galil', Amnon Naamad']",2,['An O(EVlog^2V) Algorithm for the Maximal Flow Problem'],,,,1,0,6.02,"V: 6.02,
E: 3",$O(VE \log^2 V)$,16.2,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,,,Word RAM,words,5,"E: 3,
V: 5",$O(E)$,https://core.ac.uk/download/pdf/81946904.pdf,0,1,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,7559564.594,#VALUE!,,32701134618989,#VALUE!,,7.54729E+19,#VALUE!,,2,,,Combinatorics,FALSE
6,Matrix Product,2,Matrix Multiplication,Matrix Multiplication,74,,,1,1,$O(n^3)$,"""Any distribution (runtime is same regardless of input)""",(can be easily derived because additions and multiplications can be done in constant time),[- Naive algorithm (1940)],Naive algorithm,1940,-,,[],0,,,,,1,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,16,$n$: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",$O(1)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,1000000000,1,,1E+18,1,,1E+27,1,,3,,,Combinatorics,FALSE
6,Matrix Product,2,Matrix Multiplication,Matrix Multiplication,75,,,1,1,"$O(n^{\log(7)/\log(2)})$, approximately $O(n^{2.807})$","""Any distribution (runtime is same regardless of input)""",(can be easily derived because additions and multiplications can be done in constant time),[https://link.springer.com/article/10.1007%2FBF02165411 Strassen's algorithm (1969)],Strassen's algorithm,1969,https://link.springer.com/article/10.1007%2FBF02165411,10.1007%2FBF02165411,['Volker Strassen'],1,['Gaussian elimination is not optimal'],,,,1,0,4.4035,"n: 5.807,
n^2: 4.4035","$O(n^{\log(7)/\log(2)})$, approximately $O(n^{2.807})$",15.5,$n$: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,http://www.cs.cmu.edu/afs/cs/academic/class/15750-s17/ScribeNotes/lecture1.pdf,0,0,,0,,0,,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,263633138.6,3.79314985,0.04704540988,6.95024E+16,14.38798578,0.09630409036,1.83231E+25,54.57578611,0.1478801656,3,,,Combinatorics,FALSE
6,Matrix Product,2,Matrix Multiplication,Matrix Multiplication,76,,,1,1,"$O(n^{\log(143640)/\log(70)})$, approximately $O(n^{2.795})$","""Any distribution (runtime is same regardless of input)""",(can be easily derived because additions and multiplications can be done in constant time),[https://ieeexplore.ieee.org/document/4567976 Pan's algorithm (1978)],Pan's algorithm,1978,https://ieeexplore.ieee.org/document/4567976,,['V. Ya. Pan'],1,"['Strassen's algorithm is not optimal trilinear technique of aggregating, uniting and canceling for constructing fast algorithms for matrix operations']",,,,1,0,4.3975,"n: 5.795,
n^2: 4.3975","$O(n^{\log(143640)/\log(70)})$, approximately $O(n^{2.795})$",15.47,$n$: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Re-use of space in recursive branches,1,0,,0,,0,,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,251188643.2,3.981071706,0.03702559087,6.30957E+16,15.84893192,0.07542207611,1.58489E+25,63.09573445,0.1152402139,3,,,Combinatorics,FALSE
6,Matrix Product,2,Matrix Multiplication,Matrix Multiplication,79,,,1,1,$O(n^{2.51665})$,Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://epubs.siam.org/doi/abs/10.1137/0211020 Romani's algorithm (1981)],Romani's algorithm,1981,https://epubs.siam.org/doi/abs/10.1137/0211020,10.1137/0211020,['Francesco Romani'],1,['Some Properties of Disjoint Sums of Tensors Related to Matrix Multiplication'],,,,1,0,4.258325,"n: 5.51665,
n^2: 4.258325",$O(n^{2.51665})$,15.26,$n$: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Re-use of space in recursive branches,1,0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,35809643.71,27.92543841,0.08459673488,1.28233E+15,779.8301105,0.1763500773,4.59198E+22,21777.09772,0.2758654529,3,,,Combinatorics,FALSE
6,Matrix Product,2,Matrix Multiplication,Matrix Multiplication,80,,,1,1,$O(n^{2.495548})$,Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://epubs.siam.org/doi/abs/10.1137/0211038 Coppersmith–Winograd algorithm (1981)],Coppersmith–Winograd algorithm,1981,https://epubs.siam.org/doi/abs/10.1137/0211038,10.1137/0211038,"['D. Coppersmith', 'S. Winograd']",2,['On the Asymptotic Complexity of Matrix Multiplication'],,,,1,0,4.247774,"n: 5.495568,
n^2: 4.247774",$O(n^{2.495548})$,15.24,$n$: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Re-use of space in recursive branches,1,0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,30549211.13,32.73406949,0.08880779024,933254300796992,1071.519305,0.1855024041,2.85102E+22,35075.1874,0.2907842529,3,,,Combinatorics,FALSE
6,Matrix Product,2,Matrix Multiplication,Matrix Multiplication,81,,,1,1,"$O(n^{\log(54)/\log(5)})$, approximately $O(n^{2.4785})$",Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://ieeexplore.ieee.org/abstract/document/4568194 Strassen's algorithm (1986)],Strassen's algorithm,1986,https://ieeexplore.ieee.org/abstract/document/4568194,,['V. Strassen'],1,['The asymptotic spectrum of tensors and the exponent of matrix multiplication'],,,,1,0,4.23925,"n: 5.4785,
n^2: 4.23925","$O(n^{\log(54)/\log(5)})$, approximately $O(n^{2.4785})$",15.23,$n$: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Re-use of space in recursive branches,1,0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,27542287.03,36.30780548,0.08121744309,758577575029184,1318.256739,0.1690311592,2.0893E+22,47863.00923,0.2639768809,3,,,Combinatorics,FALSE
6,Matrix Product,2,Matrix Multiplication,Matrix Multiplication,82,,,1,1,$O(n^{2.3755})$,Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[http://www.cs.umd.edu/~gasarch/TOPICS/ramsey/matrixmult.pdf Coppersmith–Winograd algorithm (1990)],Coppersmith–Winograd algorithm,1990,http://www.cs.umd.edu/~gasarch/TOPICS/ramsey/matrixmult.pdf,,"['Don Coppersmith', 'Shmuel Winograd']",2,['Matrix Multiplication via Arithmetic Progressions'],,,,1,0,4.18775,"n: 5.3755,
n^2: 4.18775",$O(n^{2.3755})$,15.107,$n$: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Re-use of space in recursive branches,1,0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,13061708.88,76.55966069,0.0906364297,170608238900312,5861.381645,0.1894878218,2.22844E+21,448745.3899,0.2972987511,3,,,Combinatorics,FALSE
6,Matrix Product,2,Matrix Multiplication,Matrix Multiplication,83,,,1,1,$O(n^{2.372873})$,Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[http://theory.stanford.edu/~virgi/matrixmult-f.pdf Vassilevska Williams (2014)],Vassilevska Williams,2014,http://theory.stanford.edu/~virgi/matrixmult-f.pdf,,['Virginia Vassilevska William'],1,['Multiplying matrices in $O(n^2.373)$ time'],,,,1,0,4.1864365,"n: 5.372873,
n^2: 4.1864365",$O(n^{2.372873})$,15.103,$n$: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Re-use of space in recursive branches,1,0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,13152248,76.03262956,0.06027597087,179060585403530,5584.701947,0.1236605537,2.39607E+21,417349.5985,0.1911122816,3,,,Combinatorics,FALSE
6,Matrix Product,2,Matrix Multiplication,Matrix Multiplication,84,,,1,1,$O(n^{2.3728639})$,Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,[https://arxiv.org/abs/1401.7714 François Le Gall (2014)],François Le Gall,2014,https://arxiv.org/abs/1401.7714,,['François Le Gall'],1,['Powers of Tensors and Fast Matrix Multiplication'],,,,1,0,4.18643195,"n: 5.3728639,
n^2: 4.18643195",$O(n^{2.3728639})$,15.101,$n$: dimension of square matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Re-use of space in recursive branches,1,0,,0,,0,,0,0,,0,0,https://simons.berkeley.edu/sites/default/files/docs/2438/slideslegall.pdf,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,12971792.71,77.09034691,0.06047393837,168267406107047,5942.921586,0.124604974,2.18273E+21,458141.8867,0.1926142659,3,,,Combinatorics,FALSE
7,Graph Coloring,2,,3-Graph Coloring,85,,,1,1,$O((m+n) 3^n)$,Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Brute-force search (1852)],Brute-force search,1852,-,,[],0,,1,1,,1,0,8,"n: 8,
m: 3",$O((m+n) 3^n)$,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,3,n: 3,$O(n)$,(can be easily derived),1,0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
8,Graph Coloring,2,,4-Graph Coloring,98,,,1,1,$O((m+n) 4^n)$,Any distribution (runtime is same regardless of input),(same behavior across all inputs),[ Brute force (1852)],Brute force,1852,,,[],0,,1,1,,1,0,8,"n: 8,
m: 3",$O((m+n) 4^n)$,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,3,n: 3,$O(n)$,(can be easily derived),1,0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
9,Linear System,2,General Linear System,"General Linear System; Positive Definite, Hermitian Matrix; Non-Definite, Symmetric Matrix; Toeplitz Matrix; Vandermonde Matrix",102,,,1,1,$O(n^3)$,Presumably any continuous random matrix distribution?,"(none, though intuitively it seems ""rare"" to run into special cases where runtime is smaller)",[- Gaussian-Jordan Elimination (-150)],Gaussian-Jordan Elimination,-150,-,,[],0,,1,1,,1,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,16,$n$: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Levinson_recursion,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037,1,,3.7037E+16,1,,3.7037E+25,1,,3,,,Numerical Analysis,FALSE
9,Linear System,2,,"Positive Definite, Hermitian Matrix",103,,,1,1,$O(n^3)$,^see above (with caveat that matrix has to be positive definite and hermitian),^see above,[- Cholesky (1940)],Cholesky,1940,-,,[],0,,,,,0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,30,$n$: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037,1,,,,,,,,3,,,Numerical Analysis,FALSE
9,Linear System,2,,"Non-Definite, Symmetric Matrix",105,,,1,1,$O(n^3)$,"^see above (non-definite, symmetric)",^see above,[https://link.springer.com/article/10.1007/BF01931804 Aasen's method (1971)],Aasen's method,1971,https://link.springer.com/article/10.1007/BF01931804,10.1007/BF01931804,['Jan Ole Aasen'],1,['On the reduction of a symmetric matrix to tridiagonal form'],,,,0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,30,$n$: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,36926037,1,,,,,,,,3,,,Numerical Analysis,FALSE
9,Linear System,2,,Toeplitz Matrix,106,,,1,1,$O(n^2)$,^see above (Toeplitz),^see above,[https://onlinelibrary.wiley.com/doi/abs/10.1002/sapm1946251261 Levinson–Durbin recursion (1947)],Levinson–Durbin recursion,1947,https://onlinelibrary.wiley.com/doi/abs/10.1002/sapm1946251261,10.1002/sapm1946251261,['Norman Levinson'],1,['The Wiener (Root Mean Square) Error Criterion in Filter Design and Prediction'],,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,20,$n$: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,"can be easily derived (lower bounded by input size, upper bounded by runtime)",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Levinson_recursion,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,1000000,36.926037,,,,,,,,3,,,Numerical Analysis,FALSE
9,Linear System,2,,Toeplitz Matrix,107,,,1,1,$O(n^2)$,^see above (Toeplitz),^see above,[https://link.springer.com/article/10.1007/BF02163269 Bareiss Algorithm (1969)],Bareiss Algorithm,1969,https://link.springer.com/article/10.1007/BF02163269,10.1007/BF02163269,['Erwin H. Bareiss'],1,['Numerical solution of linear equations with Toeplitz and Vector Toeplitz matrices'],,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,20,$n$: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,"can be easily derived (lower bounded by input size, upper bounded by runtime)",1,0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,110889,333,,,,,,,,3,,,Numerical Analysis,FALSE
9,Linear System,2,,Vandermonde Matrix,108,,,1,1,$O(n^2)$,^see above (Vandermonde),^see above,[https://www.jstor.org/stable/2004623?seq=1 Bjorck-Pereyra (1970)],Bjorck-Pereyra,1970,https://www.jstor.org/stable/2004623?seq=1,,"['Åke Björck', 'Victor Pereyra']",2,['Solution of Vandermonde Systems of Equations'],,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,20,$n$: number of variables and number of equations,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,"can be easily derived (lower bounded by input size, upper bounded by runtime)",1,0,,0,,0,,0,0,,0,0,,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,110889,333,,,,,,,,3,,,Numerical Analysis,FALSE
10,Linear Programming,2,General Linear Programming,,110,,,1,1,$O((m/4)^{2^n})$,Any distribution (runtime is same regardless of input),"(same behavior across all inputs, at least for naive implementation)",[- Fourier–Motzkin elimination (1940)],Fourier–Motzkin elimination,1940,-,,[],0,,4,1,http://www.cs.cmu.edu/~odonnell/toolkit13/lecture13-anonymous.pdf,1,0,8,"n: 8,
m: 7",$O((m/4)^{2^n})$,,"$n$: number of variables
$m$: number of constraints
$L$: length of input, in bits",n,,,Word RAM,words,8,"n: 8,
m: 7",$O((m/4)^{2^n})$,Each iteration roughly squares the number of inequalities being considered; there are n iterations total,1,0,,0,,0,,0,0,,0,0,"https://gallica.bnf.fr/ark:/12148/bpt6k32227/f53

https://en.wikipedia.org/wiki/Fourier%E2%80%93Motzkin_elimination",Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,,Inf,,Inf,,Inf,,Inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,FALSE
10,Linear Programming,2,General Linear Programming,,111,,,1,1,$O(n^6 L^2 \log L \log\log L)$,Any distribution (runtime is same regardless of input),(same behavior across all inputs?),[https://www.sciencedirect.com/science/article/abs/pii/0041555380900610 Khachiyan Ellipsoid algorithm  (1979)],Khachiyan Ellipsoid algorithm ,1979,https://www.sciencedirect.com/science/article/abs/pii/0041555380900610,,['L.G. Khachiyan'],1,['Polynomial algorithms in linear programming'],,,,1,1->2,7,"n: 7,
L: 5.02",$O(n^6 L^2 \log L \log\log L)$,,"$n$: number of variables
$m$: number of constraints
$L$: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3,
L: 3",$O(nmL)$,see orginal paper (noting that $O(\alpha\log(H\alpha)) = O(L)$),0,1,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Linear_programming#Ellipsoid_algorithm,_following_Khachiyan",Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,,,,,,,,225400229426,Inf,,7.12778E+24,Inf,,2.254E+38,Inf,,1,,,Numerical Analysis,FALSE
11,Line segment intersection,2,Reporting intersection points,"Reporting all intersection points, line segments",118,,,1,1,$O(n^2)$,Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Naive (1940)],Naive,1940,-,,[],0,,1,1,,1,1,5,n: 5,$O(n^2)$,20,"$n$: number of line segments
$k$: number of points of intersection",n,,,Real RAM,words,1,n: 1,$O(1)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Image Processing,FALSE
11,Line segment intersection,2,Reporting intersection points,"Reporting all intersection points, line segments",119,,,1,1,$O(n \log n + k \log n)$,^see above,^see above,[https://doi.org/10.1109%2FTC.1979.1675432 Bentley–Ottmann algorithm (1979)],Bentley–Ottmann algorithm,1979,https://doi.org/10.1109%2FTC.1979.1675432,10.1109%2FTC.1979.1675432,"['Bentley', 'Ottmann']",2,['Algorithms for Reporting and Counting Geometric Intersections'],,,,1,4->5,4,"n: 4,
k: 3",$O(n \log n + k \log n)$,21,"$n$: number of line segments
$k$: number of points of intersection",n,,,Real RAM,words,3,n: 3,$O(n)$,https://dl.acm.org/doi/pdf/10.1145/147508.147511,0,0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,k=n^0.5,,,,,,,10280.93005,97.26746458,0.1245364271,19951500.14,50121.5444,0.3198161773,29898298291,33446719.62,0.5593088428,4,,,Image Processing,FALSE
12,Convex Hull,2,2-dimensional Convex Hull,2-dimensional,127,,,1,1,$O(n^3)$,Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Brute Force (1935)],Brute Force,1935,-,,[],0,,1,1,http://math.uaa.alaska.edu/~afkjm/cs351/handouts/bruteforce,1,0,6,n: 6,$O(n^3)$,30,"$n$: number of line segments
$h$: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,$O(n)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,1000,,1000000,,1000000000,,1000000000,1,,1E+18,1,,1E+27,1,,3,,,Image Processing,FALSE
12,Convex Hull,2,2-dimensional Convex Hull,2-dimensional,128,,,1,1,$O(nh)$,^see above,^see above,[https://linkinghub.elsevier.com/retrieve/pii/0020019073900203 Jarvis (1973)],Jarvis,1973,https://linkinghub.elsevier.com/retrieve/pii/0020019073900203,,['R.A. Jarvis'],1,['On the identification of the convex hull of a finite set of points in the plane'],,,,0,0,3,"n: 3,
h: 3",$O(nh)$,20,"$n$: number of line segments
$h$: number of points on the convex hull",n,,,Real RAM,words,1,n: 1,$O(1)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,1,0.1993539462,1,0.4384498883,1,0.7252105499,31622.7766,31622.7766,0.3134727062,1000000000,1000000000,0.7252105499,31622776601684,31622776601684,1.26601697,3,,,Image Processing,FALSE
14,Minimum Spanning Tree (MST),2,MST,"Undirected, General MST",157,,,1,1,$O(E + V \log^2 V)$,"""Either full or random graphs whose cost edges are assigned at random independently of the rest (using any continuous distribution)""",https://dl.acm.org/doi/10.5555/2791171.2791187,[https://link.springer.com/chapter/10.1007/BFb0028279 Kruskal’s algorithm with demand-sorting (1991)],Kruskal’s algorithm with demand-sorting,1991,https://link.springer.com/chapter/10.1007/BFb0028279,10.1007/BFb0028279,"['Bernard M. E. Moret', 'Henry D. Shapiro']",2,['An empirical analysis of algorithms for constructing a minimum spanning tree'],,,,0,0,5.01,"V: 5.01,
E: 3",$O(E \log V)$,11,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge weight",V,,,Word RAM,words,5,"E: 3,
V: 5",$O(E)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,32120,0.1580012453,,,,,,,,5,,,Combinatorics,FALSE
14,Minimum Spanning Tree (MST),2,MST,"Undirected, General MST",158,,,1,1,$O(E + V \log^2 V)$,"""Either full or random graphs whose cost edges are assigned at random independently of the rest (using any continuous distribution)""",https://dl.acm.org/doi/10.5555/2791171.2791187,[https://dl.acm.org/citation.cfm?id=2791187 Quick Kruskal algorithm (2006)],Quick Kruskal algorithm,2006,https://dl.acm.org/citation.cfm?id=2791187,,"['Rodrigo Paredes', 'G. Navarro']",2,['Optimal incremental sorting'],,,,0,0,5.01,"V: 5.01,
E: 3",$O(E \log V)$,11,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge weight",V,,,Word RAM,words,5,"E: 3,
V: 5",$O(E)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,32120,0.1580012453,,,,,,,,5,,,Combinatorics,FALSE
14,Minimum Spanning Tree (MST),2,MST,"Undirected, General MST",162,,,1,1,$O(E)$,Randomness within the algorithm steps themselves,http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf,[http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf Karger; Klein & Tarjan (1995)],Karger; Klein & Tarjan,1995,http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf,,"['David R. Karger', 'Philip N. Klein', 'Robert E. Tarjan']",3,['A Randomized Linear-Time Algorithm to Find Minimum Spanning Trees'],4,1,http://cs.brown.edu/research/pubs/pdfs/1995/Karger-1995-RLT.pdf,1,5->6,5,"V: 5,
E: 3","$O(\min(V^2, E \log V))$",21,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge weight",V,,,Word RAM,words,5,"E: 3,
V: 5",$O(E)$,can be easily derived,1,0,,1,Las Vegas,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,583,8.704974271,0.04012774621,583333.3333,18.66853416,0.05465664879,583333333.3,28.63431845,0.06289129891,5,,,Combinatorics,FALSE
15,Closest Pair Problem,2,k-dimensional space Closest Pair Problem,"k-dimensional space, l_m (or l_infty) norm",164,,,1,1,$O(kn^2)$,Any distribution (runtime is same regardless of input),(same behavior across all inputs),[- Naive Implementation (1975)],Naive Implementation,1975,-,,[],0,,1,1,,1,0,5,"n: 5,
k: 3",$O(kn^2)$,20,"$n$: number of points
$k$: dimension of space",n,,,Real RAM,words,1,n: 1,$O(1)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Image Processing,FALSE
20,LU Decomposition,2,Matrix LU Decomposition,Square Matrix LU Decomposition,209,,,1,1,$O(n^3)$,Any,,[ Doolittle Algorithm (1878)],Doolittle Algorithm,1878,,,[],0,,2,1,https://www.geeksforgeeks.org/doolittle-algorithm-lu-decomposition/,1,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,16,$n$: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",$\tilde{O}(1)$,Derived: only storing 1 intermediate variable,1,0,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,1000000000,1,,1E+18,1,,1E+27,1,,3,"This is essentially just Gaussian elimination

Original paper is ""Method employed in the solution of normal equations and the adjustment of a triangularization""",,Numerical Analysis,FALSE
20,LU Decomposition,2,Matrix LU Decomposition,Square Matrix LU Decomposition,210,,,1,1,$O(n^3)$,,,[https://ieeexplore.ieee.org/abstract/document/6434611 Crout algorithm (1941)],Crout algorithm,1941,https://ieeexplore.ieee.org/abstract/document/6434611,,['Prescott D. Crout'],1,A short method for evaluating determinants and solving systems of linear equations with real or complex coefficients,,,,0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,16,$n$: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",$\tilde{O}(1)$,Derived: only storing 1 intermediate variable,1,0,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,1000000000,1,,,,,,,,3,Slight variation of Doolittle,,Numerical Analysis,FALSE
20,LU Decomposition,2,Matrix LU Decomposition,Square Matrix LU Decomposition,215,,,1,0,$O(n^3)$,,,[https://arxiv.org/abs/math/0506382 Okunev; Johnson (1997)],Okunev; Johnson,1997,https://arxiv.org/abs/math/0506382,,"['Pavel Okunev', 'Charles R. Johnson']",2,['Necessary And Sufficient Conditions For Existence of the LU Factorization of an Arbitrary Matrix'],,,,0,0,6,"n: 6,
n^2: 4.5",$O(n^3)$,16,$n$: dimension of square matrix,n^2,,,Word RAM,words,1,"n: 1,
n^2: 1",$O(1)$,Derived: all in-place calculations,1,0,,0,,0,,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,9965,100351.2293,,,,,,,,3,,,Numerical Analysis,FALSE
21,Informed Search,2,,Informed Search,217,,,1,1,$O(b^d)$,,,[https://ieeexplore.ieee.org/document/4082128/ A* Algorithm (1968)],A* Algorithm,1968,https://ieeexplore.ieee.org/document/4082128/,,"['Peter E. Hart', 'Nils J. Nilsson', 'Bertram Raphael']",3,['A Formal Basis for the Heuristic Determination of Minimum Cost Paths'],,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",$O(b^d)$,https://en.wikipedia.org/wiki/A*_search_algorithm: Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,https://www.cs.auckland.ac.nz/compsci767s2c/projectReportExamples.d/astarNilsson.pdf,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics,FALSE
21,Informed Search,2,,Informed Search,218,,,1,1,$O(b^{(d/2)})$,,https://arxiv.org/pdf/1703.03868.pdf for experimental results,[https://www.cs.princeton.edu/courses/archive/spr06/cos423/Handouts/EPP%20shortest%20path%20algorithms.pdf Bidirectional A* Algorithm (2007)],Bidirectional A* Algorithm,2007,https://www.cs.princeton.edu/courses/archive/spr06/cos423/Handouts/EPP%20shortest%20path%20algorithms.pdf,,"['Andrew V. Goldberg', 'Chris Harrelson', 'Haim Kaplan', 'Renato F. Werneck']",4,['Efficient Point-to-Point Shortest Path Algorithms'],2,1,http://theory.stanford.edu/~amitp/GameProgramming/Variations.html,1,0,8,"b: 7,
d: 8",$O(b^{(d/2)})$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",$O(b^{d/2})$,Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,https://en.wikipedia.org/wiki/Bidirectional_search,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Robotics,FALSE
21,Informed Search,2,,Informed Search,224,,,1,1,$O(b^d)$,,,[http://idm-lab.org/bib/abstracts/papers/aamas09d.pdf Fringe Saving A* (FSA*) (2008)],Fringe Saving A* (FSA*),2008,http://idm-lab.org/bib/abstracts/papers/aamas09d.pdf,,"['Xiaoxun Sun', 'William Yeoh', 'Sven Koenig']",3,['Dynamic Fringe-Saving A*'],,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",$O(b^d)$,Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics,FALSE
21,Informed Search,2,,Informed Search,225,,,1,1,$O(b^d)$,,,[http://idm-lab.org/bib/abstracts/papers/aamas08b.pdf Generalized Adaptive A* (GAA*) (2008)],Generalized Adaptive A* (GAA*),2008,http://idm-lab.org/bib/abstracts/papers/aamas08b.pdf,,"['Xiaoxun Sun', 'William Yeoh', 'Sven Koenig']",3,['Generalized Adaptive A*'],,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",$O(b^d)$,Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics,FALSE
21,Informed Search,2,,Informed Search,226,,,1,1,$O(b^d)$,,,[https://linkinghub.elsevier.com/retrieve/pii/0004370285900840 Iterative Deepening A* (IDA*) (1985)],Iterative Deepening A* (IDA*),1985,https://linkinghub.elsevier.com/retrieve/pii/0004370285900840,,['Richard E. Korf'],1,['Depth-first iterative-deepening: An optimal admissible tree search'],,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",$O(b^d)$,Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics,FALSE
21,Informed Search,2,,Informed Search,227,,,1,1,$O(b^d)$,,,[http://users.cecs.anu.edu.au/~dharabor/data/papers/harabor-grastien-aaai11.pdf Jump Point Search (JPS) (2011)],Jump Point Search (JPS),2011,http://users.cecs.anu.edu.au/~dharabor/data/papers/harabor-grastien-aaai11.pdf,,"['Daniel Harabor', 'Alban Grastien']",2,['Online Graph Pruning for Pathfinding on Grid Maps'],,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",$O(b^d)$,Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics,FALSE
21,Informed Search,2,,Informed Search,228,,,1,1,$O(b^d)$,,,[http://idm-lab.org/bib/abstracts/papers/aaai02b.pdf Lifelong Planning A* (LPA*) (2001)],Lifelong Planning A* (LPA*),2001,http://idm-lab.org/bib/abstracts/papers/aaai02b.pdf,,"['Sven Koenig', 'Maxim Likhachev']",2,['D* Lite'],,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",$O(b^d)$,Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics,FALSE
21,Informed Search,2,,Informed Search,229,,,1,1,$O(b^d)$,,,[https://citeseerx.ist.psu.edu/pdf/ccbcfd4326845dae6f7abf94cb6a589a74dda395 Simplified Memory-Bounded A* (SMA*) (1992)],Simplified Memory-Bounded A* (SMA*),1992,https://citeseerx.ist.psu.edu/pdf/ccbcfd4326845dae6f7abf94cb6a589a74dda395,,['Stuart Russell'],1,['Efficient memory-bounded search methods'],,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",$O(b^d)$,Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics,FALSE
21,Informed Search,2,,Informed Search,230,,,1,1,$O(b^d)$,,,[http://idm-lab.org/bib/abstracts/papers/aaai07a.pdf Theta* (2010)],Theta*,2010,http://idm-lab.org/bib/abstracts/papers/aaai07a.pdf,,"['Alex Nash', 'Kenny Daniel', 'Sven Koenig', 'Ariel Felner']",4,['Theta*: Any-Angle Path Planning on Grids'],,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",$O(b^d)$,Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics,FALSE
21,Informed Search,2,,Informed Search,231,,,1,1,$O(b^d)$,,,[https://papers.nips.cc/paper/2382-ara-anytime-a-with-provable-bounds-on-sub-optimality.pdf Anytime Repairing A* (ARA*) (2005)],Anytime Repairing A* (ARA*),2005,https://papers.nips.cc/paper/2382-ara-anytime-a-with-provable-bounds-on-sub-optimality.pdf,,"['Maxim Likhachev', 'Geoff Gordon', 'Sebastian Thrun']",3,['ARA*: Anytime A* with Provable Bounds on Sub-Optimality'],,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",$O(b^d)$,Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics,FALSE
21,Informed Search,2,,Informed Search,232,,,1,1,$O(b^d)$,,,[https://www.cs.du.edu/~sturtevant/papers/TBA.pdf Time-Bounded A* (TBA*) (2009)],Time-Bounded A* (TBA*),2009,https://www.cs.du.edu/~sturtevant/papers/TBA.pdf,,"['Yngvi Björnsson', 'Vadim Bulitko', 'Nathan Sturtevant']",3,['TBA*: Time-Bounded A*'],,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,,,8,"b: 7,
d: 8",$O(b^d)$,Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics,FALSE
22,String Search,2,Single String Search,Single String Search,233,Linear searching,,1,1,$O(m(n-m+1))$,,Wikipedia claims this is O(n+m),[- Naïve string-search algorithm (1940)],Naïve string-search algorithm,1940,-,,[],0,,1,1,https://en.wikipedia.org/wiki/String-searching_algorithm,1,0,5,"m: 3,
n: 3,
m+n: 5",$O(m(n-m+1))$,20,"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,1,"n: 1,
m: 1,
s: 1,
m+n: 1",$O(1)$,Derived (pointer algorithm),1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,80100,1,,80000100000,1,,8E+16,1,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics,FALSE
22,String Search,2,Single String Search,Single String Search,234,Automaton-based,,1,1,$O(m+n)$,,,[https://pdfs.semanticscholar.org/4479/9559a1067e06b5a6bf052f8f10637707928f.pdf Knuth-Morris-Pratt (KMP) algorithm (1977)],Knuth-Morris-Pratt (KMP) algorithm,1977,https://pdfs.semanticscholar.org/4479/9559a1067e06b5a6bf052f8f10637707928f.pdf,,"['D. Knuth', 'James H. Morris', 'V. Pratt']",3,['Fast Pattern Matching in Strings'],,,,0,0,3,"m: 3,
n: 3,
m+n: 3",$O(m+n)$,10,"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"n: 1,
m: 3,
s: 1,
m+n: 3",$O(m)$,https://pdfs.semanticscholar.org/4479/9559a1067e06b5a6bf052f8f10637707928f.pdf,0,1,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics,FALSE
22,String Search,2,Single String Search,Single String Search,235,"Heuristics-based, bad-character and good-suffix heuristics",,1,1,$O(mn + s)$,,,[https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf Boyer-Moore (BM) algorithm (1977)],Boyer-Moore (BM) algorithm,1977,https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf,,"['Robert S. Boyer', 'J Strother Moore']",2,['A Fast String Searching Algorithm'],,,,0,0,5,"m: 3,
n: 3,
s: 3,
m+n: 5",$O(mn + s)$,20,"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,1,"n: 1,
m: 1,
s: 3,
m+n: 1",$O(s)$,https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf,0,1,,0,,0,,1,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics,FALSE
22,String Search,2,Single String Search,Single String Search,237,"Hashing-based, compare the text and patterns via their hash functions",,1,1,$O(m+n)$,,,[https://pdfs.semanticscholar.org/c47d/151f09c567013761632c89e237431c6291a2.pdf Rabin-Karp (RK) algorithm (1987)],Rabin-Karp (RK) algorithm,1987,https://pdfs.semanticscholar.org/c47d/151f09c567013761632c89e237431c6291a2.pdf,,"['R. Karp', 'M. Rabin']",2,['Efficient Randomized Pattern-Matching Algorithms'],,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,20,"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,1,"n: 1,
m: 1,
s: 1,
m+n: 1",$O(1)$,Derived: only storing a rolling hash,1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics,FALSE
23,Sequence Alignment,2,,"Edit sequence, global alignment",250,,,1,1,$O(mn)$,Any distribution (runtime is same regardless of input),(same behavior across all inputs),[https://www.sciencedirect.com/science/article/pii/0022283670900574 Needleman–Wunsch algorithm (1970)],Needleman–Wunsch algorithm,1970,https://www.sciencedirect.com/science/article/pii/0022283670900574,,"['Saul B. Needleman', 'Christian D. Wunsch']",2,['A general method applicable to the search for similarities in the amino acid sequence of two proteins'],1,1,https://www.sciencedirect.com/science/article/pii/0022283670900574,1,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,20,"$n$, $m$: lengths of input strings; assume $n\geq m$",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"Uses an $m\times n$ array, whose contents are of size $O(1)$",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",1000000,,1000000000000,,1E+18,,250000,1,,250000000000,1,,2.5E+17,1,,4,,,Bioinformatics,FALSE
23,Sequence Alignment,2,,"Edit sequence, local alignment",251,,,1,1,$O(mn^2)$,^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0022283681900875 Smith–Waterman algorithm (1981)],Smith–Waterman algorithm,1981,https://www.sciencedirect.com/science/article/pii/0022283681900875,,"['T.F. Smith', 'M.S. Waterman']",2,['Identification of common molecular subsequences'],,,,0,0,6,"m: 3,
n: 5,
m+n: 6",$O(mn^2)$,30,"$n$, $m$: lengths of input strings; assume $n\geq m$",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"Uses an $m\times n$ array, whose contents are of size $O(1)$",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics,FALSE
23,Sequence Alignment,2,"Edit Distance, constant-size alphabet",Edit distance,252,,,1,1,$O(mn / \log n)$,^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0022000080900021 Masek; Patterson (1980)],Masek; Patterson,1980,https://www.sciencedirect.com/science/article/pii/0022000080900021,,"['William J. Masek,' 'Michael S. Paterson']",2,['A faster algorithm computing string edit distances'],1,1,https://reader.elsevier.com/reader/sd/pii/0022000080900021?token=73AF2A185C2FC6C67F5579CDB00D3B782FF86C4EB03694E1E783EFF5885B871AB0841E8A69D206FB16A1EFF882EB712C,1,0,4.99,"m: 3,
n: 3,
m+n: 4.99",$O(mn / \log n)$,19,"$n$, $m$: lengths of input strings; assume $n\geq m$",m+n,,,Word RAM,words,3,"n: 3,
m: 1,
m+n: 3",$O(n)$,https://www.sciencedirect.com/science/article/pii/0022000080900021,0,1,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,27901,8.960252321,0.2451796774,13205456224,18.93156857,0.3418953868,8.65131E+15,28.89735285,0.3998638745,4,,,Bioinformatics,FALSE
23,Sequence Alignment,2,,Edit sequence,253,,,1,1,$O(mn)$,^see above,^see above,[https://dl.acm.org/doi/10.1145/360825.360861 Hirschberg's algorithm (1975)],Hirschberg's algorithm,1975,https://dl.acm.org/doi/10.1145/360825.360861,10.1145/360825.360861,['D. S. Hirschberg'],1,['A linear space algorithm for computing maximal common subsequences'],,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,20,"$n$, $m$: lengths of input strings; assume $n\geq m$",m+n,,,Word RAM,words,3,"n: 3,
m: 1,
m+n: 3",$O(n)$,https://dl.acm.org/doi/10.1145/360825.360861,0,1,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",1000,2.981071706,1000000,14.84893192,1000000000,62.09573445,250000,1,,,,,,,,4,,,Bioinformatics,FALSE
23,Sequence Alignment,2,,"Edit sequence, local alignment",254,,,1,1,$O(mn)$,^see above,^see above,[https://www.ncbi.nlm.nih.gov/pubmed/2983426 FASTA (1985)],FASTA,1985,https://www.ncbi.nlm.nih.gov/pubmed/2983426,10.1126/science.2983426,"['David J. Lipman', 'William R. Pearson']",2,['Rapid and Sensitive Protein Similarity Searches'],,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,20,"$n$, $m$: lengths of input strings; assume $n\geq m$",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"Uses an $m\times n$ array, whose contents are of size $O(1)$",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/FASTA,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics,FALSE
23,Sequence Alignment,2,,"Edit sequence, local alignment",255,,,1,1,$O(mn)$,^see above,^see above,[https://www.sciencedirect.com/science/article/pii/0022283682903989 Gotoh (1982)],Gotoh,1982,https://www.sciencedirect.com/science/article/pii/0022283682903989,,['Osamu Gotoh'],1,['An improved algorithm for matching biological sequences'],,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,20,"$n$, $m$: lengths of input strings; assume $n\geq m$",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"Uses a constant number of $m\times n$ arrays, whose contents are of size $O(1)$",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics,FALSE
23,Sequence Alignment,2,,"Edit sequence, local alignment",256,,,1,1,$O(mn)$,^see above,^see above,[https://link.springer.com/article/10.1007/BF02462326 Altschul and Erickson (1986)],Altschul and Erickson,1986,https://link.springer.com/article/10.1007/BF02462326,10.1007/BF02462326,"['Stephen F. Altschul', 'Bruce W. Erickson']",2,['Optimal sequence alignment using affine gap costs'],,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,20,"$n$, $m$: lengths of input strings; assume $n\geq m$",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"Uses a constant number of $m\times n$ arrays, whose contents are of size $O(1)$",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics,FALSE
23,Sequence Alignment,2,,"Edit sequence, local alignment",257,,,1,1,$O(mn)$,^see above,^see above,[https://academic.oup.com/bioinformatics/article/4/1/11/205106?login=true Myers and Miller (1988)],Myers and Miller,1988,https://academic.oup.com/bioinformatics/article/4/1/11/205106?login=true,10.1093/bioinformatics/4.1.11,"['Eugene W. Myers', 'Webb Miller']",2,['Optimal alignments in linear space'],,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,20,"$n$, $m$: lengths of input strings; assume $n\geq m$",m+n,,,Word RAM,words,3,"n: 3,
m: 2,
m+n: 3",$O(n+\log m)$,https://academic.oup.com/bioinformatics/article/4/1/11/205106?login=true,0,1,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics,FALSE
23,Sequence Alignment,2,,"Edit sequence, global alignment",260,,,1,1,$O(mn)$,^see above,^see above,[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC427531/ David Sankoff (1972)],David Sankoff,1972,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC427531/,10.1073/pnas.69.1.4,['David Sankoff'],1,['Matching Sequences under Deletion/Insertion Constraints'],,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,20,"$n$, $m$: lengths of input strings; assume $n\geq m$",m+n,,,Word RAM,words,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,"Uses a constant number of $m\times n$ arrays, whose contents are of size $O(1)$",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics,FALSE
25,Line Clipping,2,,Rectangular Window,265,,,1,1,$O(n)$,Any distribution (runtime is same regardless of input),(same behavior across all inputs),[https://books.google.com/books/about/Principles_of_interactive_computer_graph.html?id=inJ8AAAAIAAJ Cohen–Sutherland (1967)],Cohen–Sutherland,1967,https://books.google.com/books/about/Principles_of_interactive_computer_graph.html?id=inJ8AAAAIAAJ,,"['William M. Newman', 'Robert F. Sproull']",2,['Principles of Interactive Computer Graphics'],1,1,https://www.geeksforgeeks.org/line-clipping-set-1-cohen-sutherland-algorithm/,1,0,3,n: 3,$O(n)$,10,$n$: number of lines,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,"Easily derived ($O(1)$ per segment, space can be re-used)",1,0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Image Processing,FALSE
25,Line Clipping,2,,Rectangular Window,266,,,1,1,$O(n)$,^ see above,^ see above,[https://dl.acm.org/doi/10.1145/357332.357333 Liang–Barsky (1984)],Liang–Barsky,1984,https://dl.acm.org/doi/10.1145/357332.357333,10.1145/357332.357333,"['You-Dong Liang', 'B. A. Barsky']",2,['A New Concept and Method for Line Clipping'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of lines,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,"Easily derived ($O(1)$ per segment, space can be re-used)",1,0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000,1,,,,,,,,6,,,Image Processing,FALSE
25,Line Clipping,2,Convex Polygonal Window,Convex Polygonal Window; Convex Polyhedral window,267,,,1,1,$O(np)$,^ see above,^ see above,[https://www.sciencedirect.com/science/article/pii/0097849378900213 Cyrus–Beck (1978)],Cyrus–Beck,1978,https://www.sciencedirect.com/science/article/pii/0097849378900213,,"['Mike Cyrus', 'Jay Beck']",2,['Generalized two- and three-dimensional clipping'],,,,0,0,3,"n: 3,
p: 3",$O(np)$,,"$n$: number of lines
$p$: number of edges/faces on polygon/polyhedron",n,,,Word/Real RAM,words,1,n: 1,$O(1)$,"Easily derived? ($O(1)$ per segment, space can be re-used)",1,0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000,1,,,,,,,,6,,,Image Processing,FALSE
25,Line Clipping,2,,Rectangular Window,268,,,1,1,$O(n)$,^ see above,^ see above,[https://dl.acm.org/doi/10.1145/37401.37432 Nicholl–Lee–Nicholl (1987)],Nicholl–Lee–Nicholl,1987,https://dl.acm.org/doi/10.1145/37401.37432,10.1145/37401.37432,"['Tina M. Nicholl', 'D. T. Lee', 'Robin A. Nicholl']",3,['An efficient new algorithm for 2-D line clipping: Its development and analysis'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of lines,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,"Easily derived ($O(1)$ per segment, space can be re-used)",1,0,,0,,0,,0,0,,0,0,https://www.cs.drexel.edu/~david/Classes/Talks/McCurdyPresentation.pdf,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000,1,,,,,,,,6,,,Image Processing,FALSE
25,Line Clipping,2,,Rectangular Window,269,,,1,1,$O(n)$,^ see above,^ see above,[https://www.sciencedirect.com/science/article/pii/0097849387900616 Fast clipping (1987)],Fast clipping,1987,https://www.sciencedirect.com/science/article/pii/0097849387900616,,"['Mark S. Sobkow', 'Paul Pospisil', 'Yee-Hong Yang']",3,['A fast two-dimensional line clipping algorithm via line encoding'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of lines,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,"Easily derived ($O(1)$ per segment, space can be re-used)",1,0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1000,1,,,,,,,,6,,,Image Processing,FALSE
26,NFA to DFA conversion,2,,,272,,,1,1,$O(2^n)$,,,[https://ieeexplore.ieee.org/document/5392601 Rabin–Scott powerset construction (1959)],Rabin–Scott powerset construction,1959,https://ieeexplore.ieee.org/document/5392601,10.1147/rd.32.0114,"['M. O. Rabin', 'D. Scott']",2,['Finite Automata and Their Decision Problems'],1,1,http://www.cs.nuim.ie/~jpower/Courses/Previous/parsing/node9.html,1,0,8,n: 8,$O(2^n)$,,$n$: number of states,n,,,,,1,n: 1,$O(1)$,"Derived: besides the $O(2^n)$ output nodes and the $O(n)$ input nodes, there's nothing to store",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
27,Multiplication,2,Multiplication,Multiplication,273,,,1,1,$O(n^{1.58})$,Any distribution (runtime is same regardless of input),(same behavior across all inputs),[http://www.mathnet.ru/php/archive.phtml?wshow=paper&jrnid=dan&paperid=26729&option_lang=eng Karatsuba Algorithm (1962)],Karatsuba Algorithm,1962,http://www.mathnet.ru/php/archive.phtml?wshow=paper&jrnid=dan&paperid=26729&option_lang=eng,,"['A. Karatsuba', 'Yu. Ofman']",2,['Multiplication of many-digital numbers by automatic computers'],,,,1,0,4.58,n: 4.58,$O(n^{1.58})$,16.27,"$n$: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,$O(n)$,Re-use space across recursive subcalls (to obtain the recursion $S(n) = S(n/2)+O(n)$),1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,54954.08739,18.19700859,0.1409660639,3019951720,331.1311215,0.3018035591,165958690743756,6025.595861,0.4853136828,4,,,Numerical Analysis,FALSE
27,Multiplication,2,Multiplication,Multiplication,274,,,1,1,$O(n^{1.46})$,^see above,^see above,[https://www.ams.org/journals/tran/1969-142-00/S0002-9947-1969-0249212-8/S0002-9947-1969-0249212-8.pdf Toom-3 (1969)],Toom-3,1969,https://www.ams.org/journals/tran/1969-142-00/S0002-9947-1969-0249212-8/S0002-9947-1969-0249212-8.pdf,,"['STEPHEN A. COOK', 'STÂL O. AANDERAA']",2,['ON THE MINIMUM COMPUTATION TIME OF FUNCTIONS'],,,,1,0,4.46,n: 4.46,$O(n^{1.46})$,15.7,"$n$: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,$O(n)$,Re-use space across recursive subcalls (to obtain the recursion $S(n) = S(n/3)+O(n)$),1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,23988,41.68751042,0.1372665733,19952623.15,50118.72336,0.4523422297,19952623.15,50118723363,1.338651544,4,,,Numerical Analysis,FALSE
27,Multiplication,2,Multiplication,Multiplication,275,,,1,1,$O(n^2)$,^see above,^see above,[ Long Multiplication (1940)],Long Multiplication,1940,,,[],0,,1,1,https://en.wikipedia.org/wiki/Multiplication_algorithm,1,0,5,n: 5,$O(n^2)$,20,"$n$: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,$O(n)$,Easily derived (needed for intermediate results),1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Numerical Analysis,FALSE
46,Line Simplification,2,,,391,,0,0,1,$O(n^2)$,,,[https://www.sciencedirect.com/science/article/abs/pii/S0146664X72800170 Ramer–Douglas–Peucker algorithm (1972)],Ramer–Douglas–Peucker algorithm,1972,https://www.sciencedirect.com/science/article/abs/pii/S0146664X72800170,,['Urs Ramer'],1,['An iterative procedure for the polygonal approximation of plane curves'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of points ($n-1$ line segments),n,,,Real RAM,,3,n: 3,$O(n)$,"Derived: Recursive algorithm that has a worst-case recursion tree depth of $O(n)$, and $O(1)$ info stored per level",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
46,Line Simplification,2,,,392,,0,0,1,$O(n^2)$,,,[https://hull-repository.worktribe.com/output/459275 Visvalingam–Whyatt (1993)],Visvalingam–Whyatt,1993,https://hull-repository.worktribe.com/output/459275,,"['Maheswari Visvalingam', 'James Duncan Whyatt']",2,['Line generalisation by repeated elimination of the smallest area'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of points ($n-1$ line segments),n,,,Real RAM,,3,n: 3,$O(n)$,Derived: Storing each points effective area,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
46,Line Simplification,2,,,393,,0,0,1,$O(n)$,,,[ Reumann–Witkam (1974)],Reumann–Witkam,1974,,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,$n$: number of points ($n-1$ line segments),n,,,Real RAM,,1,n: 1,$O(1)$,Derived: The only auxiliary space used is the current search line and the distance from the next point to the line.,1,0,,0,,0,,0,0,,0,0,http://psimpl.sourceforge.net/reumann-witkam.html,,,,,,,,,,,1000,,,,,,,,,4,,,Image Processing,FALSE
46,Line Simplification,2,,,394,,0,0,1,$O(n)$,,,[http://dx.doi.org/10.2312/eg.19811012 Opheim simplification (1981)],Opheim simplification,1981,http://dx.doi.org/10.2312/eg.19811012,10.2312/eg.19811012,['Harald Opheim'],1,['SMOOTHING A DIGITIZED CURVE BY DATA REDUCTION METHODS'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of points ($n-1$ line segments),n,,,Real RAM,,1,n: 1,$O(1)$,"Derived: The only auxiliary space used is the current search ray and the current best, the distances from the next point to the ray and to the ray's origin, candidate point to stay in the simplified line",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Image Processing,FALSE
46,Line Simplification,2,,,395,,0,0,1,$O(n)$,,,[- Lang simplification (1969)],Lang simplification,1969,-,,[],0,,,,,1,0,3,n: 3,$O(n)$,10,$n$: number of points ($n-1$ line segments),n,,,Real RAM,,1,n: 1,$O(1)$,"Derived: The only auxiliary space used is the current search line and the distance from a point in the search interval to the search line, which is all $O(1)$ space",1,0,,0,,0,,0,0,,0,0,http://koreascience.or.kr/article/JAKO201300763572495.page,,,,,,,,,,,1000,,,,,,,,,4,,,Image Processing,FALSE
46,Line Simplification,2,,,396,,0,0,1,$O(n)$,,,[https://citeseerx.ist.psu.edu/pdf/a38573231ae6ef54a1b6117bce64c408aa2c5e3d Zhao-Saalfeld (1997)],Zhao-Saalfeld,1997,https://citeseerx.ist.psu.edu/pdf/a38573231ae6ef54a1b6117bce64c408aa2c5e3d,,"['Zhiyuan Zhao', 'Alan Saalfeld']",2,['Linear-time sleeve-fitting polyline simplification algorithms'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of points ($n-1$ line segments),n,,,Real RAM,,3,n: 3,$O(n)$,Derived: There is an auxiliary sleeve set that is $O(n)$ size worst-case,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Image Processing,FALSE
49,Nearest Neighbor Search,2,k Nearest Neighbors Search,Nearest Neighbor Search (NNS),416,,,1,1,$O(n)$,,,[- Linear search (1940)],Linear search,1940,-,,[],0,,1,1,,1,0,3,n: 3,$O(n)$,10,$n$: number of elements,n,,,Real RAM,,1,n: 1,$O(1)$,Derived: Only ever storing the current shortest distance and the corresponding node,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Combinatorics,FALSE
49,Nearest Neighbor Search,2,k Nearest Neighbors Search,Nearest Neighbor Search (NNS),417,,,1,1,"k-d Tree construction: $O(n \log n)$
NNS: $O(\log n)$","Beta distribution B(m, n). See paper for details",https://dl.acm.org/doi/pdf/10.1145/355744.355745,[https://dl.acm.org/doi/pdf/10.1145/355744.355745 k-d Tree (1975)],k-d Tree,1975,https://dl.acm.org/doi/pdf/10.1145/355744.355745,10.1145/355744.355745,"['Jerome H. Friedman', 'Jon Louis Bentley', 'Raphael Ari Finkel']",3,['An Algorithm for Finding Best Matches in Logarithmic Expected Time'],1,1,https://www.geeksforgeeks.org/k-dimensional-tree/,1,4->5,4,n: 4,"k-d Tree construction: $O(n \log n)$
NNS: $O(n)$",11,$n$: number of elements,n,,,Real RAM,,3,n: 3,$O(n)$,https://dl.acm.org/doi/pdf/10.1145/355744.355745,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,100.3512293,,19931568.57,50171.66594,,29897352854,33447777.3,,4,,,Combinatorics,FALSE
49,Nearest Neighbor Search,2,k Nearest Neighbors Search,Nearest Neighbor Search (NNS),418,,,1,1,"R-Tree construction: $O(n \log n)$
NNS: $O(\log n)$",,,[http://www-db.deis.unibo.it/courses/SI-LS/papers/Gut84.pdf R-tree (1984)],R-tree,1984,http://www-db.deis.unibo.it/courses/SI-LS/papers/Gut84.pdf,,['Antonin Guttman'],1,['R-TREES. A DYNAMIC INDEX STRUCTURE FOR SPATIAL SEARCHING'],,,,0,0,4,n: 4,"R-Tree construction: $O(n \log n)$
NNS: $O(n)$",11,$n$: number of elements,n,,,Real RAM,,2,n: 2,$O(\log n)$,"https://www.sciencedirect.com/science/article/pii/S1877050915019675, Table 2",0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics,FALSE
66,The Subset-Sum Problem,2,Subset Sum,Subset Sum,541,,,1,1,$O(2^{(n/2)} n)$,,,[https://dl.acm.org/doi/10.1145/321812.321823 Horowitz and Sahni (1974)],Horowitz and Sahni,1974,https://dl.acm.org/doi/10.1145/321812.321823,10.1145/321812.321823,"['Ellis Horowitz', 'Sartaj Sahni']",2,['Computing Partitions with Applications to the Knapsack Problem'],,,,1,0,8,n: 8,$O(2^{(n/2)} n)$,988.1,$n$: the number of integers in the set,n,,,Word RAM,words,8,"n: 8,
t: 1",$O(2^{n/2})$,https://dl.acm.org/doi/10.1145/321812.321823,0,1,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Subset_sum_problem,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
66,The Subset-Sum Problem,2,Subset Sum,Subset Sum,542,,,1,1,$O(nt)$,,,[https://onlinelibrary.wiley.com/doi/10.1002/nav.3800030107 Bellman dynamic programming algorithm (1956)],Bellman dynamic programming algorithm,1956,https://onlinelibrary.wiley.com/doi/10.1002/nav.3800030107,10.1002/nav.3800030107,['Richard Bellman'],1,['Notes on the theory of dynamic programming IV - Maximization over discrete sets'],,,,1,0,8,"n: 8,
t: 3",$O(nt)$,1010,"$n$: the number of integers in the set
$t$: the target sum",n,,,Word RAM,words,1,"n: 1,
t: 3",$O(t)$,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Subset_sum_problem,,,,,1,0.5399265261,1,1.371373706,1,2.651741273,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
66,The Subset-Sum Problem,2,Subset Sum,Subset Sum,543,,,1,1,$O(n \max(S))$,,,[https://www.sciencedirect.com/science/article/abs/pii/S0196677499910349 Psinger (1999)],Psinger,1999,https://www.sciencedirect.com/science/article/abs/pii/S0196677499910349,,['David Pisinger'],1,['Linear Time Algorithms for Knapsack Problems with Bounded Weights'],,,,1,0,8,"n: 8,
max(S): 3",$O(n \max(S))$,1010,"$n$: the number of integers in the set
$\max(S)$: largest number in the set",n,,,Word RAM,words,1,"n: 1,
t: 3",$O(t)$,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
66,The Subset-Sum Problem,2,Subset Sum,Subset Sum,544,,,1,1,"$\tilde{O}(\min(\sqrt{n'}t, t^{5/4}, \sigma))$",,,[https://dl.acm.org/doi/pdf/10.1145/3329863 Koiliaris and Xu (2019)],Koiliaris and Xu,2019,https://dl.acm.org/doi/pdf/10.1145/3329863,10.1145/3329863,"['Konstantinos Koiliaris', 'Chao Xu']",2,['Faster Pseudopolynomial Time Algorithms for Subset Sum'],,,,1,0,8,"n: 8,
t: 4.25,
\sigma: 3","$\tilde{O}(\min(\sqrt{n'}t, t^{5/4}, \sigma))$",1045,"$n'$: the number of distinct elements in the set
$t$: the target sum
$\sigma$: sum of elements in the set",n,,,Word RAM,words,1,"n: 1,
t: 3",$O(t)$,"https://dl.acm.org/doi/pdf/10.1145/3329863, Table 1",0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
66,The Subset-Sum Problem,2,Subset Sum,Subset Sum,545,,,1,1,$\tilde{O}(nt^{1+\epsilon})$,,,[https://arxiv.org/abs/1610.04712 Bringman (2017)],Bringman,2017,https://arxiv.org/abs/1610.04712,,['Karl Bringmann'],1,['A Near-Linear Pseudopolynomial Time Algorithm for Subset Sum'],,,,1,0,8,"n: 8,
t: 4.01",$\tilde{O}(nt^{1+\epsilon})$,,"$n$: the number of integers in the set
$t$: the target sum
$\epsilon$: any positive constant",n,,,Word RAM,words,3,"n: 3,
t: 5?",$\tilde{O}(nt^{\epsilon})$,https://arxiv.org/abs/1610.04712,0,1,,1,Monte Carlo,1,$(n+t)^{-\Omega(1)}$ error,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
80,Maximum Subarray Problem,2,1D Maximum Subarray,1D Maximum Subarray,622,,,1,1,$O(n^3)$,"""Any distribution/runtime same regardless of input""",(same general behavior regardless of input),[- Brute Force (1977)],Brute Force,1977,-,,[],0,,1,1,,1,0,6,n: 6,$O(n^3)$,30,$n$: length of array,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,"keep track of which subarray is being computed, along with current maximum",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000000000,1,,1E+18,1,,1E+27,1,,3,,,Combinatorics,FALSE
80,Maximum Subarray Problem,2,1D Maximum Subarray,1D Maximum Subarray,623,,,1,1,$O(n^2)$,^see above,^see above,[- Grenander (1977)],Grenander,1977,-,,[],0,,,,,1,3->4,5,n: 5,$O(n^2)$,20,$n$: length of array,n,,,Word/Real RAM,words,3,n: 3,$O(n)$,storing precomputed cumulative sums,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000000,1000,0.2052609369,1000000000000,1000000,0.4526539259,1E+18,1000000000,0.7508270317,3,,1099511627776,Combinatorics,FALSE
80,Maximum Subarray Problem,2,1D Maximum Subarray,1D Maximum Subarray,623,,,1,1,$O(n^2)$,^see above,^see above,[https://dl.acm.org/doi/pdf/10.1145/358234.381162 Faster Brute Force (via x[L:U] = x[L:U-1]+x[U]) (1977)],Faster Brute Force (via x[L:U] = x[L:U-1]+x[U]),1977,https://dl.acm.org/doi/pdf/10.1145/358234.381162,10.1145/358234.381162,['Jon Bentley'],1,['Programming pearls'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: length of array,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,"keep track of which subarray is being computed, along with current maximum",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,1000000,1000,,1000000000000,1000000,,1E+18,1000000000,,3,,1099511627776,Combinatorics,FALSE
80,Maximum Subarray Problem,2,1D Maximum Subarray,1D Maximum Subarray,624,,,1,1,$O(n \log n)$,^see above,^see above,[- Shamos (1978)],Shamos,1978,-,,[],0,,,,,1,4->5,4,n: 4,$O(n \log n)$,11,$n$: length of array,n,,,Word/Real RAM,words,2,n: 2,$O(\log n)$,keep track of recursive maximums,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Maximum_subarray_problem,,,,,,,,,,,9965.784285,100343.3319,0.3539982994,19931568.57,50171665944,0.9124540696,29897352854,3.34478E+16,1.721772176,3,,,Combinatorics,FALSE
80,Maximum Subarray Problem,2,1D Maximum Subarray,1D Maximum Subarray,625,,,1,1,$O(n)$,^see above,^see above,[- Kadane's Algorithm (1982)],Kadane's Algorithm,1982,-,,[],0,,1,1,,1,5->6,3,n: 3,$O(n)$,10,$n$: length of array,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,keep track of current tail sum and best sum,1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Maximum_subarray_problem

David Gries, ""A note on a standard strategy for developing loop invariants and loops"". https://www.sciencedirect.com/science/article/pii/0167642383900151",,,,,,,,,,,1000,1000000,0.3894954944,1000000,1000000000000,0.9306977289,1000000000,1E+18,1.682695795,3,,,Combinatorics,FALSE
80,Maximum Subarray Problem,2,1D Maximum Subarray,1D Maximum Subarray,628,,,1,1,$O(\log n)$,^see above,^see above,[https://citeseerx.ist.psu.edu/pdf/8d736315dabeaed0f7e63fbaeff65e6818eb910d Perumalla and Deo (1995)],Perumalla and Deo,1995,https://citeseerx.ist.psu.edu/pdf/8d736315dabeaed0f7e63fbaeff65e6818eb910d,,"['Kalyan Perumalla', 'Narsingh Deo']",2,['Parallel Algorithms for Maximum Subsequence and Maximum Subarray'],,,,0,0,2,n: 2,$O(\log n)$,1,$n$: length of array,n,,,EREW PRAM,words,3,n: 3,$O(n)$,constant number of arrays as outlined in algorithm,1,0,,0,,0,,0,1,$O(n/\log n)$,0,0,"Ferreira, Camargo, Song, ""A Parallel Maximum Subarray Algorithm on GPUs"". https://ieeexplore.ieee.org/document/6972008",,,,,,,,,,,9965,,,,,,,,,3,,,Combinatorics,FALSE
99,Motif Search,2,Motif Search,Motif Search,788,,,1,1,$O(mn^2 \sigma)$,,,[https://link.springer.com/chapter/10.1007/BFb0054337 Speller (Sagot) (1998)],Speller (Sagot),1998,https://link.springer.com/chapter/10.1007/BFb0054337,10.1007/BFb0054337,['Marie -France Sagot'],1,['Spelling approximate repeated or common motifs using a suffix tree'],,,,0,0,5.5,"m: 3,
n: 5,
\sigma: 3,
mn: 5.5",$O(mn^2 \sigma)$,16,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function $V(k, m)$ defined as the number of $k$-mers that are at most $m$ Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,5.5,"m: 3,
n: 5,
k: 1,
mn: 5.5",$O(mn^2/w)$,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,TRUE
99,Motif Search,2,Motif Search,Motif Search,,,,1,1,$O(k nm \sigma)$,,,[https://pubmed.ncbi.nlm.nih.gov/12169566/ Mitra (2002)],Mitra,2002,https://pubmed.ncbi.nlm.nih.gov/12169566/,10.1093/bioinformatics/18.suppl_1.s354,"['Eleazar Eskin', 'Pavel A. Pevzner']",2,['Finding composite regulatory patterns in DNA sequences'],,,,0,0,3,"m: 3,
n: 3,
k: 3,
\sigma: 3,
mn: 3",$O(k nm \sigma)$,10,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function $V(k, m)$ defined as the number of $k$-mers that are at most $m$ Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,3,"m: 3,
n: 3,
k: 3,
mn: 3",$O(mnk)$,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,TRUE
99,Motif Search,2,Motif Search,Motif Search,,,,1,1,$O(k nm \sigma)$,,,[https://link.springer.com/chapter/10.1007/978-3-540-45078-8_5 Census (2003)],Census,2003,https://link.springer.com/chapter/10.1007/978-3-540-45078-8_5,10.1007/978-3-540-45078-8_5,"['Patricia A. Evans', 'Andrew D. Smith']",2,['Toward Optimal Motif Enumeration'],,,,0,0,3,"m: 3,
n: 3,
k: 3,
\sigma: 3,
mn: 3",$O(k nm \sigma)$,10,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function $V(k, m)$ defined as the number of $k$-mers that are at most $m$ Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,3,"m: 3,
n: 3,
k: 3,
mn: 3",$O(mnk)$,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,TRUE
99,Motif Search,2,Motif Search,Motif Search,,,,1,1,$O(mn^2 \sigma)$,,,[https://link.springer.com/chapter/10.1007/11682462_69 Risotto (2006)],Risotto,2006,https://link.springer.com/chapter/10.1007/11682462_69,10.1007/11682462_69,"['Nadia Pisanti', 'Alexandra M. Carvalho', 'Laurent Marsan', 'Marie-France Sagot']",4,['RISOTTO: Fast Extraction of Motifs with Mismatches'],,,,0,0,5.5,"m: 3,
n: 5,
\sigma: 3,
mn: 5.5",$O(mn^2 \sigma)$,16,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function $V(k, m)$ defined as the number of $k$-mers that are at most $m$ Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,5.5,"m: 3,
n: 5,
k: 1,
mn: 5.5",$O(mn^2)$,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,TRUE
99,Motif Search,2,Motif Search,Motif Search,,,,1,1,$O(nm^2 \sigma)$,,,[https://ieeexplore.ieee.org/abstract/document/4359890 PMS (2007)],PMS,2007,https://ieeexplore.ieee.org/abstract/document/4359890,,"['Jaime Davila', 'Sudha Balla', 'Sanguthevar Rajasekaran']",3,"['Fast and Practical Algorithms for Planted (l, d) Motif Search']",,,,0,0,5.5,"m: 5,
n: 3,
\sigma: 3,
mn: 5.5",$O(nm^2 \sigma)$,16,"$n$: size of set of input strings
$m$: size of input strings
$k$: length of substrings
$\sigma$: function $V(k, m)$ defined as the number of $k$-mers that are at most $m$ Hamming distance from the motif space
$w$: size of a word machine",mn,,,Word RAM,words,5.5,"m: 5,
n: 3,
k: 1,
mn: 5.5",$O(m^2 n)$,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/pdf/1471-2105-11-S8-S1.pdf,0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,TRUE
124,Rod-Cutting Problem,2,,Rod-Cutting Problem,947,,,1,1,$O(n 2^n)$,"""Any distribution/runtime same regardless of input""",(same general behavior regardless of input),[ Brute Force (1940)],Brute Force,1940,,,[],0,,1,1,https://web.stanford.edu/class/archive/cs/cs161/cs161.1168/lecture12.pdf,1,0,8,n: 8,$O(n 2^n)$,,$n$: length of rod,n,,,Word RAM,words,3,n: 3,$O(n)$,easily derived,1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Dynamic_programming

 https://web.stanford.edu/class/archive/cs/cs161/cs161.1168/lecture12.pdf",,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
124,Rod-Cutting Problem,2,,Rod-Cutting Problem,948,,,1,1,$O(n^2)$,"""Any distribution/runtime same regardless of input""",(same general behavior regardless of input),[ Dynamic Programming (1953)],Dynamic Programming,1953,,,[],0,,0.5,1,https://www.geeksforgeeks.org/cutting-a-rod-dp-13/,1,1->4,5,n: 5,$O(n^2)$,,$n$: length of rod,n,,,Word RAM,words,3,n: 3,$O(n)$,easily derived,1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Dynamic_programming

https://web.stanford.edu/class/archive/cs/cs161/cs161.1168/lecture12.pdf",,,,,,,,,,,1000000,Inf,Inf,1000000000000,Inf,Inf,1E+18,Inf,Inf,1,,,Combinatorics,FALSE
130,Change-Making Problem,2,,Change-Making Problem,960,,,1,1,$O(S^n)$,"""Any distribution/runtime same regardless of input""",(same general behavior regardless of input),[NA Brute Force (1940)],Brute Force,1940,NA,,[],0,,1,1,"https://en.wikipedia.org/wiki/Change-making_problem#:~:text=It%20is%20also%20the%20most,the%20order%20of%20the%20coins.",1,0,8,"n: 8,
S: 7",$O(S^n)$,,"$n$: number of coin denominations
$S$: sum to be made",n,,,Word RAM,words,3,n: 3,$O(n)$,Easily derived,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Change-making_problem,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
130,Change-Making Problem,2,,Change-Making Problem,961,,,1,1,$O(Sn)$,"""Any distribution/runtime same regardless of input""",(same general behavior regardless of input),[https://dl.acm.org/doi/10.1145/321864.321874 Dynamic Programming (1953)],Dynamic Programming,1953,https://dl.acm.org/doi/10.1145/321864.321874,10.1145/321864.321874,['J. W. Wright'],1,['The Change-Making Problem'],2,1,"https://en.wikipedia.org/wiki/Change-making_problem#:~:text=It%20is%20also%20the%20most,the%20order%20of%20the%20coins.",0,0,8,"n: 8,
S: 3",$O(Sn)$,,"$n$: number of coin denominations
$S$: sum to be made",n,,,Word RAM,words,5,"n: 5,
S: 3",$O(Sn)$,Easily derived,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Change-making_problem,,,,,,,,,,,50000,Inf,Inf,50000000,Inf,Inf,50000000000,Inf,Inf,1,,,Combinatorics,FALSE
3,Matrix Chain Multiplication,2,,Approximate MCOP,35,,,1,0,$O(\log n)$,,,[https://citeseerx.ist.psu.edu/pdf/e8b840a921f7967b30ac161b3dd9654b27998ddb Czumaj (1996)],Czumaj,1996,https://citeseerx.ist.psu.edu/pdf/e8b840a921f7967b30ac161b3dd9654b27998ddb,,['Artur Czumaj'],1,['Very Fast Approximation of the Matrix Chain Product Problem*'],,,,0,0,2,n: 2,$O(\log n)$,,$n$: number of matrices in chain,n,,,CREW PRAM,words?,3,n: 3,$O(n)$,"Derived: solving the optimal triangulation problem of a convex polygon where there are $n+1$ vertices and $n+1$, so total $O(n)$ auxiliary space",1,0,,0,n/a,1,$1.1547$,0,1,$n / \log n$,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,9.965,Inf,,,,,,,,1,,,Combinatorics,FALSE
3,Matrix Chain Multiplication,2,,Approximate MCOP,35.1,,,1,0,$O(\log \log n)$,,,[https://citeseerx.ist.psu.edu/pdf/e8b840a921f7967b30ac161b3dd9654b27998ddb Czumaj (1996)],Czumaj,1996,https://citeseerx.ist.psu.edu/pdf/e8b840a921f7967b30ac161b3dd9654b27998ddb,,['Artur Czumaj'],1,['Very Fast Approximation of the Matrix Chain Product Problem*'],,,,0,0,1.99,n: 1.99,$O(\log \log n)$,,$n$: number of matrices in chain,n,,,COMMON CRCW PRAM,words?,3,n: 3,$O(n)$,"Derived: solving the optimal triangulation problem of a convex polygon where there are $n+1$ vertices and $n+1$, so total $O(n)$ auxiliary space",1,0,,0,n/a,1,$1.1547$,0,1,$n / \log \log n$,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,9.965,Inf,,,,,,,,1,,,Combinatorics,FALSE
3,Matrix Chain Multiplication,1,,Approximate MCOP,36,,,1,0,$O(n)$,,,[https://www.worldcat.org/title/computing-matrix-chain-products-in-near-optimal-time/oclc/727708286 Chandra (1975)],Chandra,1975,https://www.worldcat.org/title/computing-matrix-chain-products-in-near-optimal-time/oclc/727708286,,"['Thomas J. Watson IBM Research Center', 'A. K. Chandra']",2,['Computing matrix chain products in near-optimal time'],,,,0,0,3,n: 3,$O(n)$,,$n$: number of matrices in chain,n,,,Word RAM,words,3,n: 3,$O(n)$?,"Derived: cannot find pdf of original paper or any description of the actual algorithm, but likely the same space as Chin's algorithm",1,0,,0,n/a,1,$2$,1,0,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,1000,Inf,,,,,,,,1,,,Combinatorics,FALSE
3,Matrix Chain Multiplication,2,,Approximate MCOP,37,,,1,0,$O(n)$,,,[https://dl.acm.org/citation.cfm?id=359556 Chin (1978)],Chin,1978,https://dl.acm.org/citation.cfm?id=359556,,['Francis Y. Chin'],1,['An O(n) algorithm for determining a near-optimal computation order of matrix chain products'],,,,0,0,3,n: 3,$O(n)$,,$n$: number of matrices in chain,n,,,Word RAM,words,3,n: 3,$O(n)$,"Derived: There are a few auxiliary variables, only one of which is variable length. That is a list of length $O(n)$.",1,0,,0,n/a,1,$1.2485$,1,0,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,1000,Inf,,,,,,,,1,,,Combinatorics,FALSE
6,Matrix Product,2,Matrix Multiplication,Matrix Multiplication,77,,,1,0,$O(n^{2.7799})$,,,[https://doi.org/10.1016/0020-0190(79)90113-3 Bini's algorithm (1979)],Bini's algorithm,1979,https://doi.org/10.1016/0020-0190(79)90113-3,10.1016/0020-0190(79)90113-3,"['Dario Bini', 'Milvio Capovani', 'Francesco Romani', 'Grazia Lotti']",4,['O(n2.7799) complexity for n √ó n approximate matrix multiplication'],,,,1,0,4.38995,"n: 5.7799,
n^2: 4.38995",$O(n^{2.7799})$,,$n$: dimension of square matrix,n^2,https://doi.org/10.1016/0020-0190(79)90113-3,0,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,"Derived: Same idea as Strassen's, plus three additional $n\times n$ matrices",1,0,,0,n/a,1,$O(n \log n)$ error,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,218776162.4,0.0000000455488381,,4.7863E+16,0,,1.04713E+25,0,,3,,,Combinatorics,FALSE
6,Matrix Product,2,Matrix Multiplication,Matrix Multiplication,78,,,1,0,"$O(n^{3\log(52)/\log(110)})$, approximately $O(n^{2.5218})$",,,[https://epubs.siam.org/doi/abs/10.1137/0210032 Schonhage's algorithm (1980)],Schonhage's algorithm,1980,https://epubs.siam.org/doi/abs/10.1137/0210032,10.1137/0210032,['A. Sch√∂nhage'],1,['Partial and Total Matrix Multiplication'],,,,1,0,4.2609,"n: 5.5218,
n^2: 4.2609","$O(n^{3\log(52)/\log(110)})$, approximately $O(n^{2.5218})$",,$n$: dimension of square matrix,n^2,https://epubs.siam.org/doi/abs/10.1137/0210032,0,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,"Derived: Same idea as Strassen's, plus three additional $n\times n$ matrices",1,0,,0,n/a,1,?,0,0,,0,0,,"matrix multiplication or matrix product is a binary operation that produces a matrix
 from two matrices with entries in a field; or; more generally; in a ring
 or even a semiring. ",,,,,,,,,,36307805.48,0.0000002744588903,,1.31826E+15,0,,4.7863E+22,0,,3,,,Combinatorics,FALSE
7,Graph Coloring,0.001,#N/A,k-coloring a 3-colorable graph,95,,,1,0,$O(\text{poly}(n))$,,,"[https://citeseerx.ist.psu.edu/pdf/80d38445643fdfe297abb158de4fe9b404bfc145 Karger, Blum (1997)]","Karger, Blum",1997,https://citeseerx.ist.psu.edu/pdf/80d38445643fdfe297abb158de4fe9b404bfc145,,"['Avrim Blum', 'David Karger']",2,['An Õ(n^3/14)-Coloring Algorithm for 3-Colorable Graphs'],,,,0,0,7,n: 7,$O(\text{poly}(n))$,,"$n$: number of nodes
$m$: number of edges",n,,,,,#VALUE!,,,,,,,0,n/a,1,$\tilde{O}(n^{3/14})$,0,0,,0,0,"https://www.sciencedirect.com/science/article/abs/pii/S0020019096001901

http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.36.4204 ","graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,4.38,Inf,,,,,,,,1,,,Combinatorics,TRUE
7,Graph Coloring,2,,3-Graph Coloring,97,,,1,1,$O(n^2)$,,,[https://dl.acm.org/doi/10.1145/359094.359101 Brélaz (DSatur) (1979)],Brélaz (DSatur),1979,https://dl.acm.org/doi/10.1145/359094.359101,10.1145/359094.359101,['Daniel Br√©laz'],1,['New methods to color the vertices of a graph'],,,,0,0,5,n: 5,$O(n^2)$,,"$n$: number of nodes
$m$: number of edges",n,,,Word RAM,words,5,"n: 5,
m: 3",$O(m+n)$,Derived using adjacency lists,1,0,,0,,0,,1,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,1000000,Inf,Inf,,,Inf,,,Inf,1,,,Combinatorics,TRUE
28,Maximum Cardinality Matching,1,,,286,,,1,0,$O(V^{0.5} E)$,,https://link.springer.com/content/pdf/10.1007/PL00009186.pdf,[https://ieeexplore.ieee.org/document/4567800 Micali and Vazirani (1980)],Micali and Vazirani,1980,https://ieeexplore.ieee.org/document/4567800,,"['Silvio Micali', 'Vijay V. Vazirani']",2,['An O(v|v| c |E|) algoithm for finding maximum matching in general graphs'],,,,0,0,5.5,"V: 5.5,
E: 3",$O(V^{0.5} E)$,,"$V$: number of nodes
$E$: number of edges",V,,,Restricted Randomness (RR),not mentioned,3,V: 3,$O(V)$,https://link.springer.com/content/pdf/10.1007/PL00009186.pdf,0,0,,0,n/a,1,,0,0,,0,0,https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=4567800,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
61,The Traveling-Salesman Problem,2,,Minimum TSP,488,ILP formulation,,1,1,$\text{exp}(V)$,,,[https://dl.acm.org/doi/10.1145/321043.321046 Miller-Tucker-Zemlin (MTZ) formulation  (1960)],Miller-Tucker-Zemlin (MTZ) formulation ,1960,https://dl.acm.org/doi/10.1145/321043.321046,10.1145/321043.321046,"['C. E. Miller', 'A. W. Tucker', 'R. A. Zemlin']",3,['Integer Programming Formulation of Traveling Salesman Problems'],,,,0,0,8,V: 8,$\text{exp}(V)$,1000,"$V$: number of vertices
$E$: number of edges",V,Derived: Integer programming is NP-hard and this uses $O(V^2)$ constraints on $O(V^2)$ variables,1,Word RAM,words,7,V:7,$O(V^4)$,"Derived: $V^2 + 2V$ constraints on $V^2$ variables, most integer programs use space of $O(nm)$ where $n$ is the number of variables and $m$ is the number of constraints",1,0,,0,,0,,0,0,,0,0,,,,,,1000000000000,Inf,1E+24,Inf,1E+36,Inf,,,,,,,,,,1,,,Combinatorics,TRUE
61,The Traveling-Salesman Problem,2,,Minimum TSP,489,ILP formulation,,1,1,$O(\text{exp}(V))$,,,[https://doi.org/10.1287/opre.2.4.393 Dantzig-Fulkerson-Johnson (DFJ) formulation (1954)],Dantzig-Fulkerson-Johnson (DFJ) formulation,1954,https://doi.org/10.1287/opre.2.4.393,10.1287/opre.2.4.393,"['G. Dantzig', 'R. Fulkerson', 'S. Johnson']",3,['Solution of a Large-Scale Traveling-Salesman Problem'],,,,0,0,8,"V: 8,
E: 5",$O(\text{exp}(V))$,1000,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,8,V: 8,$O(V^2 2^V)$,http://web.ist.utl.pt/~ist11038/CD_Casquilho/TSP1992EJOR_Laporte.pdf,0,0,,0,,0,,0,0,,0,0,,,,,,Inf,,Inf,,Inf,,,,,,,,,,,1,Runtime unclear; may be $O(2^V*poly(V))$?,,Combinatorics,TRUE
61,The Traveling-Salesman Problem,1,,Geometric Maximum TSP,490,Tunneling,,1,0,$O(V^2 \log\log E)$,,,[https://dl.acm.org/doi/10.1145/876638.876640 Barvinok (2003)],Barvinok,2003,https://dl.acm.org/doi/10.1145/876638.876640,10.1145/876638.876640,"['Alexander Barvinok', 'S√°ndor P. Fekete', 'David S. Johnson', 'Arie Tamir', 'Gerhard J. Woeginger', 'Russ Woodroofe']",6,['The geometric maximum traveling salesman problem'],,,,0,0,5.01,"V: 5.01,
E: 1.99",$O(V^2 \log\log E)$,,"$V$: number of vertices
$E$: number of edges",V,https://dl.acm.org/doi/10.1145/876638.876640,0,Real RAM,memory cells,3,V: 3,$O(V)$?,"Derived: One memory cell per tunnel-city pair, with one tunnel total",1,0,,0,,1,?,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
93,Feature Detection,1,,Corner Detection,718,,,0,1,$O(n^2)$,,Experimental results here: https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=4739758,[https://www.semanticscholar.org/paper/A-Combined-Corner-and-Edge-Detector-Harris-Stephens/6818668fb895d95861a2eb9673ddc3a41e27b3b3 Harris and Stephens algorithm (1988)],Harris and Stephens algorithm,1988,https://www.semanticscholar.org/paper/A-Combined-Corner-and-Edge-Detector-Harris-Stephens/6818668fb895d95861a2eb9673ddc3a41e27b3b3,,"['C. G. Harris', 'M. Stephens']",2,['A Combined Corner and Edge Detector'],,,,1,3->4,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,"https://www.mdpi.com/2076-3417/10/2/443/htm

https://bmva-archive.org.uk/bmvc/1988/avc-88-023.pdf",,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,1,,Corner Detection,720,,,0,0,$O(n^3)$,,,[https://www.sciencedirect.com/science/article/abs/pii/0167865582900204 L. Kitchen and A. Rosenfeld (1982)],L. Kitchen and A. Rosenfeld,1982,https://www.sciencedirect.com/science/article/abs/pii/0167865582900204,,"['Les Kitchen', 'Azriel Rosenfeld']",2,['Gray-level corner detection'],,,,0,0,6,n: 6,$O(n^3)$,30,$n$: size of neighborhood around pixel,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,1,,Corner Detection,729,,,0,0,$O(n^3)$,,Experimental results here: https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=4739758,[ The SUSAN corner detector (1997)],The SUSAN corner detector,1997,,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
98,The Set-Covering Problem,1,,Weighted Set-Covering,767,,,1,0,$O(dn^2)$,,,[https://www.jstor.org/stable/3689577#metadata_info_tab_contents Chvatal greedy heuristic (1979)],Chvatal greedy heuristic,1979,https://www.jstor.org/stable/3689577#metadata_info_tab_contents,,['V. Chvatal'],1,['A Greedy Heuristic for the Set-Covering Problem'],,,,1,0,5,"n: 5,
d: 3",$O(dn^2)$,,"$n$: number of elements in the universe
$d$: size of the largest set in $S$
$m$: number of sets in $S$",n,,,,,5,"d: 3,
m: 3,
n: 5",$O(dm)$,"Derived -- worst case, updating each set in $S$ to be something else and we don't want to change the input",1,0,,0,,1,$\ln n - \ln \ln n + \Theta(1)$,1,0,,0,0,"Petr Slavik. ""A tight analysis of the greedy algorithm for set cover"". https://dl.acm.org/doi/10.1145/237814.237991",,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
98,The Set-Covering Problem,0.001,,Unweighted Set-Covering,772,,,1,0,$O(n \log n)$,,,[https://dl.acm.org/doi/pdf/10.1145/1150334.1150336 Alon; Moshkovitz & Safra (2006)],Alon; Moshkovitz & Safra,2006,https://dl.acm.org/doi/pdf/10.1145/1150334.1150336,10.1145/1150334.1150336,"['Noga Alon', 'Dana Moshkovitz', 'Shmuel Safra']",3,['Algorithmic construction of sets for k-restrictions'],,,,1,4->5,4,n: 4,$O(n \log n)$,11,$n$: number of elements in the universe,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
99,Motif Search,1,Motif Search,Motif Search,786,,,1,0,$O(nm)$,,,[https://www.ncbi.nlm.nih.gov/pubmed/9788350 Roth AlignACE (1998)],Roth AlignACE,1998,https://www.ncbi.nlm.nih.gov/pubmed/9788350,10.1038/nbt1098-939,"['Frederick P. Roth', 'Jason D. Hughes', 'Preston W. Estep', 'George M. Church']",4,['Finding DNA regulatory motifs within unaligned noncoding sequences clustered by whole-genome mRNA quantitation'],,,,0,0,3,"n: 3,
m: 3,
mn: 3",$O(nm)$,10,"$n$: number of sequences
$m$: length of sequences",mn,,,Word RAM,words,2,"n: 3,
m: 3,
mn: 2",$O(n + m)$,derived: essentially just modified Gibbs sampling,1,0,,0,,1,,0,0,,0,0,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2966288/,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,TRUE
102,Image Compositing,1,,Image Compositing,804,,,0,0,$O(n^2 k/r)$,,,[ Petro Vlahos Algorithm (1985)],Petro Vlahos Algorithm,1985,,,[],0,,,,,1,0,5,"n: 5,
k: 3",$O(n^2 k/r)$,,"$n$: number of images?
$k$: number of pixels in each image?",n,,,Word RAM?,words,3,"n: 3,
k: 3",$O(nk)$??,Keeps track of all pixels across all images,1,0,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Image Processing,FALSE
103.1,Texture Synthesis,1,,Texture Synthesis,808,,,0,0,$O(n^3)$,,,[https://ieeexplore.ieee.org/abstract/document/790383 non-parametric sampling Efros and Leung (1999)],non-parametric sampling Efros and Leung,1999,https://ieeexplore.ieee.org/abstract/document/790383,,"['A.A. Efros', 'T.K. Leung']",2,['Texture synthesis by non-parametric sampling'],,,,0,0,6,n: 6,$O(n^3)$,30,$n$: number of pixels in input image,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
103.1,Texture Synthesis,1,,Texture Synthesis,810,,,0,0,$O(N \log n)$,,,[https://dl.acm.org/doi/abs/10.1145/383259.383295 image analogies Hertzmann (2001)],image analogies Hertzmann,2001,https://dl.acm.org/doi/abs/10.1145/383259.383295,10.1145/383259.383295,"['Aaron Hertzmann', 'Charles E. Jacobs', 'Nuria Oliver', 'Brian Curless', 'David H. Salesin']",5,['Image analogies'],,,,0,0,3,"N: 3,
n: 4",$O(N \log n)$,,"$n$: number of pixels in input image
$N$: number of pixels in output image",n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
103.1,Texture Synthesis,1,,Texture Synthesis,811,,,0,0,$O(n^3)$,,,[https://ieeexplore.ieee.org/abstract/document/679446 R. Paget ; I.D. Longstaff (1998)],R. Paget ; I.D. Longstaff,1998,https://ieeexplore.ieee.org/abstract/document/679446,10.1109/83.679446,"['R. Paget', 'I.D. Longstaff']",2,['Texture synthesis via a noncausal nonparametric multiscale Markov random field'],,,,1,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
103.1,Texture Synthesis,1,,Texture Synthesis,813,,,0,0,$O(n^3)$,,,[https://dl.acm.org/doi/abs/10.1145/383259.383296 Image quilting Efros-Freeman (2001)],Image quilting Efros-Freeman,2001,https://dl.acm.org/doi/abs/10.1145/383259.383296,10.1145/383259.383296,"['Alexei A. Efros', 'William T. Freeman']",2,['Image quilting for texture synthesis and transfer'],,,,0,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
115,SLAM Algorithms,1,,SLAM Algorithms,905,,0,0,0,$O(n^3)$,"don't think ""avg case distribution"" makes sense here",(none),[http://ais.informatik.uni-freiburg.de/teaching/ss12/robotics/slides/12-slam.pdf EKF SLAM (1998)],EKF SLAM,1998,http://ais.informatik.uni-freiburg.de/teaching/ss12/robotics/slides/12-slam.pdf,,"['Wolfram Burgard', 'Cyrill Stachniss', 'Kai Arras', 'Maren Bennewitz']",4,['SLAM: Simultaneous Localization and Mapping'],,,,1,0,6,n: 6,$O(n^3)$,30,$n$: number of dimensions in state space,n,,,Real RAM?,words?,5,n: 5,$O(n^2)$?,(can be easily derived? it's mostly square matrices here),1,0,,0,,1,,0,0,,0,0,"https://www.researchgate.net/figure/Computational-Complexity-of-Different-Forms-of-Unscented-Kalman-Filter_tbl1_220398698

https://www.researchgate.net/publication/283824088_Computational_cost_analysis_of_extended_Kalman_filter_in_simultaneous_localization_and_mapping_EKF-SLAM_problem_for_autonomous_vehicle

https://www.researchgate.net/figure/Computational-Complexity-of-Different-Forms-of-Unscented-Kalman-Filter_tbl1_220398698",,,,,,,,,,,1000000000,1,,1E+18,1,,1E+27,1,,3,,,Robotics,FALSE
115,SLAM Algorithms,1,,SLAM Algorithms,906,,0,0,0,$O(n^3)$,^see above,(none),[https://www.seas.harvard.edu/courses/cs281/papers/unscented.pdf UKF (2000)],UKF,2000,https://www.seas.harvard.edu/courses/cs281/papers/unscented.pdf,,"['Eric A. Wan', 'Rudolph van der Merwe']",2,['The Unscented Kalman Filter for Nonlinear Estimation'],,,,0,0,6,n: 6,$O(n^3)$,30,$n$: number of dimensions in state space,n,,,Real RAM?,words?,5,n: 5,$O(n^2)$?,(can be easily derived? it's mostly square matrices here),1,0,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000000,,,,,,,,,3,,,Robotics,FALSE
115,SLAM Algorithms,1,,SLAM Algorithms,907,,0,0,0,$O(n^3)$,^see above,(none),[https://citeseerx.ist.psu.edu/pdf/37c4798e4557916019cee1d027e6bba0dc71f8e4 Compressed Extended KF (2002)],Compressed Extended KF,2002,https://citeseerx.ist.psu.edu/pdf/37c4798e4557916019cee1d027e6bba0dc71f8e4,,['José E. Guivant'],1,['Efficient Simultaneous Localization and Mapping in Large Environments'],,,,0,0,6,n: 6,$O(n^3)$,30,$n$: number of dimensions in state space,n,,,Real RAM?,words?,5,n: 5,$O(n^2)$?,(can be easily derived? it's mostly square matrices here),1,0,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000000,,,,,,,,,3,,,Robotics,FALSE
115,SLAM Algorithms,1,,SLAM Algorithms,909,,0,0,1,$O(n^2)$,^see above,(none),[https://papers.nips.cc/paper/1716-bayesian-map-learning-in-dynamic-environments.pdf Rao-Blackwellized Particle Filtering SLAM (2001)],Rao-Blackwellized Particle Filtering SLAM,2001,https://papers.nips.cc/paper/1716-bayesian-map-learning-in-dynamic-environments.pdf,,['Kevin P. Murphy'],1,['Bayesian Map Learning in Dynamic Environments'],,,,1,3->4,5,n: 5,$O(n^2)$,20,$n$: number of dimensions in state space,n,,,Real RAM?,words?,3,n: 3,$O(n)$?,(based on Section 4 of the paper?),0,1,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000,1,,1000000000000,1000000,,1E+18,1000000000,,3,,,Robotics,FALSE
7,Graph Coloring,2,,3-Graph Coloring,96,,,1,1,$O(n \log n)$,,,[https://www.sciencedirect.com/science/article/pii/0012365X89902148 Petford and Welsh (1989)],Petford and Welsh,1989,https://www.sciencedirect.com/science/article/pii/0012365X89902148,,"['A.D. Petford', 'D.J.A. Welsh']",2,['A randomised 3-colouring algorithm'],,,,1,1->5,4,n: 4,$O(n \log n)$,,$n$: number of vertices,n,,,Word RAM,words,3,n: 3,$O(n)$,"Derived: we store the coloring of each vertex in a dictionary and the maximum size of this dictionary is equal to the number of vertices in the graph, $n$.",1,0,,1,Monte Carlo,0,n/a,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,9965,Inf,Inf,,,Inf,,,Inf,1,,,Combinatorics,TRUE
8,Graph Coloring,2,,4-Graph Coloring,101,,,1,1,$O(1.7272^n)$,,,[https://link.springer.com/chapter/10.1007/978-3-540-73545-8_9 Fomin; Gaspers & Saurabh (2007)],Fomin; Gaspers & Saurabh,2007,https://link.springer.com/chapter/10.1007/978-3-540-73545-8_9,10.1007/978-3-540-73545-8_9,"['Fedor V. Fomin', 'Serge Gaspers', 'Saket Saurabh']",3,['Improved Exact Algorithms for Counting 3- and 4-Colorings'],1,0,https://www.researchgate.net/publication/221426668_Improved_Exact_Algorithms_for_Counting_3-_and_4-Colorings,1,0,8,n: 8,$O(1.7272^n)$,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,3,n: 3,$O(n)$,"Derived: we store the sets $I$ and $C$ (in algorithm enumIS), and the maximum size of these sets is equal to the number of vertices in the graph. The algorithm also stores the solution sets $S_1$ and $S_2$, which have a maximum size equal to the number of vertices in the graph. We also call a 3-coloring algorithm, which likely has $O(n)$ space complexity",1,0,,0,n/a,0,n/a,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
15,Closest Pair Problem,1,2-dimensional space Closest Pair Problem,"2-dimensional space, Euclidean metric",172,Randomized Sieve,,1,1,$O(n)$,,,[https://www.sciencedirect.com/science/article/pii/S0890540185710498 Khuller; Matias (1995)],Khuller; Matias,1995,https://www.sciencedirect.com/science/article/pii/S0890540185710498,,"['Khuller S.', 'Matias Y.']",2,['A Simple Randomized Sieve Algorithm for the Closest-Pair Problem'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of points,n,,,not mentioned,not mentioned,3,n: 3,"$O(n)$, not sure if this is auxiliary","https://www.sciencedirect.com/science/article/pii/S0890540185710498, Theorem 2.3",0,1,,1,Las Vegas,0,n/a,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,1000,1000,0.4125375446,1000000,1000000,0.995262315,1000000000,1000000000,1.818382931,4,,,Image Processing,FALSE
20,LU Decomposition,2,Matrix LU Decomposition,Square Matrix LU Decomposition,212,,,1,1,$O(n^{2.376})$,,,[https://dl.acm.org/citation.cfm?id=248979 Bunch; Hopcroft (1974)],Bunch; Hopcroft,1974,https://dl.acm.org/citation.cfm?id=248979,,"['Gene H. Golub', 'Charles F. Van Loan']",2,['Matrix computations (3rd ed.)'],1,1,https://www.ams.org/journals/mcom/1974-28-125/S0025-5718-1974-0331751-8/,1,0,4.188,"n: 5.376,
n^2: 4.188",$O(n^{2.376})$,15.109,$n$: dimension of square matrix,n^2,,,Word RAM,words,4,"n: 5.01,
n^2: 4",$\tilde{O}(n^2)$,Derived: Uses Strassen multiplication and a constant number of $n \times n$ auxiliary matrices,1,0,,0,n/a,0,n/a,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,13427649.61,74.47319739,0.135164559,180301774085957,5546.25713,0.2885985759,2.42103E+21,413047.502,0.4627714341,3,,,Numerical Analysis,FALSE
22,String Search,2,Single String Search,Single String Search,242,,,1,1,$O(mn)$,,,[https://iiif.library.cmu.edu/file/Newell_box00099_fld07561_doc0001/Newell_box00099_fld07561_doc0001.pdf Bitap algorithm (1964)],Bitap algorithm,1964,https://iiif.library.cmu.edu/file/Newell_box00099_fld07561_doc0001/Newell_box00099_fld07561_doc0001.pdf,,['Bálint Dömölki'],1,['An algorithm for syntactical analysis'],,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,20,"$m$: pattern length
$n$: text length",m+n,,,Word RAM,words,3,"n: 1,
m: 3,
m+n: 3",$O(m)$,Derived: Uses a bit array of size $O(m)$,1,0,,0,n/a,0,n/a,0,0,,0,0,https://en.wikipedia.org/wiki/Bitap_algorithm,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,2,Comparison Sorting,Comparison Sorting,4,,,1,1,$O(n \log n)$,uniform distribution over all possible permutations,(derive from lower + upper bounds),[https://link.springer.com/chapter/10.1007/978-1-349-08147-9_4 Tree sort (1986)],Tree sort,1986,https://link.springer.com/chapter/10.1007/978-1-349-08147-9_4,10.1007/978-1-349-08147-9_4,"['Keith McLuckie', 'Angus Barber']",2,['Binary Tree Sort'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: size of list,n,,,Word RAM,words,3,n: 3,$O(n)$,"Derived: Need some way to store the tree of elements, so we need $O(n)$ auxiliary space.",1,0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9965,100.3512293,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,2,Comparison Sorting,Comparison Sorting,6,,,1,1,$O(n \log n)$,uniform distribution over all possible permutations,https://academic.oup.com/comjnl/article/5/1/10/395338?login=true,[https://dl.acm.org/doi/10.1145/366622.366644 Quick Sort (1961)],Quick Sort,1961,https://dl.acm.org/doi/10.1145/366622.366644,,['C. A. R. Hoare'],1,['Algorithm 64: Quicksort'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: size of list,n,,,Word RAM,words,2,n: 2,$O(\log n)$,https://academic.oup.com/comjnl/article/5/1/10/395338?login=true,0,0,,0,,0,,0,0,,0,0,https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000000,1,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,2,Comparison Sorting,Comparison Sorting,9,,,1,1,$O(n \log n)$,uniform distribution over all possible permutations (implicit; reference says runtime is $O(n+n\log(\rho))$ where $\rho$ is number of runs but expected value of $\rho$ is $\Theta(n)$,https://drops.dagstuhl.de/opus/volltexte/2018/9467/,[- Tim Sort (2002)],Tim Sort,2002,-,,[],0,,,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: size of list,n,,,Word RAM,words,3,n: 3,$O(n)$,(can be easily derived),1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Timsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9965,100.3512293,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,1,Comparison Sorting,Comparison Sorting,10,,,1,1,$O(n \log n)$,,,[https://www.sciencedirect.com/science/article/pii/0196677492900166?via%3Dihub Cube Sort Parallel Implementation (1992)],Cube Sort Parallel Implementation,1992,https://www.sciencedirect.com/science/article/pii/0196677492900166?via%3Dihub,,"['Robert Cypher', 'Jorge L.C Sanz']",2,['Cubesort: A parallel algorithm for sorting Ndata items with S-sorters'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: size of list,n,,,Parallel RAM,words,3,n: 3,$O(n)$,(can be easily derived),1,0,,0,,0,,0,1,,0,0,https://en.wikipedia.org/wiki/Cubesort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9965,100.3512293,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,1,Comparison Sorting,Comparison Sorting,11,,,1,1,$O(n^2)$,<= potentially open?,,[https://dl.acm.org/citation.cfm?doid=368370.368387 Shell Sort (Shell) (1959)],Shell Sort (Shell),1959,https://dl.acm.org/citation.cfm?doid=368370.368387,,['D. L. Shell'],1,['A high-speed sorting procedure'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: size of list,n,,,Word RAM,words,1,n: 1,$O(1)$,in-situ sorting,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000000,1,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,1,Comparison Sorting,Comparison Sorting,12,,,1,1,$O(n^{1.5})$,<= I think this is an open problem to determine if there's a better average-case bound,,[https://dl.acm.org/citation.cfm?doid=366947.366957 Shell Sort (Frank & Lazarus) (1960)],Shell Sort (Frank & Lazarus),1960,https://dl.acm.org/citation.cfm?doid=366947.366957,,"['R. M. Frank', 'R. B. Lazarus']",2,['A high-speed sorting procedure'],,,,0,0,4.5,n: 4.5,$O(n^{1.5})$,16,$n$: size of list,n,,,Word RAM,words,1,n: 1,$O(1)$,in-situ sorting,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,None,,,,,,,31622,31.62355322,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,1,Comparison Sorting,Comparison Sorting,13,,,1,1,$O(n \log^2 n)$,<= I think this is an open problem to determine if there's a better average-case bound,,[https://apps.dtic.mil/sti/pdfs/AD0740110.pdf Shell Sort (Pratt) (1971)],Shell Sort (Pratt),1971,https://apps.dtic.mil/sti/pdfs/AD0740110.pdf,,['Vaughan R. Pratt'],1,['Shellsort and Sorting Networks'],,,,0,0,4.01,n: 4.01,$O(n \log^2 n)$,12,$n$: size of list,n,,,Word RAM,words,1,n: 1,$O(1)$,in-situ sorting,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,99301,10.07039204,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,1,Comparison Sorting,Comparison Sorting,14,,,1,1,$O(n^{1.33})$,<= I think this is an open problem to determine if there's a better average-case bound,,[https://www.sciencedirect.com/science/article/pii/0196677486900015?via%3Dihub Shell Sort (Sedgewick) (1986)],Shell Sort (Sedgewick),1986,https://www.sciencedirect.com/science/article/pii/0196677486900015?via%3Dihub,,['Robert Sedgewick'],1,['A new upper bound for Shellsort'],,,,0,0,4.33,n: 4.33,$O(n^{1.33})$,15.4,$n$: size of list,n,,,Word RAM,words,1,n: 1,$O(1)$,in-situ sorting,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shellsort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,9772,102.3331969,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,2,Comparison Sorting,Comparison Sorting,17,,,1,1,$O(\log^2 n)$,,,[https://epubs.siam.org/doi/abs/10.1137/0218014 Bitonic Merge Sort Parallel Implementation (1968)],Bitonic Merge Sort Parallel Implementation,1968,https://epubs.siam.org/doi/abs/10.1137/0218014,10.1137/0218014,"['Gianfranco Bilardi', 'Alexandru Nicolau']",2,['Adaptive Bitonic Sorting: An Optimal Parallel Algorithm for Shared-Memory Machines'],,,,0,0,2,n: 2,$O(\log^2 n)$,-,$n$: size of list,n,,,PRAC (shared-memory multiprocessor of the EREW PRAM variety),words,1,n: 1,$O(1)$,"Paper claims ""logspace uniform"", so with $O(\log n)$ words, this is constant # of words",0,1,,0,,0,,0,1,$n/\log(n)$,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,99,10101.0101,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,2,Non-comparison Sorting,Non-Comparison Sorting,22,,,1,1,$O(n \log \log n)$,,,[https://www.sciencedirect.com/science/article/pii/S0196677402912113 Thorup's Sorting Algorithm (2002)],Thorup's Sorting Algorithm,2002,https://www.sciencedirect.com/science/article/pii/S0196677402912113,,['Mikkel Thorup'],1,"['Randomized Sorting in O(n log log n) Time and Linear Space Using Addition, Shift, and Bit-wise Boolean Operations']",,,,0,0,4,n: 4,$O(n \log \log n)$,10.1,$n$: size of list,n,,,Word RAM,words,3,n: 3,$O(n)$,https://www.sciencedirect.com/science/article/pii/S0196677402912113,0,1,,1,,0,,0,0,0,0,0,,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,3316,301.5681544,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,2,Non-comparison Sorting,Non-Comparison Sorting,1500,,,1,1,$O(n^2)$,uniform distribution over all possible permutations?,can consider expected number of swaps per element,[- Insertion Sort (1940)],Insertion Sort,1940,-,,[],0,,1,1,,1,0,5,n: 5,$O(n^2)$,20,$n$: size of list,n,,,Word RAM,words,1,n: 1,$O(1)$,in-situ sorting,1,0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,NA,,,,,,,1000000,1,,1000000,1,,1000000000,1,,4,NA,NA,Combinatorics,FALSE
1,Sorting,2,Non-comparison Sorting,Non-Comparison Sorting,15,,,1,1,$O(n)$,uniform distribution over all sets of key values,(can be easily derived),[http://www.neubert.net/FSOIntro.html Flash Sort (1998)],Flash Sort,1998,http://www.neubert.net/FSOIntro.html,,['Karl-Dietrich Neubert'],1,['The FlashSort Algorithm'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: size of list,n,,,Word RAM,words,3,n: 3,$O(n)$,"http://www.neubert.net/FSOIntro.html, ""array of size # of different keys""",0,1,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000,1000,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,1,Non-comparison Sorting,Non-Comparison Sorting,18,,,1,1,$O(n)$,uniform distribution over all sets of positive key values,(can be easily derived),[https://web.archive.org/web/20170809110409/https://www.cs.auckland.ac.nz/~jaru003/research/publications/journals/beadsort.pdf Bead Sort (2002)],Bead Sort,2002,https://web.archive.org/web/20170809110409/https://www.cs.auckland.ac.nz/~jaru003/research/publications/journals/beadsort.pdf,,"['Joshua J. Arulanandham', 'Cristian S. Calude', 'Michael J. Dinneen']",3,['Bead-Sort: A Natural Sorting Algorithm'],,,,0,0,3,n: 3,$O(n)$,10,$n$: size of list,n,,,Word RAM,words,5,n: 5,$O(n^2)$,(wikipedia page?),0,0,,0,,0,,0,0,,0,0,,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000,1000,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,1,Non-comparison Sorting,Non-Comparison Sorting,20,,,1,1,$O(wn)$,Any distribution (runtime is same regardless of input)?,(same behavior across all inputs),[https://dl.acm.org/citation.cfm?doid=1005813.1041517 Burst Sort (2004)],Burst Sort,2004,https://dl.acm.org/citation.cfm?doid=1005813.1041517,,"['Ranjan Sinha', 'Justin Zobel']",2,['Cache-conscious sorting of large sets of strings with dynamic tries'],,,,0,0,4,"n: 4,
w: 3",$O(wn)$,11,"$n$: size of list
$w$: length of word",n,,,Word RAM,words,4,"n: 4,
w: 3",$O(wn)$,(wikipedia page?),0,0,,0,,0,,0,0,,0,0,-,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000,1000,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,1,Non-comparison Sorting,Non-Comparison Sorting,23,,,1,1,$O(n)$,"Lots of distributions (uniform, Gaussian, etc.)",https://www.semanticscholar.org/paper/The-Spreadsort-High-performance-General-case-Ross/41f5b49e9843b2d98b6b22a84924dae5761e6e52,[https://www.semanticscholar.org/paper/The-Spreadsort-High-performance-General-case-Ross/41f5b49e9843b2d98b6b22a84924dae5761e6e52 Spreadsort (2002)],Spreadsort,2002,https://www.semanticscholar.org/paper/The-Spreadsort-High-performance-General-case-Ross/41f5b49e9843b2d98b6b22a84924dae5761e6e52,,['Steven J. Ross'],1,['The Spreadsort High-performance General-case Sorting Algorithm'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: size of list,n,,,Word RAM,words,3,n: 3,$O(n)$?,(can be easily derived?),1,0,,0,,0,,0,0,0,0,0,"https://en.wikipedia.org/wiki/Spreadsort#cite_note-1

https://www.ijser.org/researchpaper/Evaluation-of-Sorting-Algorithms-Mathematical-and-Empirical-Analysis-of-sorting-Algorithms.pdf",A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000,1000,,,,,,,,4,,,Combinatorics,FALSE
2,kth Order Statistic,1,kth Order Statistic,kth Order Statistic,28,,,1,1,$O(n)$,input values are uniformly distributed over a given range? wikipedia claims expected $O(\sqrt{n})$,,[- Hashing (1940)],Hashing,1940,-,,[],0,,2,1,https://en.wikipedia.org/wiki/Selection_algorithm,1,5->6,3,n: 3,$O(n)$,10,$n$: size of list,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: size of hashtable,1,0,,0,,0,,0,0,,0,0,,the kth order statistic of a statistical sample is equal to its kth-smallest value.,1,n is the size of the array,,,,,,,,1000,9.965,8.965,1000000,19.931568,18.931568,1000000000,29.89735285,28.89735285,5,,,Combinatorics,FALSE
3,Matrix Chain Multiplication,2,MCOP,Matrix Chain Ordering Problem,31,,,1,1,$O(n \log n)$,Any distribution (runtime is same regardless of input),(same behavior across inputs),[https://doi.org/10.1137/0211028 T. C. Hu ; M. T. Shing (1982)],T. C. Hu ; M. T. Shing,1982,https://doi.org/10.1137/0211028,10.1137/0211028,"['T. C. Hu', 'M. T. Shing']",2,['Computation of Matrix Chain Products. Part I'],3,1,http://www.cs.ust.hk/mjg_lib/bibs/DPSu/DPSu.Files/0213017.pdf,1,3->5,4,n: 4,$O(n \log n)$,11,$n$: number of matrices,n,,,Word RAM,words,3,n: 3,$O(n)$,can be derived?,1,0,,0,,0,,0,0,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,9965,Inf,Inf,19931568,Inf,Inf,29897352854,Inf,Inf,1,,,Combinatorics,FALSE
4,Longest Common Subsequence,2,LCS,LCS,39,,,1,1,$O((n^2/k) \log n)$,Average case value of $p$ is $n^2/k$ where $k = |\Sigma|$,https://dl.acm.org/doi/10.1145/74697.74702,[https://dl.acm.org/doi/10.1145/359581.359603 Hunt and Szymanski (1977)],Hunt and Szymanski,1977,https://dl.acm.org/doi/10.1145/359581.359603,,"['James W. Hunt', 'Thomas G. Szymanski']",2,['A Fast Algorithm for Computing Longest Common Subsequences'],,,,1,-,3,"n: 4,
p: 3,
m+n: 3",$O((n + p) \log n)$,,"$n$: length of the longer input string
$m$: length of the shorter input string
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$k$: $|\Sigma|$",m+n,,,Word RAM,words,3,"n: 3,
p: 3,
m+n: 3",$O(p + n)$,https://cse.hkust.edu.hk/mjg_lib/bibs/DPSu/DPSu.Files/HuSz77.pdf,0,1,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,1000,9,1000000,99,1000000000,999,9965.784285,25.08583297,1.927360278,19931568.57,12542.91649,22.23447392,29897352854,8361944.324,201.9718253,4,,,Combinatorics,TRUE
4,Longest Common Subsequence,2,LCS,LCS,40,,,1,1,"1. $O(m + n)$

2. $O((m+ n) \log (m+ n))$","1. Finite alphabet

2. Infinite alphabet",https://www.sciencedirect.com/science/article/pii/0020025580900250,[https://www.sciencedirect.com/science/article/pii/0020025580900250 Mukhopadhyay (1980)],Mukhopadhyay,1980,https://www.sciencedirect.com/science/article/pii/0020025580900250,,['Amar Mukhopadhyay'],1,['A fast algorithm for the longest-common-subsequence problem'],,,,0,-,3,"n: 4,
p: 3,
m+n: 3",$O((n + p) \log n)$,,"$n$: length of the longer input string
$m$: length of the shorter input string
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$k$: $|\Sigma|$",m+n,,,Word RAM,words,3,"n: 3,
p: 3,
m+n: 3",$O(p + n)$,https://www.sciencedirect.com/science/article/pii/0020025580900250,0,1,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,NA,NA,,,,,,,,4,,,Combinatorics,TRUE
5,Maximum Flow,1,Max Flow,,53,,,1,1,$O(V^2EU)$,<= possibly open if there's a better bound? i.e. for Erdos-Renyi with uniform edge weights,,[https://web.eecs.umich.edu/~pettie/matching/Dantzig-using-simplex-for-transportation-Cowles-Monograph.pdf Dantzig (1951)],Dantzig,1951,https://web.eecs.umich.edu/~pettie/matching/Dantzig-using-simplex-for-transportation-Cowles-Monograph.pdf,,['George Dantzig'],1,['Application of the Simplex Method to a Transportation Problem'],,,,1,0,7,"V: 7,
E: 3,
U: 3",$O(V^2EU)$,988.2,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,,,Word RAM,words,6,"V: 6,
E: 3",$O(VE)$?,"Assuming this is referring to translating maximum flow into linear programming and using the simplex algorithm, this requires $O(VE)$ space.",1,0,,0,,0,,0,0,,0,0,https://www.cs.princeton.edu/~wayne/cs423/lectures/max-flow,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",1666666.667,,1666666666667,,1.66667E+18,,7877875424,1,,7.87788E+21,1,,7.87788E+33,1,,2,,,Combinatorics,FALSE
5,Maximum Flow,1,Max Flow,,57,,,1,1,$O(VE \log U)$,^ see above,,[https://cir.nii.ac.jp/crid/1573950400344304384 Dinitz (with dynamic trees) (1973)],Dinitz (with dynamic trees),1973,https://cir.nii.ac.jp/crid/1573950400344304384,,['Yefim Dinitz'],1,['Excess scaling and transportation problems'],,,,0,0,6,"V: 6,
E: 3,
U: 2",$O(VE \log U)$,20,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,https://dl.acm.org/doi/10.1145/290179.290181,0,Word RAM,words,5,"V: 5,
E: 3",$O(E)$,"The dynamic tree should take $O(E)$ extra space, and that should be the only extra space (if any) compared to Dinitz's original algorithm. Thus, this requires $O(E)$ space.",1,0,,0,,0,,0,0,,0,0,https://www.cs.princeton.edu/~wayne/cs423/lectures/max-flow,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,762183.964,10335.92387,0.5221954617,1646721030716,4783976929,1.754167902,2.53126E+18,3.11224E+15,4.060932865,2,,,Combinatorics,FALSE
5,Maximum Flow,2,Max Flow,,59,,,1,1,$O(V^2E^{0.5})$,^ see above,,[https://www.scirp.org/reference/referencespapers?referenceid=1690546 Cherkassky (1977)],Cherkassky,1977,https://www.scirp.org/reference/referencespapers?referenceid=1690546,,['R.V. Cherkassky'],1,['An Algorithm for Constructing Maximal Flows in Networks with Complexity of $O(V^2 \sqrt{E})$ Operations'],,,,0,0,6,"V: 6,
E: 2.5",$O(V^2E^{0.5})$,16,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",$O(E)$,https://core.ac.uk/download/pdf/81946904.pdf,0,0,,0,,0,,0,0,,0,0,https://www.jstor.org/stable/pdf/171020.pdf,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,1044405,7542.931549,,,,,,,,2,,,Combinatorics,FALSE
5,Maximum Flow,1,Max Flow,,61,,,1,1,$O(VE \log V)$,^ see above,,[https://www.sciencedirect.com/science/article/pii/0022000083900065 Sleator & Tarjan (1983)],Sleator & Tarjan,1983,https://www.sciencedirect.com/science/article/pii/0022000083900065,,"['Daniel D. Sleator', 'Robert Endre Tarjan']",2,['A data structure for dynamic trees'],,,,0,0,6.01,"V: 6.01,
E: 3",$O(VE \log V)$,16.1,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",$O(E)$,can be derived?,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,761538,10344.69117,,,,,,,,2,,,Combinatorics,FALSE
5,Maximum Flow,1,Max Flow,,62,,,1,1,$O(VE \log (V^2/E))$,^ see above,,[https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/a%20new%20approach.pdf Goldberg & Tarjan (1986)],Goldberg & Tarjan,1986,https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/a%20new%20approach.pdf,,"['Andrew V. Goldberg', 'Robert E. Tarjan']",2,['A New Approach to the Maximum-Flow Problem'],,,,0,0,6,"V: 6,
E: 3",$O(VE \log (V^2/E))$,16,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3",$O(E)$,can be derived? also hints of space complexity might be in the paper,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,753550,10454.34998,,,,,,,,2,,,Combinatorics,FALSE
5,Maximum Flow,1,Max Flow,,63,,,1,1,$O(VE + V^2 \log U)$,^ see above,,[https://www.researchgate.net/publication/38008130_A_Fast_and_Simple_Algorithm_for_the_Maximum_Flow_Problem Ahuja & Orlin (1987)],Ahuja & Orlin,1987,https://www.researchgate.net/publication/38008130_A_Fast_and_Simple_Algorithm_for_the_Maximum_Flow_Problem,,"['Ravindra K. Ahuja', 'James B. Orlin']",2,['A Fast and Simple Algorithm for the Maximum Flow Problem'],,,,0,0,6,"V: 6,
E: 3,
U: 2",$O(VE + V^2 \log U)$,16,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,,,Word RAM,words,5,"V: 5,
E: 3,
U: 2",$O(E \log U)$,derived in sheet,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,545676,14436.91023,,,,,,,,2,,,Combinatorics,FALSE
5,Maximum Flow,2,Max Flow,st-Maximum Flow,65,Push-relabel method,,1,1,$O(VE + V^2(\log V)^2)$,[some distribution in this paper],https://ieeexplore.ieee.org/document/63465,[https://ieeexplore.ieee.org/document/63465 Cheriyan & Hagerup (1989)],Cheriyan & Hagerup,1989,https://ieeexplore.ieee.org/document/63465,,"['J. Cheriyan', 'T. Hagerup']",2,['A randomized maximum-flow algorithm'],,,,0,0,6.01,"V: 6.01,
E: 3",$O(VE \log V)$,16.1,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,https://ieeexplore.ieee.org/document/63465,0,Word RAM,words,5,"V: 5,
E: 3",$O(V + E)$,Derived: $d_{heap}$ and $e_{heap}$ are size $O(V)$. Adjacency list of a given vertex is $O(V)$. Dynamic trees data structure is size $O(E)$.,1,0,,1,Las Vegas,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,3362046,2343.178952,,,,,,,,2,,,Combinatorics,FALSE
5,Maximum Flow,2,Max Flow,st-Maximum Flow,66,Derandomization of Cheriyan & Hagerup,,1,1,$O(V^3 / \log V)$,see 233,,[https://link.springer.com/chapter/10.1007/BFb0032035 Cheriyan et al. (1990)],Cheriyan et al.,1990,https://link.springer.com/chapter/10.1007/BFb0032035,10.1007/BFb0032035,"['Joseph Cheriyan', 'Torben Hagerup', 'Kurt Mehlhorn']",3,['Can a maximum flow be computed in o(nm) time?'],,,,0,0,5.99,V: 5.99,$O(V^3 / \log V)$,15.95,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,https://link.springer.com/chapter/10.1007/BFb0032035,0,Uniform-Cost RAM (is this the same as Word RAM?),words,5,"V: 5,
E: 3",$O(V + E)$,Derived: essentially the same as [CH89] above but derandomized,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,1567523,5025.684104,,,,,,,,2,,,Combinatorics,FALSE
5,Maximum Flow,2,Max Flow,st-Maximum Flow,67,Derandomization of Cheriyan & Hagerup,,1,1,$O(VE + V^{2.66} \log V)$,^ see 233,,[https://www.sciencedirect.com/science/article/pii/002001909090024R Alon (1990)],Alon,1990,https://www.sciencedirect.com/science/article/pii/002001909090024R,,['Noga Alon'],1,['Generating pseudo-random permutations and maximum flow algorithms'],,,,0,0,6,"V: 6,
E: 3",$O(VE + V^{2.66} \log V)$,16,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=139438,0,Word RAM,words,5,"V: 5,
E: 3",$O(V + E)$,Derived: essentially the same as [CH89] above but derandomized,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,15237244,517.0144564,0.1737537478,3.28759E+15,2396247.828,0.4573965487,4.8957E+23,16091415411,0.8268695823,2,,,Combinatorics,FALSE
5,Maximum Flow,2,Max Flow,st-Maximum Flow,68,Derandomization of Cheriyan & Hagerup,,1,1,$O(VE + V^{2+\epsilon})$,^ see 233,,[https://dl.acm.org/citation.cfm?id=139438 King et al. (KRT) (1992)],King et al. (KRT),1992,https://dl.acm.org/citation.cfm?id=139438,,"['V. King', 'S. Rao', 'R. Tarjan']",3,['A faster deterministic maximum flow algorithm'],,,,0,0,6,"V: 6,
E: 3",$O(VE + V^{2+\epsilon})$,16,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity
$\epsilon$: any positive real number",V,https://dl.acm.org/citation.cfm?id=139438,0,Word RAM,words,5,"V: 5,
E: 3",$O(V + E)$,Derived: essentially the same as [CH89] above but derandomized,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,142011,55473.69869,,,,,,,,2,,,Combinatorics,FALSE
5,Maximum Flow,2,Max Flow,st-Maximum Flow,69,Derandomization of Cheriyan & Hagerup,,1,1,$O(VE(\log(V)/\log(V/E) + (\log V)^2))$,^ see 233,,[https://dl.acm.org/citation.cfm?id=167201 Phillips & Westbrook (1993)],Phillips & Westbrook,1993,https://dl.acm.org/citation.cfm?id=167201,,"['Steven Phillips', 'Jeffery Westbrook']",2,['Online load balancing and network flow'],,,,1,0,6,"V: 6,
E: 3",$O(VE(\log(V)/\log(V/E) + (\log V)^2))$,16,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,https://dl.acm.org/doi/10.1145/290179.290181,0,Word RAM,words,5,"V: 5,
E: 3",$O(V + E)$,Derived: essentially the same as [CH89] above but derandomized,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,4524418.767,0.0002210228653,,26027057526546,0,,6.51599E+19,0,,2,,,Combinatorics,FALSE
5,Maximum Flow,2,Max Flow,Integer Maximum Flow,71,Finding blocking flows,,1,1,$O(E^{1.5} \log(V^2/E) \log U)$,^ see 233,,[https://dl.acm.org/citation.cfm?id=290181 Goldberg & Rao (1997)],Goldberg & Rao,1997,https://dl.acm.org/citation.cfm?id=290181,,"['Andrew V. Goldberg', 'Satish Rao']",2,['Beyond the flow decomposition barrier'],,,,1,3->4,6,"V: 6,
E: 4.5,
U: 2",$O(E^{1.5} \log(V^2/E) \log U)$,20,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=290181,0,Word RAM,words,5,"V: 5,
E: 3",$O(V + E)$,Derived: creates and updates an auxiliary graph,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,460753.7601,16.40695149,,75582472025,0,,5.81778E+15,0,,2,,,Combinatorics,FALSE
5,Maximum Flow,2,Max Flow,Integer Maximum Flow,72,Finding blocking flows,,1,1,$O(V^{0.66}E \log(V^2/E) \log U)$,^ see 233,,[https://dl.acm.org/citation.cfm?id=290181 Goldberg & Rao (1997)],Goldberg & Rao,1997,https://dl.acm.org/citation.cfm?id=290181,,"['Andrew V. Goldberg', 'Satish Rao']",2,['Beyond the flow decomposition barrier'],,,,0,0,5.66,"V: 5.66,
E: 3,
U: 2",$O(V^{0.66}E \log(V^2/E) \log U)$,16.9,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=290181,0,Word RAM,words,5,"V: 5,
E: 3",$O(V + E)$,Derived: creates and updates an auxiliary graph,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,851225,9254.751005,,,,,,,,2,,,Combinatorics,FALSE
5,Maximum Flow,2,Max Flow,st-Maximum Flow,73,Improvement of the KRT algorithm,,1,1,$O(VE)$,^ see 233,,[https://dl.acm.org/citation.cfm?id=2488705 James B Orlin's + KRT (King; Rao; Tarjan)'s algorithm (2013)],James B Orlin's + KRT (King; Rao; Tarjan)'s algorithm,2013,https://dl.acm.org/citation.cfm?id=2488705,,['James B. Orlin'],1,"['Max flows in O(nm) time, or better']",,,,1,0,6,"V: 6,
E: 3",$O(VE)$,16,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,https://dl.acm.org/citation.cfm?id=2488705,0,Word RAM,words,5,"V: 5,
E: 3",$O(V + E)$,Derived: creates and updates an auxiliary graph,1,0,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,88757,88757.7929,0.2017379668,88757396440,88757396408,0.5017026406,8.87574E+16,8.87574E+16,0.8765413472,2,,,Combinatorics,FALSE
7,Graph Coloring,1,,3-Graph Coloring,86,,,1,1,$O(mn 3^{n/3}) ~ O(mn(1.445)^n)$,,,[https://www.sciencedirect.com/science/article/pii/002001907690065X?via%3Dihub Lawler (1976)],Lawler,1976,https://www.sciencedirect.com/science/article/pii/002001907690065X?via%3Dihub,,['E.L. Lawler'],1,['A note on the complexity of the chromatic number problem'],,,,1,0,8,"n: 8,
m: 3",$O(mn 3^{n/3}) ~ O(mn(1.445)^n)$,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,3,"n: 3,
m: 1",$O(n)$,(can be easily derived; see section 6 of ref),1,0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
7,Graph Coloring,1,,3-Graph Coloring,87,,,1,1,$O(1.415^n)$,,,[https://link.springer.com/chapter/10.1007/3-540-57899-4_51 Schiermeyer (1994)],Schiermeyer,1994,https://link.springer.com/chapter/10.1007/3-540-57899-4_51,10.1007/3-540-57899-4_51,['Ingo Schiermeyer'],1,['Deciding 3-colourability in less than $O(1.415^n)$ steps'],,,,0,0,8,n: 8,$O(1.415^n)$,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,6,"n: 6,
m: 3","$O(nm+n^2)$ loose bound, possibly $O(n+m)$?",(can be derived from steps of algorithm),1,0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,Inf,1,,,,,,,,1,,,Combinatorics,TRUE
7,Graph Coloring,1,,3-Graph Coloring,88,,,1,1,$O(1.3446^n)$,(unclear if there is a notable distribution where average runtime is faster),(none),[https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=492575 Beigel & Eppstein (1995)],Beigel & Eppstein,1995,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=492575,,"['Richard Beigel', 'David Eppstein']",2,['3-Coloring in time $O(1.3446^n)$: a no-MIS algorithm'],,,,0,0,8,n: 8,$O(1.3446^n)$,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$?,"can be derived from steps of algorithm? you add at most $O(n^2)$ constraints, other info shouldn't take more than $O(n^2)$ space, and you can reuse space during recursive steps",1,0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,Inf,1,,,,,,,,1,,,Combinatorics,TRUE
7,Graph Coloring,1,,3-Graph Coloring,89,,,1,1,$O(1.3289^n)$,^see above,(none),[https://www.sciencedirect.com/science/article/pii/S0196677404001117?via%3Dihub Beigel & Eppstein (2000)],Beigel & Eppstein,2000,https://www.sciencedirect.com/science/article/pii/S0196677404001117?via%3Dihub,,"['Richard Beigel', 'David Eppstein']",2,['3-coloring in time $O(1.3289^n)$'],,,,0,0,8,n: 8,$O(1.3289^n)$,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$?,can be derived from steps of algorithm? similar to above,1,0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,Inf,1,,,,,,,,1,,,Combinatorics,TRUE
8,Graph Coloring,1,,4-Graph Coloring,99,,,1,1,$O((m+n)2^n)$,,,[https://www.sciencedirect.com/science/article/pii/002001907690065X?via%3Dihub Lawler (1976)],Lawler,1976,https://www.sciencedirect.com/science/article/pii/002001907690065X?via%3Dihub,,['E.L. Lawler'],1,['A note on the complexity of the chromatic number problem'],,,,1,0,8,"n: 8,
m: 3",$O((m+n)2^n)$,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,3,"n: 3,
m: 1",$O(n)$,(can be easily derived; see section 6 of ref),1,0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
8,Graph Coloring,1,,4-Graph Coloring,100,,,1,1,$O(1.7504^n)$,,,[https://www.sciencedirect.com/science/article/abs/pii/S0167637704000409 Byskov (2004)],Byskov,2004,https://www.sciencedirect.com/science/article/abs/pii/S0167637704000409,,['Jesper Makholm Byskov'],1,['Enumerating maximal independent sets with applications to graph colouring'],,,,0,0,8,n: 8,$O(1.7504^n)$,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$?,can be derived from algo 89 plus the paper's algo for finding MIS's?,1,0,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,Inf,1,,,,,,,,1,,,Combinatorics,TRUE
9,Linear System,2,,Positive Definite Matrix,104,,,1,0,$O(mk^{0.5})$,^see above (positive definite),^see above,[https://nvlpubs.nist.gov/nistpubs/jres/049/jresv49n6p409_A1b.pdf Conjugate Gradient (1952)],Conjugate Gradient,1952,https://nvlpubs.nist.gov/nistpubs/jres/049/jresv49n6p409_A1b.pdf,,"['Magnus R. Hestenes', 'Eduard Stiefel']",2,['Methods of Conjugate Gradients for Solving Linear Systems'],1,1,https://en.wikipedia.org/wiki/Conjugate_gradient_method,1,3->4,3,"m: 3,
k: 2.5,
n^2: 3",$O(m k^{0.5})$,,"$n$: number of variables and number of equations
$m$: number of nonzero entries in matrix
$k$: ratio between largest and smallest eigenvalues",n^2,,,Word RAM,words,3,"m: 3,
n: 5,
n^2: 3",$O(m)$,http://www.cs.cmu.edu/~quake-papers/painless-conjugate-gradient.pdf,0,0,,0,,1,,0,0,,0,0,http://www.cs.cmu.edu/~quake-papers/painless-conjugate-gradient.pdf,"a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,6076,6077.359612,1.066852945,192450089.7,192450089.7,3.901848033,6085806194502,6085806194502,10.62411354,3,,,Numerical Analysis,FALSE
9,Linear System,2,,Sparse Linear System,109,Quantum algorithm,,1,1,$O(k^2 \log n)$,,,[https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.103.150502 Harrow (Quantum) (2009)],Harrow (Quantum),2009,https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.103.150502,10.1103/PhysRevLett.103.150502,"['Aram W. Harrow', 'Avinatan Hassidim', 'Seth Lloyd']",3,['Quantum Algorithm for Linear Systems of Equations'],,,,0,0,2,"k: 5,
n: 2,
n^2: 2",$O(k^2 \log n)$,1,"$n$: number of variables and number of equations
$m$: number of nonzero entries in matrix
$k$: ratio between largest and smallest eigenvalues",n^2,,,Quantum Computer,qubits,2,"n: 2,
n^2: 2",$O(\log n)$,https://arxiv.org/pdf/0811.3171.pdf,0,1,,0,,0,,0,0,,1,0,"https://en.wikipedia.org/wiki/Quantum_algorithm_for_linear_systems_of_equations

https://arxiv.org/pdf/0811.3171.pdf","a system of linear equations (or linear system) is a collection of one or
 more linear equations involving the same set of variables.",,,"n:m:k
1:1:1",,,,,,,8.37,4411712.903,,,,,,,,3,,,Numerical Analysis,FALSE
10,Linear Programming,1,General Linear Programming,,112,,,1,1,$O(n^{3.5} L^2 \log L \log \log L)$,,,[https://web.archive.org/web/20131228145520/http://retis.sssup.it/~bini/teaching/optim2010/karmarkar.pdf Karmarkar's algorithm (1984)],Karmarkar's algorithm,1984,https://web.archive.org/web/20131228145520/http://retis.sssup.it/~bini/teaching/optim2010/karmarkar.pdf,,['N. Karmarkar'],1,['A NEW POLYNOMIAL-TIME ALGORITHM FOR LINEAR PROGRAMMING'],,,,1,0,6.5,"n: 6.5,
L: 5.02",$O(n^{3.5} L^2 \log L \log \log L)$,,"$n$: number of variables
$m$: number of constraints
$L$: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3,
L: 3",$O(nmL)$,can be derived from paper?,1,0,,0,,0,,0,0,,0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,389062121651,Inf,,1.23032E+22,Inf,,3.89062E+32,Inf,,1,,,Numerical Analysis,FALSE
10,Linear Programming,1,General Linear Programming,,113,,,1,1,"$O(2^n \text{poly}(n, m))$? (previously $O(2^n)$)",,,[- Simplex Algorithm (1947)],Simplex Algorithm,1947,-,,[],0,,,,,0,0,8,"n: 8,
m: 7","$O(2^n \text{poly}(n, m))$",,"$n$: number of variables
$m$: number of constraints
$L$: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3",$O(nm)$,can be easily derived?,1,0,,0,,0,,0,0,,0,0,http://www-leland.stanford.edu/group/SOL/reports/OR-80-27.pdf,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",333333.3333,Inf,333333333333,Inf,3.33333E+17,Inf,Inf,1,,,,,,,,1,,,Numerical Analysis,FALSE
10,Linear Programming,1,General Linear Programming,,114,,,1,1,"$O(2^n \text{poly}(n, m))$? (previously $O(2^n)$)",,,[- Terlaky's Criss-cross algorithm (1985)],Terlaky's Criss-cross algorithm,1985,-,,[],0,,,,,0,0,8,"n: 8,
m: 7","$O(2^n \text{poly}(n, m))$",,"$n$: number of variables
$m$: number of constraints
$L$: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3",$O(nm)$,can be easily derived?,1,0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1007/BF01585729.pdf,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,Inf,1,,,,,,,,1,,,Numerical Analysis,FALSE
10,Linear Programming,0.001,General Linear Programming,,115,,,1,1,? (originally $O(n^{3.5} L)$ but seems unclear),,,[- Affine scaling (1967)],Affine scaling,1967,-,,[],0,,,,,0,0,6.5,"n: 6.5,
L: 3",? (originally $O(n^{3.5} L)$ but seems unclear),,"$n$: number of variables
$m$: number of constraints
$L$: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 5",$O(nm+m^2)$?,can be easily derived?,1,0,,0,,0,,0,0,,0,0,https://pdfs.semanticscholar.org/c23c/43d781da35b8314489d83ee8f3b5490541ea.pdf,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,316227766017,Inf,Inf,,,Inf,,,Inf,1,,,Numerical Analysis,FALSE
10,Linear Programming,1,General Linear Programming,,116,,,1,1,"$O(n^{\max(\omega, 2.5-\alpha/2, 13/6)} \text{polylog}(n, m, L))$;
currently $O(n^{2.37285956})$",,,[https://arxiv.org/abs/1810.07896 Cohen; Lee and Song (2018)],Cohen; Lee and Song,2018,https://arxiv.org/abs/1810.07896,,"['Michael B. Cohen', 'Yin Tat Lee', 'Zhao Song']",3,['Solving Linear Programs in the Current Matrix Multiplication Time'],1,1,https://arxiv.org/abs/1810.07896,1,2->3,6,n: 6,"$O(n^{\max(\omega, 2.5-\alpha/2, 13/6)} \text{polylog}(n, m, L))$;
currently $O(n^{2.37285956})$",,"$n$: number of variables
$m$: number of constraints
$L$: length of input, in bits
$\omega$: matrix multiplication constant
$\alpha$: dual exponent of matrix multiplication",n,,,Word RAM,words,5,"n: 5,
m: 3",$O(nm+n^2)$?,"Not entirely sure about this, but it seems like each iteration manipulates a constant number of $O(m+n)\times O(n)$ matrices, along with a constant number of vectors of size $O(m+n)$, all of whose elements are of size $O(1)$ words.",1,0,,0,,0,,0,0,,0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,12971792,Inf,,168267406107047,Inf,,2.18273E+21,Inf,,1,,,Numerical Analysis,FALSE
10,Linear Programming,1,General Linear Programming,,117,,,1,1,$O((nnz(A) + n^2) n^{0.5})$,,,[https://arxiv.org/abs/1503.01752 Lee and Sidford (2015)],Lee and Sidford,2015,https://arxiv.org/abs/1503.01752,,"['Yin Tat Lee, Aaron Sidford']",2,['Efficient Inverse Maintenance and Faster Algorithms for Linear Programming'],,,,0,0,5.5,n: 5.5,$O((nnz(A) + n^2) n^{0.5})$,,"$n$: number of variables
$m$: number of constraints
$L$: length of input, in bits",n,,,Word RAM,words,5,"n: 5,
m: 3",$O(nm+n^2)$??,Same reasoning as ^,1,0,,0,,0,,0,0,,0,0,,Linear programming (LP; also called linear optimization) is a method to achieve the best outcome (such as maximum profit or lowest cost) in a mathematical model whose requirements are represented by linear relationships. Linear programming is a special case of mathematical programming (also known as mathematical optimization).,,,"L = 10
nnz(A) = n",,,,,,,31654399,Inf,Inf,,,Inf,,,Inf,1,,,Numerical Analysis,FALSE
11,Line segment intersection,1,Reporting intersection points,"Reporting all intersection points, line segments",120,,,1,1,$O(n \log n + k)$,,,[https://dl.acm.org/doi/10.1145/147508.147511 Chazelle & Edelsbrunner (1992)],Chazelle & Edelsbrunner,1992,https://dl.acm.org/doi/10.1145/147508.147511,10.1145/147508.147511,"['Bernard Chazelle', 'Herbert Edelsbrunner']",2,['An optimal algorithm for intersecting line segments in the plane'],,,,0,0,4,"n: 4,
k: 3",$O(n \log n + k)$,20,"$n$: number of line segments
$k$: number of points of intersection",n,,,Real RAM,words,3,"n: 3,
k: 3",$O(n+k)$?,https://dl.acm.org/doi/10.1145/147508.147511,0,1,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,9996,100.040016,,,,,,,,4,,,Image Processing,FALSE
11,Line segment intersection,1,Reporting intersection points,"Reporting all intersection points, line segments",121,,,1,1,$O(n\log^2(n)/(\log \log n) + k)$,,,[https://www.sciencedirect.com/science/article/pii/0022000086900255 CHAZELLE (1986)],CHAZELLE,1986,https://www.sciencedirect.com/science/article/pii/0022000086900255,,['Bernard Chazelle'],1,['Reporting and counting segment intersections'],,,,0,0,4,"n: 4,
k: 3",$O(n\log^2(n)/(\log \log n) + k)$,20,"$n$: number of line segments
$k$: number of points of intersection",n,,,Real RAM,words,3,"n: 3,
k: 3",$O(n+k)$?,https://www.sciencedirect.com/science/article/pii/0022000086900255,0,1,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,3336.9,299.6793431,,,,,,,,4,,,Image Processing,FALSE
11,Line segment intersection,1,,"Reporting all intersection points, convex polygons",122,,,1,1,$O(n \log n + k)$,,,[https://pdfs.semanticscholar.org/a571/cc92218132a1b0e65c2adbf663c79d015737.pdf NIEVERGELT. J.. AND PREPARATA (Section 3) (1982)],NIEVERGELT. J.. AND PREPARATA (Section 3),1982,https://pdfs.semanticscholar.org/a571/cc92218132a1b0e65c2adbf663c79d015737.pdf,,"['J. Nievergelt', 'F P Preparata']",2,['Programming Techniques and Data Structures'],3,1,https://dl.acm.org/doi/pdf/10.1145/358656.358681,1,0,4,"n: 4,
k: 3",$O(n \log n + k)$,,"$n$: number of line segments
$k$: number of points of intersection",n,,,Real RAM,words,3,"n: 3,
k: 1",$O(n)$,https://courses.cs.duke.edu/cps234/spring04/papers/NP82.pdf,0,0,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,9996,100.040016,,19932568,8441832.789,,29897384477,73007386768,,4,,,Image Processing,FALSE
11,Line segment intersection,1,Reporting intersection points,"Reporting all intersection points, generalized segments",123,,,1,1,$O((n+k) \log n)$,,,"[https://epubs.siam.org/doi/abs/10.1137/S0097539797329373 Jean-Daniel Boissonnat and Franco P.
Preparata.  (1997)]","Jean-Daniel Boissonnat and Franco P.
Preparata. ",1997,https://epubs.siam.org/doi/abs/10.1137/S0097539797329373,10.1137/S0097539797329373,"['Jean-Daniel Boissonnat', 'Franco P. Preparata']",2,['Robust Plane Sweep for Intersecting Segments'],,,,0,0,4,"n: 4,
k: 3",$O((n+k) \log n)$,21,"$n$: number of line segments
$k$: number of points of intersection",n,,,"Real RAM, under more restrictions/considerations? (predicate arithmetic, exact arithmetic)",words,3,"n: 3,
k: 1",$O(n)$,https://epubs.siam.org/doi/epdf/10.1137/S0097539797329373,0,1,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,10280,97.27626459,,,,,,,,4,,,Image Processing,FALSE
11,Line segment intersection,1,Reporting intersection points,"Reporting all intersection points, generalized segments",124,,,1,1,$O(n \log n + k)$,,,[https://dl.acm.org/doi/pdf/10.1145/220279.220302 Balaban. (1995)],Balaban.,1995,https://dl.acm.org/doi/pdf/10.1145/220279.220302,10.1145/220279.220302,['Ivan J. Balaban'],1,['An optimal algorithm for finding segments intersections'],,,,0,0,4,"n: 4,
k: 3",$O(n \log n + k)$,20,"$n$: number of line segments
$k$: number of points of intersection",n,,,Real RAM,words,3,"n: 3,
k: 1",$O(n)$,https://dl.acm.org/doi/pdf/10.1145/220279.220302,0,1,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,9996,100.040016,,,,,,,,4,,,Image Processing,FALSE
11,Line segment intersection,1,Reporting intersection points,"Reporting all intersection points, generalized segments",125,,,1,1,$O(n \log n + k)$,,,[https://dl.acm.org/citation.cfm?id=304991 Boissonnat; Snoeyink (1999)],Boissonnat; Snoeyink,1999,https://dl.acm.org/citation.cfm?id=304991,,"['Jean-Daniel Boissonnat', 'Jack Snoeyink']",2,['Efficient algorithms for line and curve segment intersection using restricted predicates'],,,,0,0,4,"n: 4,
k: 3",$O(n \log n + k)$,20,"$n$: number of line segments
$k$: number of points of intersection",n,,,"Real RAM, under more restrictions/considerations? (predicate arithmetic)",words,3,"n: 3,
k: 1",$O(n)$,https://dl.acm.org/citation.cfm?id=304991,0,1,,0,,0,,0,0,,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,9996,100.040016,,,,,,,,4,,,Image Processing,FALSE
11,Line segment intersection,1,Reporting intersection points,"Reporting all intersection points, line segments",126,,,1,1,$O(\log^2(n))$,,,[https://dl.acm.org/citation.cfm?id=72950 Goodrich (1989)],Goodrich,1989,https://dl.acm.org/citation.cfm?id=72950,,['M. T. Goodrich'],1,['Intersecting line segments in parallel with an output-sensitive number of processors'],,,,0,0,2,n: 2,$O(\log^2(n))$,,"$n$: number of line segments
$k$: number of points of intersection",n,,,CREW PRAM,words,3,"n: 3,
k: 3",$O(n+k)$?,"Seems to require creating/storing an $O(n)$-sized data structure (""segment tree""), and then computing the $O(k)$ intersections using the data structure",1,0,,0,,0,,0,1,$O(n + k/\log n)$,0,0,,"The line segment intersection problem supplies a list of line segments in the Euclidean plane and asks about the points where they intersect (cross), if any.",,,,,,,,,,99.3,10070.49345,,,,,,,,4,,,Image Processing,FALSE
12,Convex Hull,1,2-dimensional Convex Hull,2-dimensional,129,,,1,1,$O(n \log n)$,Any distribution (runtime is same regardless of input),https://link.springer.com/chapter/10.1007/978-1-4612-1098-6_3,[https://www.sciencedirect.com/science/article/pii/0020019072900452?via%3Dihub Graham (1972)],Graham,1972,https://www.sciencedirect.com/science/article/pii/0020019072900452?via%3Dihub,,['R.L. Graham'],1,['An efficient algorith for determining the convex hull of a finite planar set'],,,,1,3->5,4,n: 4,$O(n \log n)$,11,"$n$: number of line segments
$h$: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,$O(n)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965,100351.2293,0.3651371615,19931568.57,50171665944,0.9462632475,29897352854,3.34478E+16,1.796433658,3,,,Image Processing,FALSE
12,Convex Hull,1,2-dimensional Convex Hull,2-dimensional,130,,,1,1,$O(nh)$,(pseudorandom sampling; experimental),https://dl.acm.org/citation.cfm?id=355766,[https://dl.acm.org/citation.cfm?id=355766 W. Eddy Quickhull (1977)],W. Eddy Quickhull,1977,https://dl.acm.org/citation.cfm?id=355766,,['William F. Eddy'],1,['A New Convex Hull Algorithm for Planar Sets'],,,,0,0,5,"n: 5,
h: 3",$O(nh)$,20,"$n$: number of line segments
$h$: number of points on the convex hull",n,,,Real RAM,words,3,"n: 3,
h: 3",$O(h)$?,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965,100351.2293,,,,,,,,3,,,Image Processing,FALSE
12,Convex Hull,1,3-dimensional Convex Hull,2-dimensional; 3-dimensional,131,,,1,1,$O(n \log n)$,,,[https://dl.acm.org/citation.cfm?id=359430 Preparata and Hong (1977)],Preparata and Hong,1977,https://dl.acm.org/citation.cfm?id=359430,,"['F. P. Preparata', 'S. J. Hong']",2,['Convex hulls of finite sets of points in two and three dimensions'],,,,0,0,4,n: 4,$O(n \log n)$,11,"$n$: number of line segments
$h$: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,$O(n)$?,Divide and conquer can be done in linear space total as space can be reused after conquer steps,1,0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965,100351.2293,,,,,,,,3,,,Image Processing,FALSE
12,Convex Hull,1,2-dimensional Convex Hull,2-dimensional,132,,,1,1,$O(n \log n)$,,,[https://www.sciencedirect.com/science/article/pii/0020019079900723 Andrew's algorithm (1979)],Andrew's algorithm,1979,https://www.sciencedirect.com/science/article/pii/0020019079900723,,['A.M. Andrew'],1,['Another efficient algorithm for convex hulls in two dimensions'],,,,0,0,4,n: 4,$O(n \log n)$,11,"$n$: number of line segments
$h$: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,$O(n)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965,100351.2293,,,,,,,,3,,,Image Processing,FALSE
12,Convex Hull,1,2-dimensional Convex Hull,2-dimensional,134,,,1,1,$O(n \log h)$,,,[https://ecommons.cornell.edu/handle/1813/6417 The ultimate planar convex hull algorithm (1986)],The ultimate planar convex hull algorithm,1986,https://ecommons.cornell.edu/handle/1813/6417,,"['David G. Kirkpatrick', 'Raimund Seidel']",2,['The Ultimate Planar Convex Hull Algorithm?'],2,1,https://www.cs.princeton.edu/~chazelle/temp/451/451-2019/KirkSeidel.pdf,1,0,4,"n: 4,
h: 2",$O(n \log h)$,11,"$n$: number of line segments
$h$: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,$O(n)$,https://ecommons.cornell.edu/handle/1813/6417,0,1,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,4982.892142,2.006063891,,9965784.285,0,,14948676427,0,,3,,,Image Processing,FALSE
12,Convex Hull,1,3-dimensional Convex Hull,2-dimensional; 3-dimensional,135,,,1,1,$O(n \log h)$,,,[https://link.springer.com/article/10.1007/BF02712873 Chan's algorithm (1996)],Chan's algorithm,1996,https://link.springer.com/article/10.1007/BF02712873,10.1007/BF02712873,['T. M. Chan'],1,['Optimal output-sensitive convex hull algorithms in two and three dimensions'],,,,0,0,4,"n: 4,
h: 2",$O(n \log h)$,11,"$n$: number of line segments
$h$: number of points on the convex hull",n,,,Real RAM,words,3,n: 3,$O(n)$,https://link.springer.com/article/10.1007/BF02712873,0,1,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,4982,200722.6014,,#VALUE!,#VALUE!,,#VALUE!,#VALUE!,,3,,,Image Processing,FALSE
12,Convex Hull,1,2-dimensional Convex Hull,2-dimensional,136,,,1,1,"$O(\log n)$ time using
$O(n)$ processors",,,[https://cse.buffalo.edu/faculty/miller/Papers/IEEETC88a.pdf Miller; Stout (1988)],Miller; Stout,1988,https://cse.buffalo.edu/faculty/miller/Papers/IEEETC88a.pdf,,"['Russ Miller', 'Quentin F. Stout']",2,['Efficient Parallel Convex Hull Algorithms'],,,,1,5->7,#VALUE!,,"$O(\log n)$ time using
$O(n)$ processors",-,"$n$: number of line segments
$h$: number of points on the convex hull",n,,,"EREW PRAM, possibly others (see paper)",words,3,n: 3,$O(n)$ total?,Divide and conquer can be done in linear space total as space can be reused after conquer steps,1,0,,0,,0,,0,1,$O(n)$,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9.965,100351229.3,,,,,,,,3,,,Image Processing,FALSE
13,Strongly Connected Components,1,SCCs,SCCs,137,,,1,1,$O(V+E)$,,,[https://www.sciencedirect.com/science/article/pii/0898122181900080 Kosaraju's algorithm (1978)],Kosaraju's algorithm,1978,https://www.sciencedirect.com/science/article/pii/0898122181900080,,['M. Sharir'],1,['A strong-connectivity algorithm and its applications in data flow analysis'],,,,0,0,5,"V: 5,
E: 3",$O(V+E)$,10,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,5,"V: 5,
E: 3",$O(V+E)$,auxiliary data structures take up at most that much space,1,0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000,1,,,,,,,,4,,https://www.sciencedirect.com/science/article/pii/B9780123743640500114,Combinatorics,FALSE
13,Strongly Connected Components,1,SCCs,SCCs,138,,,1,1,$O(V+E)$,,,[https://www.semanticscholar.org/paper/Depth-First-Search-and-Linear-Graph-Algorithms-Tarjan/385742fffcf113656f0d3cf6c06ef95cb8439dc6 Tarjan's strongly connected components algorithm (1972)],Tarjan's strongly connected components algorithm,1972,https://www.semanticscholar.org/paper/Depth-First-Search-and-Linear-Graph-Algorithms-Tarjan/385742fffcf113656f0d3cf6c06ef95cb8439dc6,,['R. Tarjan'],1,['Depth-First Search and Linear Graph Algorithms'],2,1,https://www.geeksforgeeks.org/tarjan-algorithm-find-strongly-connected-components/,1,5->6,5,"V: 5,
E: 3",$O(V+E)$,10,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",$O(V)$,https://www.sciencedirect.com/science/article/pii/S0020019015001532,0,0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000,183.673,,1000000,183673.4694,,1000000000,183673469.4,,4,,,Combinatorics,FALSE
13,Strongly Connected Components,1,SCCs,SCCs,139,,,1,1,$O(V+E)$,,,[https://www.worldcat.org/title/discipline-of-programming/oclc/1958445 Path-based strong components algorithm; Dijkstra (1976)],Path-based strong components algorithm; Dijkstra,1976,https://www.worldcat.org/title/discipline-of-programming/oclc/1958445,,['Edsger W. Dijkstra'],1,['A discipline of programming'],,,,0,0,5,"V: 5,
E: 3",$O(V+E)$,10,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",$O(V)$,constant number of auxiliary stacks?,1,0,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000,1,,,,,,,,4,,,Combinatorics,FALSE
13,Strongly Connected Components,1,SCCs,SCCs,140,,,1,1,$O(E\log V+V)$,,,[https://ldhulipala.github.io/readings/sequential-scc.pdf Fleischer forward-backward (FB) algorithm (2003)],Fleischer forward-backward (FB) algorithm,2003,https://ldhulipala.github.io/readings/sequential-scc.pdf,,"['Don Coppersmith', 'Lisa Fleischer', 'Bruce Hendrickson', 'Ali Pinar']",4,['A divide-and-conquer algorithm for identifying strongly connected components'],,,,0,0,5.01,"E: 3,
V: 5.01",$O(E\log V+V)$,11,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 3",$O(V+E)$,constructing recursive subgraphs? and reuse space across recursive calls,1,0,,0,,0,,0,1,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,428571,0.002333335667,,,,,,,,4,,,Combinatorics,FALSE
13,Strongly Connected Components,1,SCCs,SCCs,141,,,1,1,$O(V+E)$,,,[https://www.sciencedirect.com/science/article/pii/S0020019015001532 Pearce (2016)],Pearce,2016,https://www.sciencedirect.com/science/article/pii/S0020019015001532,,['David J. Pearce'],1,['A space-efficient algorithm for finding strongly connected components'],,,,0,0,5,"V: 5,
E: 3",$O(V+E)$,10,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",$O(V)$,https://www.sciencedirect.com/science/article/pii/S0020019015001532,0,1,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000,1,,,,,,,,4,,,Combinatorics,FALSE
13,Strongly Connected Components,1,SCCs,SCCs,142,,,1,1,$O(V+E)$,,,[https://www.sciencedirect.com/science/article/pii/S002001900000051X?via%3Dihub Path-based depth-first search Gabow (2000)],Path-based depth-first search Gabow,2000,https://www.sciencedirect.com/science/article/pii/S002001900000051X?via%3Dihub,,['Harold N. Gabow'],1,['Path-based depth-first search for strong and biconnected components'],,,,0,0,5,"V: 5,
E: 3",$O(V+E)$,10,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1","$O(V+E)$ total, $O(V)$ auxiliary?",https://www.sciencedirect.com/science/article/pii/S002001900000051X?via%3Dihub,0,1,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000,1,,,,,,,,4,,,Combinatorics,FALSE
13,Strongly Connected Components,1,Transitive Closure,Transitive Closure,143,,,1,1,$O(V^2)$,"Each edge is selected with probability p, 0<p<1",https://link.springer.com/content/pdf/10.1007/BF01940892.pdf,[https://link.springer.com/article/10.1007%2FBF01940892 Paul Purdom (1970)],Paul Purdom,1970,https://link.springer.com/article/10.1007%2FBF01940892,10.1007%2FBF01940892,['Paul Purdom'],1,['A transitive closure algorithm'],4,1,https://link.springer.com/content/pdf/10.1007/BF01940892.pdf,1,0,6,"V: 6,
E: 3",$O(V^2+VE)$,16,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,5,"V: 5,
E: 1",$O(V^2)$,https://link.springer.com/content/pdf/10.1007/BF01940892.pdf,0,1,,0,,0,,0,0,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",1000000,,1000000000000,,1E+18,,183673,0.005444458358,,183673469388,1,,1.83673E+17,1,,4,,,Combinatorics,FALSE
13,Strongly Connected Components,1,SCCs,SCCs,144,,,1,1,$O(V^2)$,,,[http://www.cs.ox.ac.uk/people/gavin.lowe/parallelDFS.html Lowe’s Algorithm (2014)],Lowe’s Algorithm,2014,http://www.cs.ox.ac.uk/people/gavin.lowe/parallelDFS.html,,['Gavin Lowe'],1,['Concurrent Depth-First Search Algorithms'],,,,0,0,5,"V: 5,
E: 3",$O(V^2)$,10,"$V$: number of vertices
$E$: number of edges
$p$: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 1",$O(V)$ per processor,(can be easily derived?),1,0,,0,,0,,0,1,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,184244,0.005427585159,,,,,,,,4,,,Combinatorics,FALSE
13,Strongly Connected Components,1,SCCs,SCCs,145,,,1,1,"$O(p(V+E) \alpha(V, E))$?",,,[https://link.springer.com/chapter/10.1007/978-3-642-45221-5_44 Renault’s Algorithm (2009)],Renault’s Algorithm,2009,https://link.springer.com/chapter/10.1007/978-3-642-45221-5_44,10.1007/978-3-642-45221-5_44,"['Etienne Renault', 'Alexandre Duret-Lutz', 'Fabrice Kordon', 'Denis Poitrenaud']",4,['Three SCC-Based Emptiness Checks for Generalized B√ºchi Automata'],,,,0,0,5,"V: 5,
E: 3,
p: 3","$O(p(V+E) \alpha(V, E))$",-,"$V$: number of vertices
$E$: number of edges
$p$: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 1",$O(V)$ per processor,(can be easily derived?),1,0,,0,,0,,0,1,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,183673,0.005444458358,,,,,,,,4,,,Combinatorics,FALSE
13,Strongly Connected Components,1,SCCs,SCCs,146,,,1,1,$O(V+E)$,,,[https://link.springer.com/chapter/10.1007/3-540-48119-2_16 Couvreur (1999)],Couvreur,1999,https://link.springer.com/chapter/10.1007/3-540-48119-2_16,10.1007/3-540-48119-2_16,['Jean-Michel Couvreur'],1,['On-the-fly Verification of Linear Temporal Logic'],,,,0,0,5,"V: 5,
E: 3",$O(V+E)$,10,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",$O(V)$?,can be easily derived?,1,0,,0,,0,,0,0,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,1000,1,,,,,,,,4,,,Combinatorics,FALSE
13,Strongly Connected Components,1,SCCs,SCCs,147,,,1,1,$O(E + V \log V)$,,,[https://www.sciencedirect.com/science/article/pii/0020019071900068 Munro’s algorithm (1971)],Munro’s algorithm,1971,https://www.sciencedirect.com/science/article/pii/0020019071900068,,['Ian Munro'],1,['Efficient determination of the transitive closure of a directed graph'],,,,1,4->5,5,"V: 5,
E: 3",$O(E + V \log V)$,10,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,3,"V: 3,
E: 1",$O(V)$?,can be easily derived?,1,0,,0,,0,,0,0,,0,0,http://essay.utwente.nl/67128/1/Bloemen_MA_EEMCS.pdf,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",1000,999,1000000,999999,1000000000,999999999,4318.596513,42.53071558,41.53071558,8589646.921,21383.12216,21382.12216,12860697328,14281765.96,14281764.96,4,,,Combinatorics,FALSE
13,Strongly Connected Components,1,SCCs,SCCs,148,,,1,1,$O(V(V+E))$,,,[https://ieeexplore.ieee.org/document/8133154 OBF Algorithm (2011)],OBF Algorithm,2011,https://ieeexplore.ieee.org/document/8133154,,"['Jiří Barnat', 'Jakub Chaloupka', 'Jaco Van De Pol']",3,['Distributed Algorithms for SCC Decomposition'],,,,0,0,6,"E: 3,
V: 6",$O(V(V+E))$,16,"$V$: number of vertices
$E$: number of edges
$p$: number of processors",V,,,Word RAM,words,5,"V: 5,
E: 3",$O(E+V^2)$ total,https://ris.utwente.nl/ws/files/6872352/Barnat09distributed.pdf,0,1,,0,,0,,0,1,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,428571,0.002333335667,,,,,,,,4,,,Combinatorics,FALSE
13,Strongly Connected Components,1,SCCs,SCCs,149,,,1,1,$O(VE)$,,,[https://research.vu.nl/en/publications/on-distributed-verification-and-verified-distribution CH Algorithm (2004)],CH Algorithm,2004,https://research.vu.nl/en/publications/on-distributed-verification-and-verified-distribution,,['S.M. Orzan'],1,['On Distributed Verification and Verified Distribution'],,,,0,0,6,"E: 3,
V: 6",$O(VE)$,16,"$V$: number of vertices
$E$: number of edges
$p$: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 3",$O(V+E)$?,Each vertex needs to keep track of one color; then we need to build recursive subgraphs,1,0,,0,,0,,0,1,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,244897,0.004083349326,,,,,,,,4,,,Combinatorics,FALSE
13,Strongly Connected Components,1,SCCs,SCCs,150,,,1,1,$O(V(V+E))$,,,[https://stanford-ppl.github.io/website/papers/sc13-hong.pdf Hong’s algorithm (2013)],Hong’s algorithm,2013,https://stanford-ppl.github.io/website/papers/sc13-hong.pdf,,"['Sungpack Hong', 'Nicole C. Rodia', 'Kunle Olukotun']",3,['On Fast Parallel Detection of Strongly Connected Components (SCC) in Small-World Graphs'],,,,0,0,6,"E: 3,
V: 6",$O(V(V+E))$,16,"$V$: number of vertices
$E$: number of edges
$p$: number of processors",V,,,Word RAM,words,3,"V: 3,
E: 3",$O(V+E)$?,Building recursive subgraphs,1,0,,0,,0,,0,1,,0,0,,"The strongly connected components or diconnected components of an arbitrary
 directed graph form a partition into subgraphs that are themselves
 strongly connected.",,,"V:E
3:4",,,,,,,428571,0.002333335667,,,,,,,,4,,,Combinatorics,FALSE
14,Minimum Spanning Tree (MST),1,MST,"Undirected, General MST",151,,,1,1,$O(E \log V)$,,,[- Borůvka's algorithm (1926)],Borůvka's algorithm,1926,-,,[],0,,1,1,https://www.geeksforgeeks.org/boruvkas-algorithm-greedy-algo-9/,1,0,5.01,"V: 5.01,
E: 3",$O(E \log V)$,11,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge weight",V,,,Word RAM,words,3,"V: 3,
E: 1",$O(V)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,5075,1,,10889978.26,1,,16703352428,1,,5,,https://scholarworks.rit.edu/cgi/viewcontent.cgi?article=1658&context=theses,Combinatorics,FALSE
14,Minimum Spanning Tree (MST),1,MST,"Undirected, General MST",152,,,1,1,$O(V^2)$,,,[https://ieeexplore.ieee.org/document/6773228 Prim's algorithm + adjacency matrix searching (1957)],Prim's algorithm + adjacency matrix searching,1957,https://ieeexplore.ieee.org/document/6773228,10.1002/j.1538-7305.1957.tb01515.x,['R. C. Prim'],1,['Shortest Connection Networks And Some Generalizations'],,,,0,0,5,V: 5,$O(V^2)$,10,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge weight",V,,,Word RAM,words,3,"V: 3,
E: 1",$O(V)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,173611,0.02923201871,,,,,,,,5,,,Combinatorics,FALSE
14,Minimum Spanning Tree (MST),1,MST,"Undirected, General MST",153,,,1,1,$O(E + V \log V)$,,,[https://dl.acm.org/citation.cfm?id=28874 Prim's algorithm + Fibonacci heaps; Fredman & Tarjan (1987)],Prim's algorithm + Fibonacci heaps; Fredman & Tarjan,1987,https://dl.acm.org/citation.cfm?id=28874,,"['Michael L. Fredman', 'Robert Endre Tarjan']",2,['Fibonacci heaps and their uses in improved network optimization algorithms'],,,,0,0,5,"V: 5,
E: 3",$O(E + V \log V)$,10,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge weight",V,,,Word RAM,words,3,"V: 3,
E: 1",$O(V)$?,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,4208,1.206036122,,,,,,,,5,,,Combinatorics,FALSE
14,Minimum Spanning Tree (MST),1,MST,"Undirected, General MST",154,,,1,1,$O(E \log E)$,,,[https://www.jstor.org/stable/2033241 Kruskal's algorithm (1956)],Kruskal's algorithm,1956,https://www.jstor.org/stable/2033241,,"['Joseph B. Kruskal, Jr.']",1,['On the Shortest Spanning Subtree of a Graph and the Traveling Salesman Problem'],,,,0,0,5.01,"V: 5.01,
E: 4",$O(E \log E)$,11,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",$O(E)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,5355,0.9477124183,,,,,,,,5,,,Combinatorics,FALSE
14,Minimum Spanning Tree (MST),1,MST,"Undirected, General MST",155,,,1,1,$O(E \log \log V)$,,,[https://www.sciencedirect.com/science/article/pii/0020019075900563 Yao's algorithm (1975)],Yao's algorithm,1975,https://www.sciencedirect.com/science/article/pii/0020019075900563,,['Andrew Chi-chih Yao'],1,['An O(|E|loglog|V|) algorithm for finding minimum spanning trees'],,,,1,0,5.001,"V: 5.001,
E: 4",$O(E \log \log V)$,10.1,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",$O(E)$?,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,1820,2.788461538,0.02973317467,2463146.436,4.421165588,0.04338336425,2823142793,5.916580794,0.05210519661,5,,,Combinatorics,FALSE
14,Minimum Spanning Tree (MST),1,MST,"Undirected, General MST",156,,,1,1,$O(E \log \log V)$,,,[https://epubs.siam.org/doi/abs/10.1137/0205051 Cheriton-Tarjan Algorithm (1976)],Cheriton-Tarjan Algorithm,1976,https://epubs.siam.org/doi/abs/10.1137/0205051,10.1137/0205051,"['David Cheriton', 'Robert Endre Tarjan']",2,['Finding Minimum Spanning Trees'],,,,0,0,5.001,"V: 5.001,
E: 4",$O(E \log \log V)$,10.1,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",$O(E)$?,keep track of copy of graph where edges may be deleted?,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,1820,2.788461538,,,,,,,,5,,,Combinatorics,FALSE
14,Minimum Spanning Tree (MST),1,MST,"Undirected, General MST",159,,,1,1,"$O(E+V \log(V) \log(E/V))$, equivalent to $O(E + V\log(V)\log\log(V))$","""Arbitrary graph, random edge weights""",https://dl.acm.org/doi/10.5555/2791220.2791225,[https://dl.acm.org/citation.cfm?id=2791225 Filter Kruskal algorithm (2009)],Filter Kruskal algorithm,2009,https://dl.acm.org/citation.cfm?id=2791225,,"['Vitaly Osipov', 'Peter Sanders', 'Johannes Singler']",3,['The Filter-Kruskal minimum spanning tree algorithm'],,,,0,0,5.01,"V: 5.01,
E: 4",$O(E \log V)$,11,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",$O(E)$?,"Kruskal-based, with minimal overhead? filtering should only remove edges, and each edge should only require $O(1)$ information",1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,12258,0.4140153369,,,,,,,,5,,,Combinatorics,FALSE
14,Minimum Spanning Tree (MST),1,MST,"Undirected, General MST",160,,,1,1,"$O(E \alpha(E, V))$",,,[https://www.cs.princeton.edu/~chazelle/pubs/mst.pdf Chazelle's algorithm (2000)],Chazelle's algorithm,2000,https://www.cs.princeton.edu/~chazelle/pubs/mst.pdf,,['Bernard Chazelle'],1,['A minimum spanning tree algorithm with inverse-Ackermann type complexity'],,,,0,0,5,"V: 5,
E: 3","$O(E \alpha(E, V))$",10.0005,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",$O(E)$??,"Seems like it uses Boruvka phases and contracts the graph, which requires $O(E)$ space, and then additional information in the tree data structure/soft heap don't require space beyond that",,,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,583,8.704974271,,,,,,,,5,,,Combinatorics,FALSE
14,Minimum Spanning Tree (MST),1,MST,"Undirected, General MST",161,,,1,1,$O(E \log V (\log \log V)^3)$,,,[https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf Thorup (reverse-delete) (2000)],Thorup (reverse-delete),2000,https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf,,['Mikkel Thorup'],1,['Near-optimal fully-dynamic graph connectivity'],,,,0,0,5.02,"V: 5.02,
E: 3",$O(E \log V (\log \log V)^3)$,11.3,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge weight",V,,,Word RAM,words,5,"V: 5,
E: 3",$O(E)$?,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,154134,0.03292589565,,,,,,,,5,,,Combinatorics,FALSE
15,Closest Pair Problem,1,k-dimensional space Closest Pair Problem,"k-dimensional space, l_m (or l_infty) norm",165,,,1,1,$O(kn \log\log n + n 3^k)$,,,[https://www.sciencedirect.com/science/article/pii/0020019079900851 Fortune and Hopcroft (1979)],Fortune and Hopcroft,1979,https://www.sciencedirect.com/science/article/pii/0020019079900851,,"['Steve Fortune', 'John Hopcroft']",2,['A note on Rabin's nearest-neighbor algorithm'],,,,0,0,4,"n: 4,
k: 8",$O(kn \log\log n + n 3^k)$,10.1,"$n$: number of points
$k$: dimension of space",n,,,Real RAM,words,3,n: 3,$O(n)$,can be easily derived? (can re-use space from recursive calls),1,0,,0,,0,,0,0,,0,0,https://ecommons.cornell.edu/bitstream/handle/1813/7460/78-340.pdf,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,3316,301.5681544,,,,,,,,4,,,Image Processing,FALSE
15,Closest Pair Problem,1,k-dimensional space Closest Pair Problem,"k-dimensional space, l_m (or l_infty) norm",167,,,1,1,$O(3^k n)$,Randomness within the algorithm steps themselves,,[https://dl.acm.org/citation.cfm?id=540196 Rabin' Algorithm (1976)],Rabin' Algorithm,1976,https://dl.acm.org/citation.cfm?id=540196,,['Michael O. Rabin'],1,['Probabilistic algorithms'],,,,1,5->6,5,"k: 8,
n: 5",$O(3^k n^2)$,20,"$n$: number of points
$k$: dimension of space",n,,,Real RAM,words,3,n: 3,$O(n)$,can be easily derived,1,0,,1,Las Vegas,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,1000,1000,,1000000,1000000,,1000000000,1000000000,,4,,,Image Processing,FALSE
15,Closest Pair Problem,1,k-dimensional space Closest Pair Problem,"k-dimensional space, l_m (or l_infty) norm",169,,,1,1,$O(kn \log n)$,,,[https://dl.acm.org/citation.cfm?id=803652 Bentley; Shamos (1976)],Bentley; Shamos,1976,https://dl.acm.org/citation.cfm?id=803652,,"['Jon Louis Bentley', 'Michael Ian Shamos']",2,['Divide-and-conquer in multidimensional space'],,,,0,0,4,"n: 4,
k: 3",$O(kn \log n)$,11,"$n$: number of points
$k$: dimension of space",n,,,Real RAM,words,3,"n: 3,
k: 3",$O(kn)$?,keep track of all sorted lists in each dimension; re-use space from recursive calls,1,0,,0,,0,,0,0,,0,0,"F. Preparata and M. Shamos. Computational Geometry: An Introduction. https://link.springer.com/book/10.1007/978-1-4612-1098-6

J. L. Bentley. Multidimensional divide-and-conquer. https://dl.acm.org/doi/10.1145/358841.358850","given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,9965,100.3512293,,,,,,,,4,,,Image Processing,FALSE
15,Closest Pair Problem,1,2-dimensional space Closest Pair Problem,"2-dimensional space, l_m (or l_infty) norm",170,,,1,1,$O(n \log n)$,,,[https://www.sciencedirect.com/science/article/pii/0020019088901500 Hinrichs; Nievergelt; Schorn (1988)],Hinrichs; Nievergelt; Schorn,1988,https://www.sciencedirect.com/science/article/pii/0020019088901500,,"['Klaus Hinrichs', 'Jurg Nievergelt', 'Peter Schorn']",3,['Plane-sweep solves the closest pair problem elegantly'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of points,n,,,Real RAM,words,3,n: 3,$O(n)$,https://www.sciencedirect.com/science/article/pii/0020019088901500,0,1,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,9965,100.3512293,,,,,,,,4,,,Image Processing,FALSE
15,Closest Pair Problem,1,2-dimensional space Closest Pair Problem,"2-dimensional space, Euclidean metric",171,,,1,1,$O(n \log n)$,,,[https://ieeexplore.ieee.org/document/4567872 Shamos; Hoey (1975)],Shamos; Hoey,1975,https://ieeexplore.ieee.org/document/4567872,,"['Michael Ian Shamos', 'Dan Hoey']",2,['Closest-point problems'],2,1,http://geomalgorithms.com/a09-_intersect-3.html,1,4->5,4,n: 4,$O(n \log n)$,11,$n$: number of points,n,,,Real RAM,words,3,n: 3,$O(n)$,Voronoi diagrams require $O(n)$ space,1,0,,0,,0,,0,0,,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,9965,100.3512293,99.3512293,19931568.57,50171.66594,50170.66594,29897352854,33447777.3,33447776.3,4,,,Image Processing,FALSE
15,Closest Pair Problem,1,2-dimensional space Closest Pair Problem,2-dimensional array representation,173,,,1,1,$O(n)$ using $O(n^2)$ processors,,,[https://www.sciencedirect.com/science/article/pii/0020019080900356 Dyer (1980)],Dyer,1980,https://www.sciencedirect.com/science/article/pii/0020019080900356,,['Charles R. Dyer'],1,['A fast parallel algorithm for the closest pair problem'],,,,0,0,3,n: 3,$O(n)$ using $O(n^2)$ processors,-,$n$: number of points,n,,,log-space pyramid cellular automaton,words,5,n: 5,$O(n^2)$,https://www.sciencedirect.com/science/article/pii/0020019080900356,0,1,,0,,0,,0,1,$O(n^2)$,0,0,,"given n points in metric space; find a pair of points with the smallest
 distance between them. ",,,,,,,,,,1000,1000,,,,,,,,4,,,Image Processing,FALSE
16,Shortest Path (Directed Graphs),1,directed SSSP,general weights,174,,,1,1,$O(V^2 EL)$,,,[https://apps.dtic.mil/sti/pdfs/AD0422842.pdf Bellman–Ford algorithm (Ford 1956) (1956)],Bellman–Ford algorithm (Ford 1956),1956,https://apps.dtic.mil/sti/pdfs/AD0422842.pdf,,"['L. R. Ford, Jr.']",1,['Network Flow Theory'],1,1,https://www.rand.org/pubs/papers/P923.html,1,0,7,"V: 7,
E: 3,
L: 3",$O(V^2 EL)$,30,"$V$: number of vertices
$E$: number of edges
$L$: maximum absolute value of edge cost",V,,,Word/Real RAM,words,5,"E: 3,
V: 5",$O(E)$,number of equations in LP; each equation has a constant number of variables,1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",666.6666667,,666666.6667,,666666666.7,,7407407407,1,,7.40741E+18,1,,7.40741E+27,1,,2,,,Combinatorics,FALSE
16,Shortest Path (Directed Graphs),1,directed SSSP,general weights,175,,,1,1,$O(VE)$,,,[https://www.ams.org/journals/qam/1958-16-01/S0033-569X-1958-0102435-2/S0033-569X-1958-0102435-2.pdf Bellman–Ford algorithm (Shimbel 1955; Bellman 1958; Moore 1959) (1959)],Bellman–Ford algorithm (Shimbel 1955; Bellman 1958; Moore 1959),1959,https://www.ams.org/journals/qam/1958-16-01/S0033-569X-1958-0102435-2/S0033-569X-1958-0102435-2.pdf,,['RICHARD BELLMAN'],1,['ON A ROUTING PROBLEM'],,,,1,2->4,6,"V: 6,
E: 3",$O(VE)$,16,"$V$: number of vertices
$E$: number of edges
$L$: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,$O(V)$,keeping track of distances,1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",333.3333333,0.2599210499,333333.3333,0.2599210499,333333333.3,0.2599210499,222222,33333.36667,31.18299021,222222222222,33333333.33,320.8297949,2.22222E+17,33333333333,3217.297949,2,,,Combinatorics,FALSE
16,Shortest Path (Directed Graphs),1,directed nonneg SSSP,Nonnegative Weights,176,,,1,1,$O(V^2 \log V)$,,,[https://www.jstor.org/stable/pdf/2627005.pdf Bellman–Ford algorithm (Dantzig 1960) (1960)],Bellman–Ford algorithm (Dantzig 1960),1960,https://www.jstor.org/stable/pdf/2627005.pdf,,['George B. Dantzig'],1,['On the Shortest Route Through a Network'],,,,0,0,5.01,V: 5.01,$O(V^2 \log V)$,11,"$V$: number of vertices
$E$: number of edges
$L$: maximum absolute value of edge cost",V,,,Word/Real RAM,words,5,"E: 3,
V: 5",$O(E)$,can be easily derived,1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,931111,15910.90086,,,,,,,,2,,,Combinatorics,FALSE
16,Shortest Path (Directed Graphs),1,directed nonneg SSSP,Nonnegative Weights,177,,,1,1,$O(V^2)$,,,[https://www.jstor.org/stable/3007178?seq=1#page_scan_tab_contents Dijkstra's algorithm with list (Whiting & Hillier 1960) (1960)],Dijkstra's algorithm with list (Whiting & Hillier 1960),1960,https://www.jstor.org/stable/3007178?seq=1#page_scan_tab_contents,,"['P. D. Whiting', 'J. A. Hillier']",2,['A Method for Finding the Shortest Route Through a Road Network'],,,,0,0,5,V: 5,$O(V^2)$,10,"$V$: number of vertices
$E$: number of edges
$L$: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,$O(V)$,"keeping track of distances/previous node in path, along with list",1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,111111,133333.4667,,,,,,,,2,,,Combinatorics,FALSE
16,Shortest Path (Directed Graphs),1,directed nonneg SSSP,Nonnegative Weights,178,,,1,1,$O((E + V) \log V)$,,,[https://dl.acm.org/citation.cfm?id=321993 Dijkstra's algorithm with binary heap (Johnson 1977) (1977)],Dijkstra's algorithm with binary heap (Johnson 1977),1977,https://dl.acm.org/citation.cfm?id=321993,,['Donald B. Johnson'],1,['Efficient Algorithms for Shortest Paths in Sparse Networks'],,,,1,4->5,5.01,"V: 5.01,
E: 3",$O((E + V) \log V)$,11,"$V$: number of vertices
$E$: number of edges
$L$: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,$O(V)$,"keeping track of distances/previous node in path, along with heap",1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,8380.821784,883852.1566,0.9193798649,18346606.07,403748103584,2.570030516,28312390353,2.61631E+17,5.75171023,2,,,Combinatorics,FALSE
16,Shortest Path (Directed Graphs),1,directed nonneg SSSP,Nonnegative Weights,179,,,1,1,$O(E + V \log V)$,,,[https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/fibonacci%20heaps.pdf Dijkstra's algorithm with Fibonacci heap (Fredman & Tarjan 1984; Fredman & Tarjan 1987) (1984)],Dijkstra's algorithm with Fibonacci heap (Fredman & Tarjan 1984; Fredman & Tarjan 1987),1984,https://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/fibonacci%20heaps.pdf,,"['Michael L. Fredman', 'Robert Endre Tarjan']",2,['Fibonacci heaps and their uses in improved network optimization algorithms'],,,,0,0,5,"E: 3,
V: 5",$O(E + V \log V)$,10,"$V$: number of vertices
$E$: number of edges
$L$: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,$O(V)$,"keeping track of distances/previous node in path, along with heap",1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,3460,4281738.386,,,,,,,,2,,,Combinatorics,FALSE
16,Shortest Path (Directed Graphs),1,directed nonneg SSSP,Nonnegative Integer Weights,180,,,1,1,$O(E \log \log L)$,,,[https://www.sciencedirect.com/science/article/pii/0166218X8390104X?via%3Dihub Dijkstra's algorithm with Fibonacci heap (Johnson 1981; Karlsson & Poblete 1983) (1981)],Dijkstra's algorithm with Fibonacci heap (Johnson 1981; Karlsson & Poblete 1983),1981,https://www.sciencedirect.com/science/article/pii/0166218X8390104X?via%3Dihub,,"['Rolf G. Karlsson', 'Patricio V. Poblete']",2,['An O(m log log D) algorithm for shortest paths'],2,1,https://link.springer.com/article/10.1007/BF01786986,1,0,5,"E: 3,
V: 5,
L: 1.99",$O(E \log \log L)$,11,"$V$: number of vertices
$E$: number of edges
$L$: maximum absolute value of edge cost",V,,,Word RAM,words,3,"V: 3,
L: 3",$O(V+L)$,https://www.sciencedirect.com/science/article/pii/0166218X8390104X?via%3Dihub,0,1,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,669.3,11067394.9,0.9132063615,1821347.23,4066993532946,2.194264973,1821347230,4.06699E+18,4.550996318,2,,,Combinatorics,FALSE
16,Shortest Path (Directed Graphs),1,directed nonneg SSSP,Nonnegative Weights,181,,,1,1,$O(E \log L/\log(2+(E/V)))$,,,[https://ieeexplore.ieee.org/document/4568085 Gabow's algorithm (1983)],Gabow's algorithm,1983,https://ieeexplore.ieee.org/document/4568085,,['Harold N. Gabow'],1,['Scaling algorithms for network problems'],,,,0,0,5,"E: 3,
V: 5,
L: 2",$O(E \log L/\log(2+(E/V)))$,21,"$V$: number of vertices
$E$: number of edges
$L$: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,"V: 3,
E: 3",$O(V+E)$?,(keeping track of new graphs?),1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,4426,3347224.314,,,,,,,,2,,,Combinatorics,FALSE
16,Shortest Path (Directed Graphs),2,directed nonneg SSSP,Nonnegative Integer Weights,182,,,1,1,$O(E + V \sqrt{\log(L)} )$,,,[https://dl.acm.org/doi/10.1145/77600.77615 Gabow Ahuja Algorithm (1990)],Gabow Ahuja Algorithm,1990,https://dl.acm.org/doi/10.1145/77600.77615,10.1145/77600.77615,"['Ravindra K. Ahuja', 'Kurt Mehlhorn', 'James Orlin', 'Robert E. Tarjan']",4,['Faster algorithms for the shortest path problem'],,,,0,0,5,"E: 3,
V: 5,
L: 1.5",$O(E + V \sqrt{\log(L)} )$,10,"$V$: number of vertices
$E$: number of edges
$L$: maximum absolute value of edge cost",V,,,Word RAM,words,5,"V: 5,
E: 3
C: 2",$O(E + \log C)$,https://dl.acm.org/doi/10.1145/77600.77615,0,1,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,1525,9714632.665,,,,,,,,2,,,Combinatorics,FALSE
16,Shortest Path (Directed Graphs),1,directed nonneg SSSP,Nonnegative Integer Weights,183,,,1,1,"$O(E + V \min(\log \log V, \log \log L))$",,,[https://dl.acm.org/doi/10.1016/j.jcss.2004.04.003 Thorup's algorithm (2004)],Thorup's algorithm,2004,https://dl.acm.org/doi/10.1016/j.jcss.2004.04.003,10.1016/j.jcss.2004.04.003,['Mikkel Thorup'],1,['Integer priority queues with decrease key in constant time and the single source shortest paths problem'],,,,0,0,5,"E: 3,
V: 5,
L: 1.99","$O(E + V \min(\log \log V, \log \log L))$",10,"$V$: number of vertices
$E$: number of edges
$L$: maximum absolute value of edge cost",V,,,Word/Real RAM,words,3,V: 3,"$O(V)$? (""linear-space queue"")",https://dl.acm.org/doi/10.1016/j.jcss.2004.04.003,0,1,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices
 (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.",,,"V:E
0.5:1
L = 100",,,,,,,1686,8786960.151,,,,,,,,2,,,Combinatorics,FALSE
17,All-Pairs Shortest Paths (APSP),2,,APSP on Dense Directed Graphs with Arbitrary Weights,184,,,1,1,$O(n^4)$,,,[https://link.springer.com/article/10.1007/BF02476438 Shimbel Algorithm (1953)],Shimbel Algorithm,1953,https://link.springer.com/article/10.1007/BF02476438,10.1007/BF02476438,['Alfonso Shimbel'],1,['Structural parameters of communication networks'],1,1,https://link.springer.com/content/pdf/10.1007/BF02476438.pdf,1,0,7,n: 7,$O(n^4)$,40,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses a $V \times V$ matrix to store and calculate distances,1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,12345679012,1,,1.23457E+22,1,,1.23457E+34,1,,2,,,Combinatorics,FALSE
17,All-Pairs Shortest Paths (APSP),2,APSP,APSP,185,,,1,1,$O(n^3)$,,,[https://dl.acm.org/citation.cfm?id=368168 Floyd–Warshall algorithm (1962)],Floyd–Warshall algorithm,1962,https://dl.acm.org/citation.cfm?id=368168,,['Robert W. Floyd'],1,['Algorithm 97: Shortest path'],,,,1,2->3,6,n: 6,$O(n^3)$,30,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses a $V \times V$ matrix to store and calculate distances,1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,37037037,333.3333337,0.9068646188,3.7037E+16,333333.3333,3.108215283,3.7037E+25,333333333.3,7.850881521,2,,,Combinatorics,FALSE
17,All-Pairs Shortest Paths (APSP),2,,APSP on Dense Undirected Unweighted Graphs; APSP on Sparse Undirected Unweighted Graphs,186,,,1,1,$O(n^{2.373} \log n)$,,,[https://www.sciencedirect.com/science/article/pii/S0022000085710781 Seidel's algorithm (1995)],Seidel's algorithm,1995,https://www.sciencedirect.com/science/article/pii/S0022000085710781,,['Raimund Seidel'],1,['On the All-Pairs-Shortest-Path Problem in Unweighted Undirected Graphs'],,,,1,0,5.373,n: 5.373,$O(n^{2.373} \log n)$,26.1,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses four auxiliary $V \times V$ matrices,1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,8100011,1524.155833,0.1906562983,234070670188821,52743383.02,0.5270777256,4.75081E+21,2598646354631,0.9751005894,2,,,Combinatorics,FALSE
17,All-Pairs Shortest Paths (APSP),2,,APSP on Dense Directed Graphs with Arbitrary Weights,187,,,1,1,$O(n^3/2^{\sqrt{\log n}})$,,,[https://dl.acm.org/citation.cfm?id=2591811 Williams (2014)],Williams,2014,https://dl.acm.org/citation.cfm?id=2591811,,['Ryan Williams'],1,['Faster all-pairs shortest paths via circuit complexity'],,,,0,0,6,n: 6,$O(n^3/2^{\sqrt{\log n}})$,29.2,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,"Derived: discussed with Ryan, uses an auxiliary $V \times V$ matrix, and the space required for the matrix multiplication of $V \times d$ and $d \times V$ matrices is also $O(V^2)$",1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,4998250,2470.000303,,,,,,,,2,,,Combinatorics,FALSE
17,All-Pairs Shortest Paths (APSP),0.001,APSP,APSP on Dense Undirected Graphs with Arbitrary Weights; APSP on Sparse Undirected Graphs with Arbitrary Weights,188,,,1,1,"$O(mn \log \alpha(m,n))$",,,[https://dl.acm.org/citation.cfm?id=545417 Pettie & Ramachandran (2002)],Pettie & Ramachandran,2002,https://dl.acm.org/citation.cfm?id=545417,,"['Seth Pettie', 'Vijaya Ramachandran']",2,['Computing shortest paths with comparisons and additions'],,,,0,0,6,"n: 6,
m: 3","$O(mn \log \alpha(m,n))$",,"$n$: number of vertices
$m$: number of edges
$\alpha$:",n,,,Pointer Machine,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,222222,55555.61111,,,,,,,,2,,,Combinatorics,FALSE
17,All-Pairs Shortest Paths (APSP),2,,APSP on Dense Undirected Graphs with Positive Integer Weights; APSP on Sparse Undirected Graphs with Positive Integer Weights,189,,,1,1,$O(mn)$,,,[https://ieeexplore.ieee.org/document/646088 Thorup (1999)],Thorup,1999,https://ieeexplore.ieee.org/document/646088,,['M. Thorup'],1,['Undirected single source shortest paths in linear time'],1,1,https://dl.acm.org/doi/pdf/10.1145/316542.316548,1,3->4,6,"n: 6,
m: 3",$O(mn)$,20,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,"n: 5,
m: 3",$O(m)$,https://ieeexplore.ieee.org/document/646088,0,1,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,222222,55555.61111,,222222222222,55555555556,,2.22222E+17,5.55556E+16,,2,,,Combinatorics,FALSE
17,All-Pairs Shortest Paths (APSP),2,,APSP on Geometrically Weighted Graphs,190,,,1,1,$O(n^{2.844})$,,,[http://tmc.web.engr.illinois.edu/moreapsp.pdf Chan (Geometrically Weighted) (2009)],Chan (Geometrically Weighted),2009,http://tmc.web.engr.illinois.edu/moreapsp.pdf,,['Timothy M. Chan'],1,['More Algorithms for All-Pairs Shortest Paths in Weighted Graphs'],,,,0,0,5.844,n: 5.844,$O(n^{2.844})$,28.5,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,"n: 5,
m: 1",$O(l n^2)$,Derived: Compute and store $2l$ $V \times V$ matrices,1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,14964670,824.9883901,,,,,,,,2,,,Combinatorics,FALSE
17,All-Pairs Shortest Paths (APSP),2,,APSP on Dense Directed Graphs with Arbitrary Weights; APSP on Dense Undirected Graphs with Arbitrary Weights,191,,,1,1,$O(n^3 \log^3 \log n / \log^2 n)$,,,[http://tmc.web.engr.illinois.edu/moreapsp.pdf Chan (2009)],Chan,2009,http://tmc.web.engr.illinois.edu/moreapsp.pdf,,['Timothy M. Chan'],1,['More Algorithms for All-Pairs Shortest Paths in Weighted Graphs'],,,,0,0,6,n: 6,$O(n^3 \log^3 \log n / \log^2 n)$,29.4,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,"n: 5,
m: 1",$O(n^2)$,"Derived: Dividing $A$ and $B$ into $V \times q$ and $q \times V$ matrices, in total using $O(V^2)$ space ",1,0,,0,,0,,0,0,,0,0,,"the shortest path problem is the problem of finding a path between two vertices 
(or nodes) in a graph such that the sum of the weights of
 its constituent edges is minimized.",,,"V:E
0.5:1",,,,,,,15111217,816.9877391,,,,,,,,2,,,Combinatorics,FALSE
18,Integer Factoring,1,Integer Factoring,First Category Integer Factoring,192,,,1,1,$O(2^{n/2})$,,,[- Trial division (1202)],Trial division,1202,-,,[],0,,1,1,https://en.wikipedia.org/wiki/Trial_division,1,0,8,n: 8,$O(2^{n/2})$,988,$n$: number of bits in the integer,n,,,Word RAM,bits,3,n: 3,$O(n)$,need to keep track of what number you're currently checking,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Trial_division,whose running time depends on the size of smallest prime factor.,,,,1000,,1000000,,1000000000,,Inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,TRUE
18,Integer Factoring,1,Integer Factoring,First Category Integer Factoring,193,,,1,1,$O(2^{n/2})$,,,[ Wheel factorization (1940)],Wheel factorization,1940,,,[],0,,,,,0,0,8,n: 8,$O(2^{n/2})$,988,$n$: number of bits in the integer,n,,,Word RAM,bits,3,n: 3,$O(n)$,"need to keep track of what number you're currently checking, along with $o(n)$ bits for the wheel (assuming it's small)",1,0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,Inf,1,,,,,,,,1,,,Numerical Analysis,TRUE
18,Integer Factoring,0.001,Integer Factoring,First Category Integer Factoring,194,,,1,1,-,,,[https://link.springer.com/article/10.1007%2FBF01933667 Pollard's rho algorithm (1975)],Pollard's rho algorithm,1975,https://link.springer.com/article/10.1007%2FBF01933667,10.1007%2FBF01933667,['J. M. Pollard'],1,['A monte carlo method for factorization'],,,,0,0,#VALUE!,,-,,$n$: number of bits in the integer,n,,,Word RAM,bits,3,n: 3,$O(n)$,"keep track of $g$ (the polynomial; $O(1)$ space), $x$, $y$, and $d$ (all $O(n)$ space)",1,0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,Inf,1,,,,,,,,1,,,Numerical Analysis,TRUE
18,Integer Factoring,1,Integer Factoring,First Category Integer Factoring,195,,,1,1,$O(B \log(B) \log^2(n))$?,,,[https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/theorems-on-factorization-and-primality-testing/6762E84DBD34AEF13E6B1D1A8334A989 Pollard's p − 1 algorithm (1974)],Pollard's p − 1 algorithm,1974,https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/theorems-on-factorization-and-primality-testing/6762E84DBD34AEF13E6B1D1A8334A989,,['J. M. Pollard'],1,['Theorems on factorization and primality testing'],,,,0,0,8,n: 8,$O(B \log(B) \log^2(n))$,,"$n$: number of bits in the integer
$B$: smoothness bound (can be exponential)",n,,,Word RAM,bits,8,"n: 8,
B: 3",$O(n+B)$,"the number $M$ requires $O((\log B)\pi(B)) = O(B)$ bits, and the other numbers require $O(n)$ bits",1,0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,Inf,1,,,,,,,,1,,,Numerical Analysis,TRUE
18,Integer Factoring,1,Integer Factoring,First Category Integer Factoring,196,,,1,1,$O(2^n)$,,,[https://www.jstor.org/stable/2007633?origin=crossref Williams' p + 1 algorithm (1982)],Williams' p + 1 algorithm,1982,https://www.jstor.org/stable/2007633?origin=crossref,,['H. C. Williams'],1,['A $p + 1$ Method of Factoring'],,,,0,0,8,n: 8,$O(2^n)$,1000,$n$: number of bits in the integer,n,,,Word RAM,bits,3,n: 3,$O(n)$?,constant number of values which are expressed in mod $N$,1,0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,Inf,1,,,,,,,,1,,,Numerical Analysis,TRUE
18,Integer Factoring,1,Integer Factoring,First Category Integer Factoring,197,,,1,1,$O(e^{\sqrt{(1+o(1))n\log n}})$,,,[https://www.jstor.org/stable/1971363?origin=crossref&seq=1 Lenstra elliptic curve factorization (1987)],Lenstra elliptic curve factorization,1987,https://www.jstor.org/stable/1971363?origin=crossref&seq=1,,"['H. W. Lenstra, Jr.']",1,['Factoring Integers with Elliptic Curves'],,,,0,0,8,n: 8,$O(e^{\sqrt{(1+o(1))n\log n}})$,,$n$: number of bits in the integer,n,,,Word RAM,bits,3,n: 3,$O(n)$?,constant number of values which are expressed in mod $N$,1,0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,22542392121,Inf,,,,,,,,1,,,Numerical Analysis,TRUE
18,Integer Factoring,1,Integer Factoring,First Category Integer Factoring,198,,,1,1,$O(2^n)$?,,,[https://archive.org/details/oeuvresdefermat02ferm Fermat's factorization method (1894)],Fermat's factorization method,1894,https://archive.org/details/oeuvresdefermat02ferm,,"['Paul Tannery', 'Charles Henry']",2,['Oeuvres de Fermat'],1,1,https://www.geeksforgeeks.org/fermats-factorization-method/,1,0,8,n: 8,$O(2^n)$,1000,$n$: number of bits in the integer,n,,,Word RAM,bits,3,n: 3,$O(n)$?,constant number of values which require at most $O(n)$ bits,1,0,,0,,0,,0,0,,0,0,,whose running time depends on the size of smallest prime factor.,,,,,,,,,,22387211385,Inf,,5.01187E+20,Inf,,1.12202E+31,Inf,,1,,,Numerical Analysis,TRUE
18,Integer Factoring,1,Integer Factoring,First Category Integer Factoring,199,,,1,1,$O(2^{n/2})$?,,,[- Euler's factorization method (1940)],Euler's factorization method,1940,-,,[],0,,,,,0,0,8,n: 8,$O(2^{n/2})$,988,$n$: number of bits in the integer,n,,,Word RAM,bits,3,n: 3,$O(n)$,constant number of values which require at most $O(n)$ bits,1,0,,0,,0,,0,0,,0,0,https://archive.org/details/numbertheoryitsh0000orey/page/59,whose running time depends on the size of smallest prime factor.,,,,,,,,,,Inf,1,,,,,,,,1,,,Numerical Analysis,TRUE
19,Integer Factoring,1,Integer Factoring,Second Category Integer Factoring,201,,,1,1,$O(e^{2 \sqrt{2} \sqrt{n\log n}})$,,,[https://www.ams.org/journals/mcom/1981-36-153/S0025-5718-1981-0595059-1/home.html Dixon's algorithm (1981)],Dixon's algorithm,1981,https://www.ams.org/journals/mcom/1981-36-153/S0025-5718-1981-0595059-1/home.html,,['John D. Dixon'],1,['Asymptotically fast factorization of integers'],,,,0,0,8,n: 8,$O(e^{2 \sqrt{2} \sqrt{n\log n}})$,,"$n$: number of bits in the integer
$B$: bound parameter",n,,,Word RAM,bits,3,"n: 3,
B: 5",$O(n+(B/\log B)^2)$?,There are $\pi(B) = O(B/\log B)$ primes in the factor base; need $\pi(B)+1=O(B/\log B)$ relations involving an integer (which doesn't need to be kept track of) and a $\pi(B)$-bit string of exponents. Also need $O(n)$ bits to perform other computations. Rest is irrelevant asymptotically,1,0,,0,,0,,0,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,2,,,Numerical Analysis,TRUE
19,Integer Factoring,1,Integer Factoring,Second Category Integer Factoring,202,,,1,1,$O(e^{\sqrt{2n\log n}})$,,,[https://www.ams.org/journals/bull/1931-37-10/S0002-9904-1931-05271-X/home.html Continued fraction factorization (CFRAC) (1931)],Continued fraction factorization (CFRAC),1931,https://www.ams.org/journals/bull/1931-37-10/S0002-9904-1931-05271-X/home.html,,"['D. H. Lehmer', 'R. E. Powers']",2,['On factoring large numbers'],,,,1,0,8,n: 8,$O(e^{\sqrt{2n\log n}})$,,"$n$: number of bits in the integer
$B$: bound parameter",n,,,Word RAM,bits,3,"n: 3,
B: 5",$O(n+(B/\log B)^2)$?,Same general approach as Dixon's algorithm,1,0,,0,,0,,0,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,3395.232193,1,,497271.0145,1,,27199045.33,1,,4,,,Numerical Analysis,TRUE
19,Integer Factoring,1,Integer Factoring,Second Category Integer Factoring,203,,,1,1,$O(e^{\sqrt{(1+o(1))n \log n}})$,,,[https://www.cs.umd.edu/users/gasarch/TOPICS/factoring/compare.pdf Quadratic sieve (1981)],Quadratic sieve,1981,https://www.cs.umd.edu/users/gasarch/TOPICS/factoring/compare.pdf,,['Carl Pomerance'],1,['Analysis and Comparison of Some Integer Factoring Algorithms'],,,,0,0,8,n: 8,"$O(e^{\sqrt{(1+o(1))n \log n}})$, under assumption about numbers in a sequence behaving randomly in a given range",,"$n$: number of bits in the integer
$B$: bound parameter",n,,,Word RAM,bits,3,"n: 3,
B: 5",$O(n+(B/\log B)^2)$?,Same general approach as Dixon's algorithm,1,0,,0,,0,,0,0,,0,0,(runtime depends on heuristic arguments),has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis,TRUE
19,Integer Factoring,1,Integer Factoring,Second Category Integer Factoring,204,,,1,1,$O(e^{\sqrt{(2+o(1))n \log n}})$,,,[https://www.ams.org/journals/mcom/1993-61-203/S0025-5718-1993-1182953-4/S0025-5718-1993-1182953-4.pdf Rational sieve (1993)],Rational sieve,1993,https://www.ams.org/journals/mcom/1993-61-203/S0025-5718-1993-1182953-4/S0025-5718-1993-1182953-4.pdf,,"['A. K. LENSTRA', 'H. W. LENSTRA, JR.', 'M. S. MANASSE', 'J. M. POLLARD']",4,['THE FACTORIZATION OF THE NINTH FERMAT NUMBER'],,,,0,0,8,n: 8,$O(e^{\sqrt{(2+o(1))n \log n}})$,,"$n$: number of bits in the integer
$B$: bound parameter",n,,,Word RAM,bits,3,"n: 3,
B: 5",$O(n+(B/\log B)^2)$?,Same general approach as Dixon's algorithm,1,0,,0,,0,,0,1,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis,TRUE
19,Integer Factoring,1,Integer Factoring,Second Category Integer Factoring,206,,,1,1,$O(2^{n/4})$,,,[https://www.ams.org/journals/mcom/2008-77-261/S0025-5718-07-02010-8/S0025-5718-07-02010-8.pdf Shanks's square forms factorization (SQUFOF) (2007)],Shanks's square forms factorization (SQUFOF),2007,https://www.ams.org/journals/mcom/2008-77-261/S0025-5718-07-02010-8/S0025-5718-07-02010-8.pdf,,"['JASON E. GOWER', 'SAMUEL S. WAGSTAFF, JR']",2,['SQUARE FORM FACTORIZATION'],,,,0,0,8,n: 8,$O(2^{n/4})$,986,$n$: number of bits in the integer,n,,,Word RAM,bits,3,n: 3,$O(n)$?,Constant number of $O(n)$-bit integers,1,0,,0,,0,,0,0,,0,0,,has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis,TRUE
20,LU Decomposition,1,Matrix LU Decomposition,Square Matrix LU Decomposition,208,,,1,1,$O(n^6)$?,,,[https://books.google.com/books/about/The_Theory_of_Matrices_in_Numerical_Anal.html?id=hCre109IpRcC Closed formula (1975)],Closed formula,1975,https://books.google.com/books/about/The_Theory_of_Matrices_in_Numerical_Anal.html?id=hCre109IpRcC,,['Alston Scott Householder'],1,['The theory of matrices in numerical analysis'],,,,0,0,6,"n: 7,
n^2: 6",$O(n^6)$,,$n$: dimension of square matrix,n^2,,1,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Derived: Uses a constant number of $n \times n$ auxiliary matrices,1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/LU_decomposition#Closed_formula

https://math.stackexchange.com/questions/4039150/closed-formula-for-ldu-decomposition

https://openlibrary.org/books/OL5908846M/The_theory_of_matrices_in_numerical_analysis","lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,9965,100351.2293,,,#DIV/0!,,,#DIV/0!,,3,,,Numerical Analysis,FALSE
20,LU Decomposition,2,Matrix LU Decomposition,Rectangular Matrix LU Decomposition,211,,,1,0,$O(n^3)$,,,[https://www.sciencedirect.com/science/article/pii/S1063520316300069 Randomized LU Decomposition (2016)],Randomized LU Decomposition,2016,https://www.sciencedirect.com/science/article/pii/S1063520316300069,,"['Gil Shabat', 'Yaniv Shmueli', 'Yariv Aizenbud', 'Amir Averbuch']",4,['Randomized LU decomposition'],,,,0,0,4.5,"n: 6,
mn: 4.5",$O(n^3)$,16,"$m$: number of rows in input matrix
$n$: number of columns in input matrix
$l$: number of columns chosen to use in the decomposition ($l \geq k$)
$k$: desired rank of decomposition",mn,,,Word RAM,words,3,"n: 3,
m: 3,
l: 3,
mn: 3",$\tilde{O}(nl + ml)$,Derived: Two intermediate auxiliary matrices of sizes $n \times l$ and $m \times l$ for the input matrix of size $m \times n$,1,0,,1,Monte Carlo,1,See Theorem 4.3 in original paper for error bound,0,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,1000000000,1,,,,,,,,3,There are 4 different algorithms in this paper,,Numerical Analysis,FALSE
20,LU Decomposition,2,Matrix LU Decomposition,Square Matrix LU Decomposition,214,,,1,1,$O(n^3)$,,,"[https://books.google.com/books?hl=en&lr=&id=1aAOdzK3FegC&oi=fnd&pg=PA1&dq=Teukolsky#v=onepage&q=Teukolsky&f=false Press, Teukolsky, Flannery (2007)]","Press, Teukolsky, Flannery",2007,https://books.google.com/books?hl=en&lr=&id=1aAOdzK3FegC&oi=fnd&pg=PA1&dq=Teukolsky#v=onepage&q=Teukolsky&f=false,,['William H. Press'],4,['Numerical Recipes 3rd Edition: The Art of Scientific Computing'],,,,0,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,16,$n$: dimension of square matrix,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$\tilde{O}(n)$,"Derived: The only auxiliary structure used is a list called ""vv"" that has one entry per row of the input matrix to store some sort of scaling metric",1,0,,0,,0,,1,0,,0,0,,"lower–upper (LU) decomposition or factorization factors a matrix as the product
 of a lower triangular matrix and an upper triangular matrix.",,,,,,,,,,9965,100351.2293,,,,,,,,3,,,Numerical Analysis,FALSE
21,Informed Search,2,,Informed Search,216,,,1,1,$O(b^d)$,,,[ Greedy Best-First Search (1959)],Greedy Best-First Search,1959,,,[],0,,1,1,https://www.cs.cmu.edu/afs/cs/project/jair/pub/volume28/coles07a-html/node11.html,1,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",$O(b^d)$,https://en.wikipedia.org/wiki/Breadth-first_search: Stores all generated nodes in memory,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Breadth-first_search,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Robotics,FALSE
21,Informed Search,2,,Informed Search,220,,,1,1,$O(b^d)$,,https://webdocs.cs.ualberta.ca/~holte/Publications/aaai11PeterYapFinal.pdf for experimental results,[https://webdocs.cs.ualberta.ca/~holte/Publications/aaai11PeterYapFinal.pdf Block A* (2011)],Block A*,2011,https://webdocs.cs.ualberta.ca/~holte/Publications/aaai11PeterYapFinal.pdf,,"['Peter Yap', 'Neil Burch', 'Rob Holte', 'Jonathan Schaeffer']",4,['Block A*: Database-Driven Search with Applications in Any-angle Path-Planning'],,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",$O(b^d)$,Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics,FALSE
21,Informed Search,2,,Informed Search,221,,,1,1,$O(b^d)$,,,[https://citeseerx.ist.psu.edu/pdf/77e9b970024bc5da2b726491823f7d617a303811 D* (1994)],D*,1994,https://citeseerx.ist.psu.edu/pdf/77e9b970024bc5da2b726491823f7d617a303811,,['Anthony Stentz'],1,['Optimal and Efficient Path Planning for Unknown and Dynamic Environments'],,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",$O(b^d)$,Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics,FALSE
21,Informed Search,2,,Informed Search,222,,,1,1,$O(b^d)$,,,[https://www.ri.cmu.edu/pub_files/pub4/ferguson_david_2006_3/ferguson_david_2006_3.pdf Field D* (2006)],Field D*,2006,https://www.ri.cmu.edu/pub_files/pub4/ferguson_david_2006_3/ferguson_david_2006_3.pdf,,"['Dave Ferguson', 'Anthony Stentz']",2,['Using Interpolation to Improve Path Planning: The Field D* Algorithm'],,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",$O(b^d)$,Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics,FALSE
21,Informed Search,2,,Informed Search,223,,,1,1,$O(b^d)$,,,[ Fringe (2005)],Fringe,2005,,,[],0,,,,,0,0,8,"b: 7,
d: 8",$O(b^d)$,,"$b$: branching factor (the average number of successors per state)
$d$: the depth of the solution (the shortest path)",d,,,Word RAM,words,8,"b: 7,
d: 8",$O(b^d)$,Stores all generated nodes in memory,1,0,,0,,0,,1,0,,0,0,,"Informed search tries to reduce the amount of search that must be done by making
 intelligent choices for the nodes that are selected for expansion.",,,,,,,,,,Inf,1,,,,,,,,1,,,Robotics,FALSE
22,String Search,2,Single String Search,Single String Search,236,,,1,1,$O(n/m)$,,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.13.9460&rep=rep1&type=pdf,[https://citeseerx.ist.psu.edu/pdf/d9912ea262986794e29e3f15e5f8930d42f2ced4 Tuned Boyer-Moore algorithm (1991)],Tuned Boyer-Moore algorithm,1991,https://citeseerx.ist.psu.edu/pdf/d9912ea262986794e29e3f15e5f8930d42f2ced4,,"['Andrew Hume', 'Daniel Sunday']",2,['Fast String Searching'],,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,20,"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,3,"m: 3,
s: 3,
m+n: 3",$O(m + s)$,https://www.cs.utexas.edu/users/moore/publications/fstrpos.pdf,0,1,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics,FALSE
23,Sequence Alignment,1,,"Edit sequence, global alignment",261,,,1,1,$O(mn)$,,,[https://www.nature.com/articles/srep01746 FOGSAA (2013)],FOGSAA,2013,https://www.nature.com/articles/srep01746,10.1038/srep01746,"['Angana Chakraborty', 'Sanghamitra Bandyopadhyay']",2,['FOGSAA: Fast Optimal Global Sequence Alignment Algorithm'],,,,0,0,5,"m: 3,
n: 3,
m+n: 5",$O(mn)$,20,"$n$, $m$: lengths of input strings; assume $n\geq m$",m+n,,,Word RAM,words,5,"n: 3,
m: 3,
m+n: 5",$O(mn)$?,"Upper bounded by runtime, though likely there's a better bound?",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics,FALSE
25,Line Clipping,1,Convex Polygonal Window,convex polygonal window,270,,,1,1,$O(n \log p)$,^ see above,^ see above,[https://www.sciencedirect.com/science/article/pii/0097849394900647 O(lg N) algorithm (1994)],O(lg N) algorithm,1994,https://www.sciencedirect.com/science/article/pii/0097849394900647,,['Václav Skala'],1,['O(lg N) line clipping algorithm in E^2'],376,0,https://www.sciencedirect.com/science/article/pii/0097849394900647,0,0,3,"n: 3,
p: 2",$O(n \log p)$,,"$n$: number of lines
$p$: number of edges on polygon",n,,,Word/Real RAM,words,1,n: 1,$O(1)$ auxiliary??,"Easily derived? ($O(1)$ per segment, space can be re-used)",1,0,,0,,0,,0,0,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,9.965,100.3512293,,19.93156857,0,,29.89735285,0,,6,,,Image Processing,FALSE
25,Line Clipping,1,Convex Polygonal Window,convex and non-convex polyhedral window,271,,,1,1,$O(np)$?,^ see above,^ see above,[https://onlinelibrary.wiley.com/doi/abs/10.1111/1467-8659.1510061 Skala (1996)],Skala,1996,https://onlinelibrary.wiley.com/doi/abs/10.1111/1467-8659.1510061,10.1111/1467-8659.1510061,['Václav Skala'],1,['An Efficient Algorithm for Line Clipping by Convex and Non-convex Polyhedra in E3'],,,,0,0,3,"n: 3,
p: 3",$O(np)$,,"$n$: number of lines
$p$: number of faces on polyhedron",n,,,Word/Real RAM,words,1,n: 1,$O(1)$?,"Easily derived? ($O(1)$ per segment, space can be re-used)",1,0,,0,,0,,0,1,,0,0,,"line clipping is the process of removing lines or portions of lines outside an area
 of interest. Typically; any line or part thereof which is outside of the viewing
 area is removed.",,,,,,,,,,1,1000,,,,,,,,6,,,Image Processing,FALSE
27,Multiplication,1,Multiplication,Multiplication,276,,,1,1,$O(n \log n \log\log n)$,^see above,^see above,[https://link.springer.com/article/10.1007/BF02242355 Schönhage–Strassen algorithm (1971)],Schönhage–Strassen algorithm,1971,https://link.springer.com/article/10.1007/BF02242355,10.1007/BF02242355,"['A. Sch√∂nhage', 'V. Strassen']",2,['Fast multiplication of large numbers'],,,,1,0,4.001,n: 4.001,$O(n \log n \log\log n)$,11.1,"$n$: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,$O(n)$ auxiliary?,Depends on DFT/FFT algorithm? but all vectors/numbers are of size $O(n)$ and there are a constant number of such objects,1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,32984,30.31772981,0.1163404644,86044249.58,11621.92715,0.3525022766,146555204661,6823367.361,0.6613134177,4,,,Numerical Analysis,FALSE
27,Multiplication,1,Multiplication,Multiplication,277,,,1,1,$O(n \log n 2^{O(\log*n)})$,^see above,^see above,[https://web.archive.org/web/20130425232048/http://www.cse.psu.edu/~furer/Papers/mult.pdf Furer's algorithm (2007)],Furer's algorithm,2007,https://web.archive.org/web/20130425232048/http://www.cse.psu.edu/~furer/Papers/mult.pdf,,['Martin Furer'],1,['FASTER INTEGER MULTIPLICATION'],,,,0,0,7,n: 7,$O(n \log n 2^{O(\log*n)})$,11,"$n$: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,$O(n)$ auxiliary?,Depends on DFT/FFT algorithm (though original source describes its own algorithm)? but all vectors/numbers are of size $O(n)$ and there are a constant number of such objects,1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,40816640,0.02449981184,,,,,,,,4,,,Numerical Analysis,FALSE
27,Multiplication,1,Multiplication,Multiplication,278,,,1,1,$O(n \log n 2^{O(\log*n)})$,^see above,^see above,[https://arxiv.org/abs/0801.1416 De (2008)],De,2008,https://arxiv.org/abs/0801.1416,,"['Anindya De', 'Piyush P Kurur', 'Chandan Saha', 'Ramprasad Saptharishi']",4,['Fast Integer Multiplication using Modular Arithmetic'],,,,0,0,7,n: 7,$O(n \log n 2^{O(\log*n)})$,11,"$n$: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,$O(n)$ auxiliary?,Depends on DFT/FFT algorithm? but all vectors/numbers are of size $O(n)$ and there are a constant number of such objects,1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,40816640,0.02449981184,,,,,,,,4,,,Numerical Analysis,FALSE
27,Multiplication,1,Multiplication,Multiplication,279,,,1,1,$O(n \log n)$,^see above,^see above,[https://hal.archives-ouvertes.fr/hal-02070778 Harvey; Hoeven (2019)],Harvey; Hoeven,2019,https://hal.archives-ouvertes.fr/hal-02070778,10.4007/annals.2021.193.2.4,"['David Harvey', 'Joris van der Hoeven']",2,['Integer multiplication in time $O(n\log n)$'],,,,1,4->5,4,n: 4,$O(n \log n)$,11,"$n$: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,$O(n)$ auxiliary??,[this one is kind of a mess to read but it seems like objects like polynomials/vectors and other numbers are of size $O(n)$ and there are constantly many?],1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,9965.784285,100.3433319,0.06007183934,19931568.57,50171.66594,0.146831135,29897352854,33447777.3,0.2452173271,4,,,Numerical Analysis,FALSE
27,Multiplication,1,Multiplication,Multiplication,280,,,1,1,$O(n \log n 2^{3 \log*n})$,^see above,^see above,[https://arxiv.org/abs/1407.3360 Harvey; Hoeven; Lecerf (2015)],Harvey; Hoeven; Lecerf,2015,https://arxiv.org/abs/1407.3360,,"['David Harvey', 'Joris van der Hoeven', 'Grégoire Lecerf']",3,['Even faster integer multiplication'],,,,0,0,7,n: 7,$O(n \log n 2^{3 \log*n})$,11,"$n$: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,$O(n)$ auxiliary??,Depends on DFT/FFT algorithm? but all vectors/numbers/objects seem to be of size $O(n)$ and there are a constant number of such objects,1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,79720,12.54390366,,,,,,,,4,,,Numerical Analysis,FALSE
27,Multiplication,1,Multiplication,Multiplication,281,,,1,1,$O(n \log n 2^{O(\log*n)})$,^see above,^see above,[https://hal.inria.fr/hal-01108166v1/document Covanov and Thomé (2015)],Covanov and Thomé,2015,https://hal.inria.fr/hal-01108166v1/document,,"['Svyatoslav Covanov', 'Emmanuel Thomé']",2,['Fast arithmetic for faster integer multiplication'],,,,0,0,7,n: 7,$O(n \log n 2^{O(\log*n)})$,11,"$n$: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,$O(n)$ auxiliary??,Depends on DFT/FFT algorithm? but all vectors/numbers/objects seem to be of size $O(n)$ and there are a constant number of such objects,1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,40816640,0.02449981184,,,,,,,,4,,,Numerical Analysis,FALSE
27,Multiplication,1,Multiplication,Multiplication,282,,,1,1,$O(n \log n 2^{3 \log*n})$,^see above,^see above,[https://arxiv.org/abs/1502.02800 Covanov and Thomé (2016)],Covanov and Thomé,2016,https://arxiv.org/abs/1502.02800,,"['Svyatoslav Covanov', 'Emmanuel Thomé']",2,['Fast integer multiplication using generalized Fermat primes'],,,,0,0,7,n: 7,$O(n \log n 2^{3 \log*n})$,11,"$n$: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,$O(n)$ auxiliary??,Depends on DFT/FFT algorithm? but all vectors/numbers/objects seem to be of size $O(n)$ and there are a constant number of such objects,1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,79720,12.54390366,,,,,,,,4,,,Numerical Analysis,FALSE
27,Multiplication,1,Multiplication,Multiplication,283,,,1,1,$O(n \log n 2^{2 \log*n})$,^see above,^see above,[https://arxiv.org/abs/1802.07932 Harvey; Hoeven; Lecerf (2018)],Harvey; Hoeven; Lecerf,2018,https://arxiv.org/abs/1802.07932,10.2140/obs.2019.2.293,"['David Harvey', 'Joris van der Hoeven']",2,['Faster integer multiplication using short lattice vectors'],,,,0,0,7,n: 7,$O(n \log n 2^{2 \log*n})$,11,"$n$: length of one of the integers, in bits",n,,,Word RAM?,bits,3,n: 3,$O(n)$ auxiliary??,Depends on DFT/FFT algorithm? but all vectors/numbers/objects seem to be of size $O(n)$ and there are a constant number of such objects,1,0,,0,,0,,0,0,,0,0,,"Multiplication is one of the four elementary mathematical operations of arithmetic;
with the others being addition; subtraction and division.",,,O(log*n) = 12,,,,,,,39860,25.08780733,,,,,,,,4,,,Numerical Analysis,FALSE
30,Mutual Exclusion,1,,,298,,,1,1,$O(n)$,^see above,(none),[http://lamport.azurewebsites.net/pubs/bakery.pdf Lamport's bakery algorithm (1974)],Lamport's bakery algorithm,1974,http://lamport.azurewebsites.net/pubs/bakery.pdf,,['Leslie Lamport'],1,['A New Solution of Dijkstra's Concurrent Programming Problem'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of processes,n,,,,communication variables?,3,n: 3,"$O(1)$ per process, $O(n)$ total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0,1,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000,1,,1000000,,,1000000000,,,6,,,Operating Systems,FALSE
30,Mutual Exclusion,1,,,299,,,1,1,$O(n)$,^see above,(none),[https://www.researchgate.net/publication/221235887_A_simple_solution_to_Lamport's_concurrent_programming_problem_with_linear_wait Szymanski's algorithm (1988)],Szymanski's algorithm,1988,https://www.researchgate.net/publication/221235887_A_simple_solution_to_Lamport's_concurrent_programming_problem_with_linear_wait,,['Boleslaw K. Szymanski'],1,['A simple solution to Lamport's concurrent programming problem with linear wait'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of processes,n,,,,communication variables?,3,n: 3,"$O(1)$ per process, $O(n)$ total?",http://cs.rpi.edu/~szymansk/papers/jerus.93.pdf,0,0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000,1,,,,,,,,6,,,Operating Systems,FALSE
30,Mutual Exclusion,1,,,300,,,1,1,$O(n)$,^see above,(none),[https://link.springer.com/chapter/10.1007/978-3-540-30186-8_5 Taubenfeld's black-white bakery algorithm (2004)],Taubenfeld's black-white bakery algorithm,2004,https://link.springer.com/chapter/10.1007/978-3-540-30186-8_5,10.1007/978-3-540-30186-8_5,['Gadi Taubenfeld'],1,"['The Black-White Bakery Algorithm and Related Bounded-Space, Adaptive, Local-Spinning and FIFO Algorithms']",,,,0,0,3,n: 3,$O(n)$,10,$n$: number of processes,n,,,,communication variables?,3,n: 3,"$O(1)$ per process, $O(n)$ total?",https://link.springer.com/content/pdf/10.1007/b101206.pdf,0,1,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000,1,,,,,,,,6,,,Operating Systems,FALSE
30,Mutual Exclusion,1,,,301,,,1,1,$O(n^{0.5})$,^see above,(none),[https://cseweb.ucsd.edu/classes/wi09/cse223a/p145-maekawa.pdf Maekawa's algorithm (1985)],Maekawa's algorithm,1985,https://cseweb.ucsd.edu/classes/wi09/cse223a/p145-maekawa.pdf,,['Mamoru Maekawa'],1,['A sqrt(N) Algorithm for Mutual Exclusion in Decentralized Systems'],,,,1,0,2.5,n: 2.5,$O(n^{0.5})$,6,$n$: number of processes,n,,,,communication variables?,3,n: 3,"$O(1)$ per process, $O(n)$ total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0,0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,31.6227766,31.6227766,0.3688745095,1000,1000,0.8738174229,31622.7766,31622.7766,1.565020906,6,,,Operating Systems,FALSE
30,Mutual Exclusion,0.001,,,302,,,1,1,$O(\log n)$? (originally this had $O(n)$),^see above,(none),[https://dl.acm.org/doi/abs/10.1145/58564.59295 Raymond's algorithm (1997)],Raymond's algorithm,1997,https://dl.acm.org/doi/abs/10.1145/58564.59295,10.1145/58564.59295,['Kerry Raymond'],1,['A tree-based algorithm for distributed mutual exclusion'],,,,0,0,2,n: 2,$O(\log n)$? (originally this had $O(n)$),,$n$: number of processes,n,,,,communication variables?,3,n: 3,"$O(1)$ per process, $O(n)$ total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0,0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000,1,,,,,,,,6,,,Operating Systems,FALSE
30,Mutual Exclusion,0.001,,,304,,,1,1,$O(n)$? (originally this had $O(\log n)$),^see above,(none),[https://dl.acm.org/doi/10.1145/6110.214406 Suzuki-Kasami's algorithm (1985)],Suzuki-Kasami's algorithm,1985,https://dl.acm.org/doi/10.1145/6110.214406,10.1145/6110.214406,"['Ichiro Suzuki', 'Tadao Kasami']",2,['A distributed mutual exclusion algorithm'],2,1,,1,6->7,3,n: 3,$O(n)$? (originally this had $O(\log n)$),,$n$: number of processes,n,,,,communication variables?,3,n: 3,"$O(1)$ per process, $O(n)$ total?",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.135.825&rep=rep1&type=pdf,0,0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,9.965,100.3512293,,19.93156857,0,,29.89735285,0,,6,,,Operating Systems,FALSE
45,Shown Surface Determination,1,,,385,,0,0,1,$O(n \log(n)+np)$,"??? I think there is not really a ""good sense"" of average case distribution here since real-world images should make sense","(none, though http://medialab.di.unipi.it/web/IUM/Waterloo/node64.html is a good one for runtimes)",[https://www.cs.drexel.edu/~david/Classes/Papers/p443-newell.pdf Painter's algorithm/Newell's algorithm (1972)],Painter's algorithm/Newell's algorithm,1972,https://www.cs.drexel.edu/~david/Classes/Papers/p443-newell.pdf,,"['M.E. Newell', 'R.G. Newell', 'T.L. Sancha ']",3,['A Solution to the Hidden Surface Problem'],,,,0,0,4,"n: 4,
p: 3",$O(n \log(n)+np)$,,"$n$: number of polygons
$p$: number of pixels in viewport",n,,,Word RAM?,words?,3,"n: 3,
p: 3",$O(p+n)$,(can be easily derived),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
45,Shown Surface Determination,1,,,386,,0,0,1,$O(np)$,^see above,(none),[https://dl.acm.org/doi/book/10.5555/905316?dl=ACM Warnock's algorithm (1969)],Warnock's algorithm,1969,https://dl.acm.org/doi/book/10.5555/905316?dl=ACM,,['John Edward Warnock'],1,['A hidden surface algorithm for computer generated halftone pictures'],,,,1,0,3,"n: 3,
p: 3",$O(np)$,,"$n$: number of polygons
$p$: number of pixels in viewport",n,,,Word RAM?,words?,3,"n: 3,
p: 3",$O(p+n)$?,(can be easily derived?),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
45,Shown Surface Determination,1,,,387,,0,0,1,$O(np)$,^see above,(none),[https://www.sciencedirect.com/science/article/abs/pii/0146664X82901691 Ray tracing (1982)],Ray tracing,1982,https://www.sciencedirect.com/science/article/abs/pii/0146664X82901691,,['Scott D Roth'],1,['Ray casting for modeling solids'],,,,0,0,3,"n: 3,
p: 3",$O(np)$,,"$n$: number of polygons
$p$: number of pixels in viewport",n,,,Word RAM?,words?,3,"n: 3,
p: 3",$O(p+n)$?,(can be easily derived?),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
45,Shown Surface Determination,0.001,,,388,,0,0,1,$O(n^2+p)$? (previously said $O(n^2 \log n)$),^see above,(none),[https://apps.dtic.mil/sti/citations/AD0700375 Binary space partitioning (BSP) (1969)],Binary space partitioning (BSP),1969,https://apps.dtic.mil/sti/citations/AD0700375,,"['Schumacker, Robert A.', 'Brand, Brigitta', 'Gilliland, Maurice G.', 'Sharp, Werner H.']",4,['Study for Applying Computer-generated Images to Visual Simulation'],,,,1,0,5,"n: 5,
p: 3",$O(n^2+p)$?,,"$n$: number of polygons
$p$: number of pixels in viewport",n,,,Word RAM?,words?,5,"n: 5,
p: 3",$O(n^2+p)$?,(can be easily derived?),1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Binary_space_partitioning

http://library.msri.org/books/Book52/files/29toth.pdf

(6.856 Spring 2020 Lecture 1)",,,,,,,,,,,,,,,,,,,,4,,,Image Processing,FALSE
45,Shown Surface Determination,1,,,389,,0,0,1,$O(np)$,^see above,(none),[http://isgwww.cs.uni-magdeburg.de/graphics/misc/Wolfgang_Stra%C3%9Fer_Schnelle_Kurven-_und_Flaechendarstellung_auf_grafischen_Sichtgeraeten.pdf Z-buffering (1974)],Z-buffering,1974,http://isgwww.cs.uni-magdeburg.de/graphics/misc/Wolfgang_Stra%C3%9Fer_Schnelle_Kurven-_und_Flaechendarstellung_auf_grafischen_Sichtgeraeten.pdf,,['Dipl.-lng. Wolfgang Straßer'],1,['Schnelle Kurven- und Flächendarstellung auf grafischen Sichtgeräten',,,,1,4->6,3,"n: 3,
p: 3",$O(np)$,,"$n$: number of polygons
$p$: number of pixels in viewport",n,,,Word RAM?,words?,3,"n: 3,
p: 3",$O(p+n)$,"https://www.geeksforgeeks.org/z-buffer-depth-buffer-method/#:~:text=Z%2Dbuffer%2C%20which%20is%20also,pixels%20times%20number%20of%20objects.",0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Image Processing,FALSE
45,Shown Surface Determination,1,,,390,,0,0,1,$O(E+p)$?,^see above,(none),[ S-buffer/Scanline Rendering (1980)],S-buffer/Scanline Rendering,1980,,,[],0,,,,,0,0,3,"n: 3,
p: 3,
E: 3",$O(E+p)$,,"$n$: number of polygons
$p$: number of pixels in viewport
$E$: total number of edges across all polygons",n,,,Word RAM?,words?,3,"n: 3,
p: 3",$O(p+n)$?,(can be easily derived?),1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Scanline_rendering,,,,,,,,,,,1000,,,,,,,,,4,,,Image Processing,FALSE
47,Eigenvalues (Iterative Methods),2,,Eigenpair with the Largest Eigenvalue,397,,0,1,1,$O(n^2)$,,,[https://onlinelibrary.wiley.com/doi/pdf/10.1002/zamm.19290090105?casa_token=xSwK6PkV010AAAAA:j_1-JKs0GG-KuwUUyM_dIt8kmOa5z6lvp_GABgDryAYxKdYvChyNGA9VA5CZLyAurWOVYPRn45geRTFk Power Iteration (1929)],Power Iteration,1929,https://onlinelibrary.wiley.com/doi/pdf/10.1002/zamm.19290090105?casa_token=xSwK6PkV010AAAAA:j_1-JKs0GG-KuwUUyM_dIt8kmOa5z6lvp_GABgDryAYxKdYvChyNGA9VA5CZLyAurWOVYPRn45geRTFk,10.1002/zamm.19290090105,"['R. V. Mises', 'H. Pollaczek-Geiringer']",2,['Praktische Verfahren der Gleichungsaufl√∂sung .'],1,1,https://en.wikipedia.org/wiki/Power_iteration,1,0,3,"n: 5,
n^2: 3",$O(n^2)$,10,$n$: dimension of matrix,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$O(n)$,Derived: Stores an auxiliary vector,1,0,,0,,0,,0,0,,0,0,,,,,,1000,,1000000,,1000000000,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Numerical Analysis,FALSE
64,Delaunay Triangulation,1,,,527,,,1,1,$O(n \log n)$,,,[http://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf Fortune (1987)],Fortune,1987,http://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf,,['Steven Fortune'],1,['A Sweepline Algorithm for Voronoi Diagrams'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of vertices,n,,,Real RAM?,words,3,n: 3,$O(n)$,See Fortune's Algorithm (Voronoi diagrams); Voronoi diagram gives us $O(n)$ circumcenters which can be used to find the $O(n)$ triangles,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics,FALSE
80,Maximum Subarray Problem,1,1D Maximum Subarray,1D Maximum Subarray,627,,,1,1,$O(n)$,^see above,^see above,[https://dl.acm.org/doi/10.1093/comjnl/32.2.122 Bird (1989)],Bird,1989,https://dl.acm.org/doi/10.1093/comjnl/32.2.122,10.1093/comjnl/32.2.122,['R. S. Bird'],1,['Algebraic Identities for Program Calculation'],,,,0,0,3,n: 3,$O(n)$,10,$n$: length of array,n,,,???,???,1,n: 1,$O(1)$ auxiliary,keep track of current tail sum and best sum,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,3,,,Combinatorics,FALSE
120,Integer Relation,1,Integer Relation,Integer Relation,923,,,1,1,$O(n^3(n+k))$,,,[https://epubs.siam.org/doi/pdf/10.1137/0218059 HJLS algorithm (1986)],HJLS algorithm,1986,https://epubs.siam.org/doi/pdf/10.1137/0218059,10.1137/0218059,"['J. Hastad', 'B. Just', 'J. C. Lagarias', 'C. P. Schnorr']",4,['Polynomial Time Algorithms for Finding Integer Relations among Real Numbers'],,,,0,0,7,"n: 7,
k: 3",$O(n^3(n+k))$,,"$n$: dimensionality of vector
$k$: relation size parameter",n,https://epubs.siam.org/doi/pdf/10.1137/0218059,0,bit complexity,bits,5,n: 5,$O(n^2)$ -- but requires infinite precision with large $n$ or else it becomes unstable,"Derived: Store Gram-Schmidt basis vectors $b_i$ ($n$ $n$-dimensional vectors) and Gram-Schmidt numbers $\mu_{i,j}$ ($i$ and $j$ both from $1$ to $n$), not sure how to take into account the ""bit complexity"" part",1,0,,0,,0,,0,0,,0,0,,"Given a vector in n-space, is there a non-zero integral vector that is orthogonal to that vector?",,,,,,,,,,1000000000,,,,,,,,,3,,,Numerical Analysis,FALSE
147,Deadlock Avoidance,1,,Dining Philosophers Problem,1017,,0,0,1,$O(2^n)$,,,[https://books.google.com/books?id=pl4VJKQlcG4C&pg=PA323#v=onepage&q&f=false Resource hierarchy solution (1965)],Resource hierarchy solution,1965,https://books.google.com/books?id=pl4VJKQlcG4C&pg=PA323#v=onepage&q&f=false,,"['J. Díaz', 'I. Ramos']",2,['Formalization of Programming Concepts'],2,1,,1,0,8,n: 8,$O(2^n)$,,$n$: number of philosophers,n,,,,,3,n: 3,$O(n)$,each fork has a mutex and there are $O(n)$ forks,1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Dining_philosophers_problem#Resource_hierarchy_solution

http://www.usingcsp.com/cspbook.pdf",,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Operating Systems,FALSE
147,Deadlock Avoidance,1,,Dining Philosophers Problem,1018,,0,0,1,$O(2^n)$,,,[https://books.google.com/books?id=pl4VJKQlcG4C&pg=PA323#v=onepage&q&f=false Arbitrator solution (1965)],Arbitrator solution,1965,https://books.google.com/books?id=pl4VJKQlcG4C&pg=PA323#v=onepage&q&f=false,,"['J. Díaz', 'I. Ramos']",2,['Formalization of Programming Concepts'],,,,0,0,8,n: 8,$O(2^n)$,,$n$: number of philosophers,n,,,,,1,n: 1,$O(1)$,"adding 1 arbitrator, which is of constant size",1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Dining_philosophers_problem#Arbitrator_solution

http://www.usingcsp.com/cspbook.pdf",,,,,,,,,,,Inf,,,,,,,,,1,,,Operating Systems,FALSE
61,The Traveling-Salesman Problem,0.001,,Minimum TSP,491,,,1,0,$O(V^2 2^V)$?,,,[https://www.jstor.org/stable/j.ctt7s8xg Applegate et al. (Concorde TSP Solver) (2006)],Applegate et al. (Concorde TSP Solver),2006,https://www.jstor.org/stable/j.ctt7s8xg,,"['David L. Applegate', 'Robert E. Bixby', 'Vašek Chvatál', 'William J. Cook]",4,['The Traveling Salesman Problem: A Computational Study'],,,,0,0,7,"V: 7,
E: 3",$O(V^2 2^V)$?,1000,"$V$: number of vertices
$E$: number of edges",V,,,,,#VALUE!,,,,,,,0,,1,,1,0,,0,0,https://cs.stackexchange.com/questions/16331/concorde-time-efficiency,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
61,The Traveling-Salesman Problem,2,,Approximate TSP,494,Nearest neighbor search,,1,0,$O(V^2)$,,,[https://link.springer.com/chapter/10.1007/978-1-4020-9688-4_3 Rosenkrantz; D. J.; Stearns; R. E.; Lewis; P. M. (1974)],Rosenkrantz; D. J.; Stearns; R. E.; Lewis; P. M.,1974,https://link.springer.com/chapter/10.1007/978-1-4020-9688-4_3,10.1007/978-1-4020-9688-4_3,"['Daniel J. Rosenkrantz', 'Richard E. Stearns', 'Philip M. Lewis']",3,['An analysis of several heuristics for the\xa0traveling salesman problem'],,,,0,0,5,V: 5,$O(V^2)$,10,"$V$: number of vertices
$E$: number of edges",V,https://link.springer.com/chapter/10.1007/978-1-4020-9688-4_3,0,Word RAM,words,1,V: 1,$O(1)$,Derived: Nearest neighbor search can be done with constant auxiliary space,1,0,,0,,1,$\frac{1}{2}\log n + \frac{1}{2}$,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
61,The Traveling-Salesman Problem,2,,Approximate TSP,495,Heuristic,,1,0,$O(V^2)$,,,[https://www.cs.princeton.edu/~bwk/btl.mirror/tsp.pdf Lin–Kernighan (1981)],Lin–Kernighan,1981,https://www.cs.princeton.edu/~bwk/btl.mirror/tsp.pdf,,"['S. Lin', 'B. W. Kernighan']",2,['An Effective Heuristic Algorithm for the Traveling-Salesman Problem'],,,,0,0,5,V: 5,$O(V^2)$,10,"$V$: number of vertices
$E$: number of edges",V,https://doi.org/10.1016/S0377-2217(99)00284-2,0,Word RAM,words,3,V: 3,$O(V)$,https://doi.org/10.1016/S0377-2217(99)00284-2,0,0,,0,,1,,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
65,De Novo Genome Assembly,1,De Novo Genome Assembly,De Novo Genome Assembly,534,,,1,0,$O(n^2)$,,,[ Overlap Layout Consensus (1987)],Overlap Layout Consensus,1987,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,"$n$: sum of lengths of reads
$f$: number of input sequences",n,,,Word RAM,words,5,n: 5,$O(n^2)$?,"Computes and stores all acceptable overlaps among all fragment pairs, along with detailed information regarding alignment, during one of the steps. Overlap graph has size at most $O(n^2)$, layout and consensus should not take up more than $O(n^2)$ space",1,0,,0,,1,,0,0,,0,0,https://www.cs.jhu.edu/~langmea/resources/lecture_notes/assembly_olc.pdf,,,,,,,,,,,1000000,,,,,,,,,4,,,Bioinformatics,FALSE
65,De Novo Genome Assembly,1,De Novo Genome Assembly,De Novo Genome Assembly,537,,,1,0,$O(n\log n)$,,,[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC321006/ Greedy SEQAID (1984)],Greedy SEQAID,1984,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC321006/,10.1093/nar/12.1part1.307,"['Hannu Peltola', 'Hans S√∂derlund', 'Esko Ukkonen']",3,['SEQAID: a DNA sequence assembling program based on a mathematical model'],,,,0,0,5,n: 5,$O(n^2)$,20,"$n$: sum of lengths of reads
$f$: number of input sequences",n,,,Word RAM,words,5,n: 5,$O(n^2)$?,"Computes and stores all acceptable overlaps among all fragment pairs, along with detailed information regarding alignment, during one of the steps",1,0,,0,,1,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Bioinformatics,FALSE
82,Ray Tracing,0,,,640,,,0,0,$O(n^2)$,,,[ Dürer rendering algorithm (1956)],Dürer rendering algorithm,1956,,,[],0,,,,,1,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
82,Ray Tracing,0,,,641,,,0,0,$O(n^2)$,,,[https://dl.acm.org/doi/10.1145/1468075.1468082 Appel's algorithm 1968 (1968)],Appel's algorithm 1968,1968,https://dl.acm.org/doi/10.1145/1468075.1468082,10.1145/1468075.1468082,['Arthur Appel'],1,['Some techniques for shading machine renderings of solids'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
82,Ray Tracing,0,,,642,,,0,0,$O(n^2)$,,,[https://dl.acm.org/doi/10.1145/358876.358882 Whitted's algorithm 1979 (1979)],Whitted's algorithm 1979,1979,https://dl.acm.org/doi/10.1145/358876.358882,10.1145/358876.358882,['Turner Whitted'],1,['An improved illumination model for shaded display'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
82,Ray Tracing,0,,,643,,,0,0,$O(n^2)$,,,[https://www.academia.edu/814419/A_New_Parallel_Algorithm_Provided_by_a_Computation_Time_Model J.-C. Nebel 1998 (1998)],J.-C. Nebel 1998,1998,https://www.academia.edu/814419/A_New_Parallel_Algorithm_Provided_by_a_Computation_Time_Model,,['Jean-Christophe Nebel'],1,['A New Parallel Algorithm Provided by a Computation Time Model'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,1,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
82,Ray Tracing,0,,,644,,,0,0,$O(n^2)$,,,[ A. Chalmers; T. Davis; and E. Reinhard 2002 (2002)],A. Chalmers; T. Davis; and E. Reinhard 2002,2002,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,1,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,717,,,0,0,$O(n^3)$,,,[https://www.ri.cmu.edu/pub_files/pub4/moravec_hans_1980_1/moravec_hans_1980_1.pdf Moravec's algorithm 1980 (1980)],Moravec's algorithm 1980,1980,https://www.ri.cmu.edu/pub_files/pub4/moravec_hans_1980_1/moravec_hans_1980_1.pdf,,['Hans P. Moravec'],1,['Obstacle Avoidance and Navigation in the Real World by a Seeing Robot Rover',,,,1,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,https://www.ijedr.org/papers/IJEDR1404047.pdf,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,719,,,0,0,$O(n^2 \log^2 n)$,,,[ Förstner algorithm 1987 (1987)],Förstner algorithm 1987,1987,,,[],0,,,,,1,0,5.02,n: 5.02,$O(n^2 \log^2 n)$,22,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,9931685,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,721,,,0,0,$O(n^3)$,,,[https://www.osapublishing.org/josaa/abstract.cfm?uri=josaa-5-7-1136 J. J. Koenderink and W. Richards 1988 (1988)],J. J. Koenderink and W. Richards 1988,1988,https://www.osapublishing.org/josaa/abstract.cfm?uri=josaa-5-7-1136,,"['Jan J. Koenderink', 'Whitman Richards']",2,['Two-dimensional curvature operators'],,,,0,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,722,,,0,0,$O(n^2)$,,,[ Lindeberg (1994) (1994)],Lindeberg (1994),1994,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,723,,,0,0,$O(n^2)$,,,[https://link.springer.com/article/10.1023/A:1008045108935 Lindeberg (1998) (1998)],Lindeberg (1998),1998,https://link.springer.com/article/10.1023/A:1008045108935,10.1023/A:1008045108935,['Tony Lindeberg'],1,['Feature Detection with Automatic Scale Selection'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,724,,,0,0,$O(n^2)$,,,[https://www.robots.ox.ac.uk/~vgg/research/affine/det_eval_files/mikolajczyk_pami2004.pdf K. Mikolajczyk; K. and C. Schmid LoG 2004 (2004)],K. Mikolajczyk; K. and C. Schmid LoG 2004,2004,https://www.robots.ox.ac.uk/~vgg/research/affine/det_eval_files/mikolajczyk_pami2004.pdf,,"['Krystian Mikolajczyk', 'Cordelia Schmid']",2,['A Performance Evaluation of Local Descriptors'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,725,,,0,0,$O(n^2)$,,,[https://www.cs.ubc.ca/~lowe/papers/ijcv04.pdf Lowe (2004) (2004)],Lowe (2004),2004,https://www.cs.ubc.ca/~lowe/papers/ijcv04.pdf,,['David G. Lowe'],1,['Distinctive Image Features from Scale-Invariant Keypoints',,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,726,,,0,0,$O(n^2)$,,,[ T. Lindeberg and J. Garding (1997) (1997)],T. Lindeberg and J. Garding (1997),1997,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,727,,,0,0,$O(n^2)$,,,[ Lindeberg 2005 (2005)],Lindeberg 2005,2005,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,728,,,0,0,$O(n^2)$,,,[ The Wang and Brady corner detection algorithm 1995 (1995)],The Wang and Brady corner detection algorithm 1995,1995,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,730,,,0,0,$O(n^2 \log^2 n)$,,,[ The Trajkovic and Hedley corner detector 1998 (1998)],The Trajkovic and Hedley corner detector 1998,1998,,,[],0,,,,,0,0,5.02,n: 5.02,$O(n^2 \log^2 n)$,22,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,9931685,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,731,,,0,0,$O(n^3)$,,,[https://www.edwardrosten.com/work/rosten_2006_machine.pdf FAST E. Rosten and T. Drummond 2006 (2006)],FAST E. Rosten and T. Drummond 2006,2006,https://www.edwardrosten.com/work/rosten_2006_machine.pdf,,"['Edward Rosten', 'Tom Drummond']",2,['Machine learning for high-speed corner detection'],,,,0,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,732,,,0,0,$O(n^2)$,,,[https://www.mitpressjournals.org/doi/abs/10.1162/evco.2008.16.4.483?journalCode=evco&mobileUi=0& Trujillo and Olague 2008 (2008)],Trujillo and Olague 2008,2008,https://www.mitpressjournals.org/doi/abs/10.1162/evco.2008.16.4.483?journalCode=evco&mobileUi=0&,10.1162/evco.2008.16.4.483,"['Leonardo Trujillo', 'Gustavo Olague']",2,['Automated Design of Image Operators that Detect Interest Points'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,733,,,0,0,$O(n^2)$,,,[https://citeseerx.ist.psu.edu/pdf/117d576d72515e900e6fc5a4a0e7f1d0142a8924 Geert Willems; Tinne Tuytelaars and Luc van Gool (2008) (2008)],Geert Willems; Tinne Tuytelaars and Luc van Gool (2008),2008,https://citeseerx.ist.psu.edu/pdf/117d576d72515e900e6fc5a4a0e7f1d0142a8924,,"['Geert Willems', 'Tinne Tuytelaars', 'Luc Van Gool']",3,['An Efficient Dense and Scale-Invariant Spatio-Temporal Interest Point Detector'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
93,Feature Detection,0,,Corner Detection,734,,,0,0,$O(n^2)$,,,"[ Tao Luo, Zaifeng Shi and Pumeng Wang (2019)]","Tao Luo, Zaifeng Shi and Pumeng Wang",2019,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
94,Feature Detection,0,,Blob Detection,735,,,0,0,$O(n^2)$,,,[ T. Lindeberg DoG 2012 (2012)],T. Lindeberg DoG 2012,2012,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
94,Feature Detection,0,,Blob Detection,736,,,0,0,$O(n \log n)$,,,[ T. Lindeberg DoG 2015 (2015)],T. Lindeberg DoG 2015,2015,,,[],0,,,,,1,4->5,4,n: 4,$O(n \log n)$,11,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,3,,,Image Processing,FALSE
94,Feature Detection,0,,Blob Detection,737,,,0,0,$O(n^3)$,,,[ SIFT Algorithm Lowe 2004 (2004)],SIFT Algorithm Lowe 2004,2004,,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
94,Feature Detection,0,,Blob Detection,738,,,0,0,$O(n^3)$,,,[ Hessain Determinant Lindeberg 1994 (1994)],Hessain Determinant Lindeberg 1994,1994,,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
94,Feature Detection,0,,Blob Detection,739,,,0,0,$O(n^3)$,,,[ Hessain Determinant Lindeberg 1998 (1998)],Hessain Determinant Lindeberg 1998,1998,,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
94,Feature Detection,0,,Blob Detection,740,,,0,0,$O(n^2)$,,,[ SURF Descriptor 2006 (2006)],SURF Descriptor 2006,2006,,,[],0,,,,,1,3->4,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
94,Feature Detection,0,,Blob Detection,741,,,0,0,$O(n^3)$,,,[ Hessian-Laplace Mikolajczyk and Schmid 2004 (2004)],Hessian-Laplace Mikolajczyk and Schmid 2004,2004,,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
94,Feature Detection,0,,Blob Detection,742,,,0,0,$O(n^2)$,,,[ Spatio-temporal Geert Willems; Tinne Tuytelaars and Luc van Gool (2008) (2008)],Spatio-temporal Geert Willems; Tinne Tuytelaars and Luc van Gool (2008),2008,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
94,Feature Detection,0,,Blob Detection,743,,,0,0,$O(n^3)$,,,[ Lindeberg's watershed-based grey-level blob detection algorithm 1991 (1991)],Lindeberg's watershed-based grey-level blob detection algorithm 1991,1991,,,[],0,,,,,1,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
94,Feature Detection,0,,Blob Detection,744,,,0,0,$O(n^2 \log^3 n)$,,,[ Maximally stable extremal regions Matas 2002 (2002)],Maximally stable extremal regions Matas 2002,2002,,,[],0,,,,,0,0,5.03,n: 5.03,$O(n^2 \log^3 n)$,23,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Image Processing,FALSE
94,Feature Detection,0,,Blob Detection,745,,,0,0,$O(n^3)$,,,[ A. Baumberg. 2000 (2000)],A. Baumberg. 2000,2000,,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
94,Feature Detection,0,,Blob Detection,746,,,0,0,$O(n^2 \log \log n)$,,,[ Y. Dufournaud; C. Schmid; and R. Horaud 2000 (2000)],Y. Dufournaud; C. Schmid; and R. Horaud 2000,2000,,,[],0,,,,,1,0,5.001,n: 5.001,$O(n^2 \log \log n)$,20.1,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Image Processing,FALSE
94,Feature Detection,0,,Blob Detection,747,,,0,0,$O(n^3)$,,,[ local scale-invariant Lowe 1999 (1999)],local scale-invariant Lowe 1999,1999,,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
94,Feature Detection,0,,Blob Detection,748,,,0,0,$O(n^3)$,,,[ T. Tuytelaars and L. Van Gool 2000 (2000)],T. Tuytelaars and L. Van Gool 2000,2000,,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
95,Culling,0,,Culling,749,,,0,0,$O(n^2)$,,,[ view frustum culling (2008)],view frustum culling,2008,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
95,Culling,0,,Culling,750,,,0,0,$O(n^2)$,,,[ Sector-Based Culling (1991)],Sector-Based Culling,1991,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
95,Culling,0,,Culling,751,,,0,0,$O(n^2)$,,,[ Occlusion Culling (1986)],Occlusion Culling,1986,,,[],0,,,,,1,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
95,Culling,0,,Culling,752,,,0,0,$O(n^2)$,,,[ Contribution Culling (1987)],Contribution Culling,1987,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
103.1,Texture Synthesis,0,,Texture Synthesis,814,,,0,0,$O(n^3)$,,,[https://dl.acm.org/doi/abs/10.1145/882262.882264 Kwatra 2003 (2003)],Kwatra 2003,2003,https://dl.acm.org/doi/abs/10.1145/882262.882264,10.1145/882262.882264,"['Vivek Kwatra', 'Arno Sch√∂dl', 'Irfan Essa', 'Greg Turk', 'Aaron Bobick']",5,['Graphcut textures: image and video synthesis using graph cuts'],,,,0,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
103.1,Texture Synthesis,0,,Texture Synthesis,815,,,0,0,$O(n^3)$,,,[ CNN Based Gatys; Leon A 2001 (2001)],CNN Based Gatys; Leon A 2001,2001,,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
105,Texture Mapping,0,,Diffuse Reflection,818,,,0,0,$O(k n^2)$,,,[ P.Hanrahan and W.Krueger 1993 (1993)],P.Hanrahan and W.Krueger 1993,1993,,,[],0,,,,,0,0,5,"n: 5,
k: 3",$O(k n^2)$,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Image Processing,FALSE
105,Texture Mapping,0,,Diffuse Reflection,819,,,0,0,$O(k^3 n)$,,,[ H.W.Jensen 2001 (2001)],H.W.Jensen 2001,2001,,,[],0,,,,,0,0,3,"k: 6,
n: 3",$O(k^3 n)$,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Image Processing,FALSE
105,Texture Mapping,0,,Diffuse Reflection,820,,,0,0,$O(k n^2)$,,,[ He; X. D.; Torrance; K. E.; Sillion; 1991 (1991)],He; X. D.; Torrance; K. E.; Sillion; 1991,1991,,,[],0,,,,,0,0,5,"k: 3,
n: 5",$O(k n^2)$,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Image Processing,FALSE
105,Texture Mapping,0,,Diffuse Reflection,821,,,0,0,$O(k n^2)$,,,[ Kajiya; J. Anisotropic Reflection Models 1985 (1985)],Kajiya; J. Anisotropic Reflection Models 1985,1985,,,[],0,,,,,0,0,5,"k: 3,
n: 5",$O(k n^2)$,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Image Processing,FALSE
105,Texture Mapping,0,,Diffuse Reflection,822,,,0,0,$O(k^3 n^2)$,,,"[ Nakamae; E.; Kaneda; K.; Okamoto; T.; and
Nishita 1990 (1990)]","Nakamae; E.; Kaneda; K.; Okamoto; T.; and
Nishita 1990",1990,,,[],0,,,,,1,0,5,"k: 6,
n: 5",$O(k^3 n^2)$,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Image Processing,FALSE
105,Texture Mapping,0,,Diffuse Reflection,823,,,0,0,$O(k n^2)$,,,[ Cabral; B.; Max; N.; and Springmeyer; R 1990 (1990)],Cabral; B.; Max; N.; and Springmeyer; R 1990,1990,,,[],0,,,,,1,2->3,5,"k: 3,
n: 5",$O(k n^2)$,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Image Processing,FALSE
105,Texture Mapping,0,,Diffuse Reflection,824,,,0,0,$O(k n^2)$,,,[ Westin; S. H.; Arvo; J. R.; and Torrance; K. E 1992 (1992)],Westin; S. H.; Arvo; J. R.; and Torrance; K. E 1992,1992,,,[],0,,,,,0,0,5,"k: 3,
n: 5",$O(k n^2)$,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Image Processing,FALSE
106,Texture Mapping,0,,Specular Reflection,825,,,0,0,$O(n^3)$,,,[ Phong (1971)],Phong,1971,,,[],0,,,,,1,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
106,Texture Mapping,0,,Specular Reflection,826,,,0,0,$O(n^3)$,,,[ Blinn–Phong (1977)],Blinn–Phong,1977,,,[],0,,,,,9,9,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Image Processing,FALSE
106,Texture Mapping,0,,Specular Reflection,827,,,0,0,$O(n^2)$,,,[ Cook–Torrance (microfacets) (1973)],Cook–Torrance (microfacets),1973,,,[],0,,,,,1,3->4,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Image Processing,FALSE
106,Texture Mapping,0,,Specular Reflection,828,,,0,0,$O(n^{1.67} \log^2 n)$,,,[ Ward anisotropic (1989)],Ward anisotropic,1989,,,[],0,,,,,1,0,4.68,n: 4.68,$O(n^{1.67} \log^2 n)$,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Image Processing,FALSE
106,Texture Mapping,0,,Specular Reflection,829,,,0,0,$O(n^2 \log n)$,,,[ Hanrahan–Krueger (1995)],Hanrahan–Krueger,1995,,,[],0,,,,,1,0,5.01,n: 5.01,$O(n^2 \log n)$,21,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Image Processing,FALSE
108,Image Segmentation,0,,,838,,,0,0,$O(n^2)$,,,[ Linda G. Shapiro and George C. Stockman (2001) (2001)],Linda G. Shapiro and George C. Stockman (2001),2001,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,839,,,0,0,$O(n^2)$,,,[ Recursive Region Splitting (1978)],Recursive Region Splitting,1978,,,[],0,,,,,1,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,840,,,0,0,$O(n \log n)$,,,[ Barghout; Lauren Visual Taxometric approach (2014)],Barghout; Lauren Visual Taxometric approach,2014,,,[],0,,,,,0,0,4,n: 4,$O(n \log n)$,11,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,841,,,0,0,$O(n \log n)$,,,[ Dual clustering - Guberman (2012)],Dual clustering - Guberman,2012,,,[],0,,,,,0,0,4,n: 4,$O(n \log n)$,11,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,842,,,0,0,$O(n^2)$,,,[ R. Nock and F. Nielsen Statistical Region Merging (2004)],R. Nock and F. Nielsen Statistical Region Merging,2004,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,843,,,0,0,$O(n^2)$,,,[ Kass; Witkin and Terzopoulos (1987)],Kass; Witkin and Terzopoulos,1987,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,844,,,0,0,$O(n \log n)$,,,[ Chen's lambda-connected segmentation (1991)],Chen's lambda-connected segmentation,1991,,,[],0,,,,,1,4->5,4,n: 4,$O(n \log n)$,11,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,845,,,0,0,$O(n^2)$,,,[ S.L. Horowitz and T. Pavlidis - directed split and merge (1974)],S.L. Horowitz and T. Pavlidis - directed split and merge,1974,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,846,,,0,0,$O(n^2)$,,,[ David Mumford and Jayant Shah (1989) (1989)],David Mumford and Jayant Shah (1989),1989,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,847,,,0,0,$O(n^2)$,,,[ Geman and Geman Markov random fields (1984)],Geman and Geman Markov random fields,1984,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,848,,,0,0,$O(n^2)$,,,[ Iterated conditional modes algorithm (1986)],Iterated conditional modes algorithm,1986,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,849,,,0,0,$O(n^2)$,,,[ watershed transformation 1979 (1979)],watershed transformation 1979,1979,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,850,,,0,0,$O(n^2)$,,,[ topological watershed (1997)],topological watershed,1997,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,851,,,0,0,$O(n^2)$,,,[ Florack and Kuijper (2000)],Florack and Kuijper,2000,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,852,,,0,0,$O(n^2)$,,,[ Bijaoui and Rué (1995)],Bijaoui and Rué,1995,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,853,,,0,0,$O(n^2)$,,,[ Multi-scale MAP estimation - A. Bouman and M. Shapiro (2002) (2002)],Multi-scale MAP estimation - A. Bouman and M. Shapiro (2002),2002,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,854,,,0,0,$O(n^2)$,,,[ Multiple Resolution segmentation - J. Liu and Y. H. Yang (1994) (1994)],Multiple Resolution segmentation - J. Liu and Y. H. Yang (1994),1994,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,855,,,0,0,$O(n \log n)$,,,[ Quasi-linear Topological watershed (2005)],Quasi-linear Topological watershed,2005,,,[],0,,,,,0,0,4,n: 4,$O(n \log n)$,11,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Image Processing,FALSE
108,Image Segmentation,0,,,856,,,0,0,$O(n^2)$,,,[ Isometric graph partitioning - Leo Grady and Eric L. Schwartz (2006) (2006)],Isometric graph partitioning - Leo Grady and Eric L. Schwartz (2006),2006,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,857,,,0,0,,,,[ Coplanar facets merging - M.J. De Haemer and M.J. Zyda 1991 (1991)],Coplanar facets merging - M.J. De Haemer and M.J. Zyda 1991,1991,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,858,,,0,0,,,,[ Coplanar facets merging - Hinker; P. and Hansen; C. 1993 (1993)],Coplanar facets merging - Hinker; P. and Hansen; C. 1993,1993,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,859,,,0,0,,,,[ Coplanar facets merging - Kalvin; A. D.; Cutting; C. B.; Haddad; B. and Noz; M. E. 1991 (1991)],Coplanar facets merging - Kalvin; A. D.; Cutting; C. B.; Haddad; B. and Noz; M. E. 1991,1991,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,860,,,0,0,,,,[ Coplanar facets merging - A.D. Kalvin and R.H. Taylor 1996 (1996)],Coplanar facets merging - A.D. Kalvin and R.H. Taylor 1996,1996,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,861,,,0,0,,,,[ Controlled vertex/edge/face decimation - M.E. Algorri and F. Schmitt 1996 (1996)],Controlled vertex/edge/face decimation - M.E. Algorri and F. Schmitt 1996,1996,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,862,,,0,0,,,,[ Controlled vertex/edge/face decimation - Guéziec 1996 (1996)],Controlled vertex/edge/face decimation - Guéziec 1996,1996,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,863,,,0,0,,,,[ Controlled vertex/edge/face decimation - R. Ronfard and J. Rossignac 1996 (1996)],Controlled vertex/edge/face decimation - R. Ronfard and J. Rossignac 1996,1996,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,864,,,0,0,,,,[ Controlled vertex/edge/face decimation - Hamann 1994 (1994)],Controlled vertex/edge/face decimation - Hamann 1994,1994,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,865,,,0,0,,,,[ Controlled vertex/edge/face decimation - Cohen; J.; Varshney; A 1996 (1996)],Controlled vertex/edge/face decimation - Cohen; J.; Varshney; A 1996,1996,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,866,,,0,0,,,,[ Re-tiling - Turk; G 1992 (1992)],Re-tiling - Turk; G 1992,1992,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,867,,,0,0,,,,[ Vertex clustering - Rossignac; J. and Borrel; P. 1993 (1993)],Vertex clustering - Rossignac; J. and Borrel; P. 1993,1993,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,868,,,0,0,,,,[ Vertex clustering - Low; K. L. and Tan; T. S 1997 (1997)],Vertex clustering - Low; K. L. and Tan; T. S 1997,1997,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,869,,,0,0,,,,[ Vertex clustering - Reddy 1996 (1996)],Vertex clustering - Reddy 1996,1996,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,870,,,0,0,,,,[ Vertex clustering - Hoppe; H.; DeRose; T.;  1993 (1993)],Vertex clustering - Hoppe; H.; DeRose; T.;  1993,1993,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,871,,,0,0,,,,[ Vertex clustering - Rossignac; J. and Borrel; P. 1997 (1997)],Vertex clustering - Rossignac; J. and Borrel; P. 1997,1997,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,872,,,0,0,,,,[ Wavelet-based - M.H. Gross; O.G. Staadt and R. Gatti 1996 (1996)],Wavelet-based - M.H. Gross; O.G. Staadt and R. Gatti 1996,1996,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,873,,,0,0,,,,[ Wavelet-based - D.J. Hebert and H-J. Kim 1995 (1995)],Wavelet-based - D.J. Hebert and H-J. Kim 1995,1995,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,874,,,0,0,,,,[ Wavelet-based - Certain; A.; Popovic; J.; 1996 (1996)],Wavelet-based - Certain; A.; Popovic; J.; 1996,1996,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,875,,,0,0,,,,[ Wavelet-based - Eck; M.; DeRose; T.; 1995 (1995)],Wavelet-based - Eck; M.; DeRose; T.; 1995,1995,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,876,,,0,0,,,,[ Simplification via intermediate hierarchical rep-resentation - Andujar 1996 (1996)],Simplification via intermediate hierarchical rep-resentation - Andujar 1996,1996,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,877,,,0,0,,,,[ Simplification via intermediate hierarchical rep-resentation - He; T.; Hong; L.; Kaufman 1995 (1995)],Simplification via intermediate hierarchical rep-resentation - He; T.; Hong; L.; Kaufman 1995,1995,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
109,Mesh Simplification,0,,Mesh Simplification,878,,,0,0,,,,[ Simplification via intermediate hierarchical rep-resentation - He;  T.;  Hong;  1996 (1996)],Simplification via intermediate hierarchical rep-resentation - He;  T.;  Hong;  1996,1996,,,[],0,,,,,,,#VALUE!,,,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
111,POMDPs,0,,POMDPs,882,,,0,0,-,,,[ Hauskrecht; 2000; (2000)],Hauskrecht; 2000;,2000,,,[],0,,,,,,,#VALUE!,,,,,,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,NA,,,,,,,,,1,,,Robotics,FALSE
111,POMDPs,0,,POMDPs,883,,,0,0,-,,,[  Pineau; Gordon; & Thrun; 2003;  (2003)], Pineau; Gordon; & Thrun; 2003; ,2003,,,[],0,,,,,,,#VALUE!,,,,,,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,NA,,,,,,,,,1,,,Robotics,FALSE
111,POMDPs,0,,POMDPs,884,,,0,0,-,,,[ Braziunas & Boutilier; 2004;  (2004)],Braziunas & Boutilier; 2004; ,2004,,,[],0,,,,,,,#VALUE!,,,,,,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,NA,,,,,,,,,1,,,Robotics,FALSE
111,POMDPs,0,,POMDPs,885,,,0,0,-,,,[ Poupart; 2005;  (2005)],Poupart; 2005; ,2005,,,[],0,,,,,,,#VALUE!,,,,,,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,NA,,,,,,,,,1,,,Robotics,FALSE
111,POMDPs,0,,POMDPs,886,,,0,0,-,,,[ Smith & Simmons; 2005;  (2005)],Smith & Simmons; 2005; ,2005,,,[],0,,,,,,,#VALUE!,,,,,,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,NA,,,,,,,,,1,,,Robotics,FALSE
111,POMDPs,0,,POMDPs,887,,,0,0,-,,,[ Spaan & Vlassis; 2005 (2005)],Spaan & Vlassis; 2005,2005,,,[],0,,,,,,,#VALUE!,,,,,,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,NA,,,,,,,,,1,,,Robotics,FALSE
111,POMDPs,0,,POMDPs,888,,,0,0,-,,,[ Satia & Lave; 1973;  (1973)],Satia & Lave; 1973; ,1973,,,[],0,,,,,,,#VALUE!,,,,,,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,NA,,,,,,,,,1,,,Robotics,FALSE
111,POMDPs,0,,POMDPs,889,,,0,0,-,,,[ Washington; 1997;  (1997)],Washington; 1997; ,1997,,,[],0,,,,,,,#VALUE!,,,,,,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,NA,,,,,,,,,1,,,Robotics,FALSE
111,POMDPs,0,,POMDPs,890,,,0,0,-,,,[ Barto;Bradtke; & Singhe; 1995;  (1995)],Barto;Bradtke; & Singhe; 1995; ,1995,,,[],0,,,,,,,#VALUE!,,,,,,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,NA,,,,,,,,,1,,,Robotics,FALSE
111,POMDPs,0,,POMDPs,891,,,0,0,-,,,[ Paquet; Tobin; & Chaib-draa; 2005;  (2005)],Paquet; Tobin; & Chaib-draa; 2005; ,2005,,,[],0,,,,,,,#VALUE!,,,,,,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,NA,,,,,,,,,1,,,Robotics,FALSE
111,POMDPs,0,,POMDPs,892,,,0,0,-,,,[ McAllester & Singh; 1999; (1999)],McAllester & Singh; 1999;,1999,,,[],0,,,,,,,#VALUE!,,,,,,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,NA,,,,,,,,,1,,,Robotics,FALSE
111,POMDPs,0,,POMDPs,893,,,0,0,-,,,[ Bertsekas & Castanon; 1999;  (1999)],Bertsekas & Castanon; 1999; ,1999,,,[],0,,,,,,,#VALUE!,,,,,,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,NA,,,,,,,,,1,,,Robotics,FALSE
111,POMDPs,0,,POMDPs,894,,,0,0,-,,,[ Shani; Brafman; & Shimony; 2005 (2005)],Shani; Brafman; & Shimony; 2005,2005,,,[],0,,,,,,,#VALUE!,,,,,,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,NA,,,,,,,,,1,,,Robotics,FALSE
112,Rasterization,2,,Rasterization,895,"""Scan-conversion line algorithm""",,0,0,$O(n^{1.45} \log n)$,,,[https://www.academia.edu/5750589/Computer_Graphics_C_Version_by_Donald_Hearn_and_M_Pauline_Baker_II_Edition Digital Differential Analyzer (DDA) (1983)],Digital Differential Analyzer (DDA),1983,https://www.academia.edu/5750589/Computer_Graphics_C_Version_by_Donald_Hearn_and_M_Pauline_Baker_II_Edition,,"['Donald Hearn', 'M Pauline Baker']",2,['Computer Graphics C Version'],,,,1,0,3,n: 3,$O(n)$,10,$n$: dimension of image,n,,,Word RAM,Words,1,n: 1,$O(1)$,"Derived: for each iteration (i.e. each step along the line), only need to store a constant number of variables that are then overwritten in the next iteration.",1,0,,0,,1,n/a,0,0,,0,0,"[Hearn, Baker (1997) pg. 87]",,,,,,,,,,,223088,,,,,,,,,4,,,Image Processing,FALSE
112,Rasterization,2,,Rasterization,896,,,0,0,$O(n^2)$,,,[https://www.academia.edu/5750589/Computer_Graphics_C_Version_by_Donald_Hearn_and_M_Pauline_Baker_II_Edition Bresenham Algorithm (1962)],Bresenham Algorithm,1962,https://www.academia.edu/5750589/Computer_Graphics_C_Version_by_Donald_Hearn_and_M_Pauline_Baker_II_Edition,,"['Donald Hearn', 'M Pauline Baker']",2,['Computer Graphics C Version'],,,,1,0,3,n: 3,$O(n)$,10,$n$: dimension of image,n,,,Word RAM,Words,1,n: 1,$O(1)$,"Derived: for each iteration (i.e. each step along the line), only need to store a constant number of variables that are then overwritten in the next iteration.",1,0,,0,,1,n/a,0,0,,0,0,"[Hearn, Baker (1997) pg. 88]",,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
113,Texture Mapping,0,,Environment Mapping,897,,,0,0,-,,,[ Blinn and Newell (1976)],Blinn and Newell,1976,,,[],0,,,,,,,#VALUE!,,-,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Robotics,FALSE
113,Texture Mapping,0,,Environment Mapping,898,,,0,0,$O(n^4)$,,,[  Nate Green (1986)], Nate Green,1986,,,[],0,,,,,,,7,n: 7,$O(n^4)$,40,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000000,,,,,,,,,2,,,Robotics,FALSE
113,Texture Mapping,0,,Environment Mapping,899,,,0,0,-,,,[ Sphere mapping (1984)],Sphere mapping,1984,,,[],0,,,,,,,#VALUE!,,-,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Robotics,FALSE
113,Texture Mapping,0,,Environment Mapping,900,,,0,0,$O(n^3)$,,,[ Heidrich; W.; and H.-P. Seidel (1998)],Heidrich; W.; and H.-P. Seidel,1998,,,[],0,,,,,,,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,2,,,Robotics,FALSE
113,Texture Mapping,0,,Environment Mapping,901,,,0,0,$O(n^3)$,,,[ Emil Praun (2003)],Emil Praun,2003,,,[],0,,,,,,,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,2,,,Robotics,FALSE
113,Texture Mapping,0,,Environment Mapping,902,,,0,0,-,,,[ Mauro Steigleder (2005)],Mauro Steigleder,2005,,,[],0,,,,,,,#VALUE!,,-,,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Robotics,FALSE
113,Texture Mapping,0,,Environment Mapping,903,,,0,0,$O(n^2)$,,,[ HEALPix mapping Wong (2008)],HEALPix mapping Wong,2008,,,[],0,,,,,,,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,2,,,Robotics,FALSE
114,Occupancy Grid Mapping,0,,Occupancy Grid Mapping,904,,,0,0,$O(n^3)$,,,[ Maximum a Posteriori Occupancy Mapping (2004)],Maximum a Posteriori Occupancy Mapping,2004,,,[],0,,,,,1,0,6,n: 6,$O(n^3)$,30,,n,,,,,#VALUE!,,,,,,,0,,1,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Robotics,FALSE
115,SLAM Algorithms,1,,SLAM Algorithms,908,,0,0,0,$O(m \log n)$ per iteration,^see above,(none),[http://robots.stanford.edu/papers/montemerlo.fastslam-tr.pdf FastSlam (2003)],FastSlam,2003,http://robots.stanford.edu/papers/montemerlo.fastslam-tr.pdf,,"['Michael Montemerlo', 'Sebastian Thrun', 'Daphne Koller', 'Ben Wegbreit']",4,['FastSLAM: A Factored Solution to the Simultaneous Localization and Mapping Problem'],,,,0,0,2,"m: 3,
n: 2",$O(m \log n)$ per iteration,,"$n$: number of dimensions in state space
$m$: number of particles in particle filter",n,http://robots.stanford.edu/papers/montemerlo.fastslam-tr.pdf,0,Real RAM?,words?,3,"m: 3,
n: 3",$O(mn)$?,Stores and updates a balanced binary tree of $n$ elements/dimensions per particle,1,0,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000000,,,,,,,,,3,,,Robotics,FALSE
115,SLAM Algorithms,1,,SLAM Algorithms,910,,0,0,0,$O(n^2)$,^see above,(none),[http://ingmec.ual.es/~jlblanco/papers/blanco2013rba.pdf srba (2002)],srba,2002,http://ingmec.ual.es/~jlblanco/papers/blanco2013rba.pdf,,"['Jos´e-Luis Blanco', 'Javier Gonz´alez-Jim´enez', 'Juan-Antonio Fern´andez-Madrigal']",3,['Sparser Relative Bundle Adjustment (SRBA): constant-time maintenance and local optimization of arbitrarily large maps'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of dimensions in state space,n,,,Real RAM?,words?,5,n: 5,$O(n^2)$?,"Seems to store a constant number of $O(n)\times O(n)$-sized matrices and $O(n)\times O(n)$-sized tables (see section II, part C)",1,0,,0,,1,,0,0,,0,0,(see above),,,,,,,,,,,1000000,,,,,,,,,3,,,Robotics,FALSE
130,Change-Making Problem,2,,Change-Making Problem,962,,,1,0,$O(n \log n)$,,,[https://www.ncbi.nlm.nih.gov/pubmed/24626234 Probabilistic Convolution Tree (2014)],Probabilistic Convolution Tree,2014,https://www.ncbi.nlm.nih.gov/pubmed/24626234,10.1371/journal.pone.0091507,['Oliver Serang'],1,['The Probabilistic Convolution Tree: Efficient Exact Bayesian Inference for Faster LC-MS/MS Protein Inference'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of coins,n,,,Word RAM,words,4,n: 4,$O(n \log n)$,https://pubmed.ncbi.nlm.nih.gov/24626234/,0,1,,0,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,FALSE
1,Sorting,2,Comparison Sorting,Comparison Sorting,19,,,1,1,$O(n^2)$,Any distribution,Same general behavior across inputs,[https://www.semanticscholar.org/paper/Parallel-Neighbor-Sort-(or-the-Glory-of-the-Habermann/bc7b6efb99aae6225239425747fd0169a51f30ce Odd Even Sort Parallel  Implementation (1972)],Odd Even Sort Parallel  Implementation,1972,https://www.semanticscholar.org/paper/Parallel-Neighbor-Sort-(or-the-Glory-of-the-Habermann/bc7b6efb99aae6225239425747fd0169a51f30ce,,['Nico Habermann'],1,['PARALLEL NEIGHBOR-SORT'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: size of list,n,,,Word RAM,words,1,n: 1,$O(1)$,in-situ,0,1,,0,,0,,0,1,,0,0,https://en.wikipedia.org/wiki/Odd%E2%80%93even_sort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000000,1,,,,,,,,4,,,Combinatorics,FALSE
1,Sorting,1,Non-comparison Sorting,Non-Comparison Sorting,25,,,1,1,$O(n)$,Any distribution,need to read entire input,[https://link.springer.com/chapter/10.1007/978-94-009-2794-0_11 Spaghetti Sort Parallel Implementation (1984)],Spaghetti Sort Parallel Implementation,1984,https://link.springer.com/chapter/10.1007/978-94-009-2794-0_11,10.1007/978-94-009-2794-0_11,['Kenneth Steiglitz'],1,['Two Non-Standard Paradigms for Computation: Analog Machines and Cellular Automata'],,,,0,0,3,n: 3,$O(n)$,10,$n$: size of list,n,,,???,words,1,n: 1,$O(1)$ auxiliary? per processor?,"Assuming getting the spaghetti rods doesn't take up any auxiliary space, the only auxiliary space in this algorithm involves the table and the hands, each using $O(1)$ space",1,0,,0,,0,,0,1,,0,0,https://en.wikipedia.org/wiki/Spaghetti_sort,A sorting algorithm is an algorithm that puts elements of a list in a certain order.,1,n is the size of the array to be sorted.,,,,,,,,1000,1000,,,,,,,,4,,,Combinatorics,FALSE
3,Matrix Chain Multiplication,1,,Approximate MCSP,32,,,1,1,$O(n^2)$,,,[https://citeseerx.ist.psu.edu/pdf/567c6ea2c932206fafd53f9f0f0bae7df861f627 Heejo Lee; Jong Kim; Sungje Hong; and Sunggu Lee (1997)],Heejo Lee; Jong Kim; Sungje Hong; and Sunggu Lee,1997,https://citeseerx.ist.psu.edu/pdf/567c6ea2c932206fafd53f9f0f0bae7df861f627,,"['Heejo Lee', 'Jong Kim', 'Sungje Hong', 'Sunggu Lee']",4,['Parallelizing matrix chain products'],,,,0,0,5,n: 5,$O(n^2)$,20,"$P$: number of processors
$n$: number of matrices",n,,,Word RAM?,words,5,n: 5,$O(n^2)$?,Derived: two $n \times n$ size tables ($S$ and $W$),1,0,,0,,1,"""near optimal""",0,0?,,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,1000000,Inf,,,,,,,,1,,,Combinatorics,FALSE
3,Matrix Chain Multiplication,2,,Approximate MCOP,33,,,1,1,$O(\log^4 n)$,,,[https://epubs.siam.org/doi/abs/10.1137/0225039 Prakesh Ramanan (1996)],Prakesh Ramanan,1996,https://epubs.siam.org/doi/abs/10.1137/0225039,10.1137/0225039,['Prakash Ramanan'],1,['An Efficient Parallel Algorithm for the Matrix-Chain-Product Problem'],,,,0,0,2.03,n: 2.03,$O(\log^4 n)$,4,$n$: number of matrices,n,,,CREW PRAM,words,3,n: 3,$O(n)$?,Derived: $n$ subtrees and each one has a $O(1)$ size trunk,1,0,,0,,0,,0,1,$n$,0,0,,"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,99,Inf,,,,,,,,1,,,Combinatorics,FALSE
3,Matrix Chain Multiplication,2,Matrix Chain Scheduling Problem,Matrix Chain Scheduling Problem,34,,,1,1,$O(\log^3 n)$,,,[https://citeseerx.ist.psu.edu/pdf/977d9f90a2115345ac1aba6237e8d30a5a1fe713 Czumaj (1993)],Czumaj,1993,https://citeseerx.ist.psu.edu/pdf/977d9f90a2115345ac1aba6237e8d30a5a1fe713,,['Artur Czumaj'],1,['Parallel Algorithm for the Matrix Chain Product and the Optimal Triangulation Problems'],,,,0,0,2.02,n: 2.02,$O(\log^3 n)$,3,$n$: number of matrices,n,,,CREW PRAM,words,5,n: 5,$O(n^2)$?,Derived: uses two arrays ($D$ and $c$) both of size $O(n^2)$,1,0,,0,,0,,0,1,$O(n^2 / \log^3 n)$,0,0,https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.54.9426&rep=rep1&type=pdf (old link),"Matrix chain multiplication (or Matrix Chain Ordering Problem; MCOP) is an
 optimization problem that can be solved using dynamic programming.
 Given a sequence of matrices; the goal is to find the most efficient
 way to multiply these matrices.",,,,,,,,,,989,Inf,,,,,,,,1,,,Combinatorics,FALSE
4,Longest Common Subsequence,1,LCS,LCS,41,,,1,1,$O(rm \log(n/r) + rm)$,,,[https://www.sciencedirect.com/science/article/pii/0022000084900254 Hsu and Du (Scheme 2) (1984)],Hsu and Du (Scheme 2),1984,https://www.sciencedirect.com/science/article/pii/0022000084900254,,"['W.J. Hsu', 'M.W. Du']",2,['New algorithms for the LCS problem'],,,,1,-,5.01,"m: 3,
r: 3,
n: 2,
m+n: 5.01",$O(rm \log(n/r) + rm)$,20,"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"r: 3,
m: 3,
m+n: 5",$O(rm)$,https://www.sciencedirect.com/science/article/pii/0022000084900254,0,1,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,NA,NA,,,,,,,,4,,,Combinatorics,TRUE
4,Longest Common Subsequence,2,LCS,LCS,42,,,1,1,$O(m \log n +n^2 \log(2m/n))$,"On average, $p = n^2 / s$",https://dl.acm.org/doi/10.1145/74697.74702,[https://link.springer.com/article/10.1007/BF01840365 Apostolico and Guerra (HS1 Algorithm) (1987)],Apostolico and Guerra (HS1 Algorithm),1987,https://link.springer.com/article/10.1007/BF01840365,10.1007/BF01840365,"['A. Apostolico', 'C. Guerra']",2,['The longest common subsequence problem revisited'],,,,0,-,5,"m: 3,
n: 2,
p: 3,
m+n: 5",$O(m \log n +p \log(2mn/p))$,,"$n$: length of the longer input string
$m$: length of the shorter input string
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
m+n: 3",$O(p + n)$,https://link.springer.com/article/10.1007/BF01840365,0,1,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,NA,NA,,,,,,,,4,,,Combinatorics,TRUE
4,Longest Common Subsequence,2,LCS,LCS,43,,,1,1,$O(n^2 + n(r+\log n))$,"On average, $p = n^2 / s$",https://dl.acm.org/doi/10.1145/74697.74702,[https://dl.acm.org/citation.cfm?id=74702 Kuo and Cross (1989)],Kuo and Cross,1989,https://dl.acm.org/citation.cfm?id=74702,,"['S. Kuo', 'G. R. Cross']",2,['An improved algorithm to find the length of the longest common subsequence of two strings'],,,,0,-,5,"p: 3,
n: 4,
r: 3,
m+n: 5",$O(p + n(r+\log n))$,20,"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
m+n: 3",$O(p + n)$,"https://dl.acm.org/doi/10.1145/74697.74702, Same space complexity as Hunt and Szymanski.",0,1,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,NA,NA,,,,,,,,4,,,Combinatorics,TRUE
4,Longest Common Subsequence,2,LCS,LCS,44,,,1,1,"$O(sn + \min(r(n - r), rm))$",,,[https://link.springer.com/chapter/10.1007/3-540-60044-2_53 Rick (Algorithm 2) (1995)],Rick (Algorithm 2),1995,https://link.springer.com/chapter/10.1007/3-540-60044-2_53,10.1007/3-540-60044-2_53,['Claus Rick'],1,['A new flexible algorithm for the longest common subsequence problem'],,,,1,-,5,"s: 3,
n: 3,
r: 3,
m: 3,
m+n: 5","$O(sn + \min(r(n - r), rm))$",20,"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
s: 3,
m+n: 3",$O(sn + p)$,https://link.springer.com/chapter/10.1007/3-540-60044-2_53,0,1,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,NA,NA,,,,,,,,4,,,Combinatorics,TRUE
4,Longest Common Subsequence,1,LCS,LCS,45,,,1,1,"$O(sn + \min(sp, rm))$",,,[https://link.springer.com/chapter/10.1007/3-540-60044-2_53 Rick (Section 4) (1995)],Rick (Section 4),1995,https://link.springer.com/chapter/10.1007/3-540-60044-2_53,10.1007/3-540-60044-2_53,['Claus Rick'],1,['A new flexible algorithm for the longest common subsequence problem'],,,,0,-,5,"s: 3,
n: 3,
r: 3,
m: 3,
m+n: 5","$O(sn + \min(sp, rm))$",20,"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
s: 3,
m+n: 3",$O(sn + p)$,https://link.springer.com/chapter/10.1007/3-540-60044-2_53,0,1,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,NA,NA,,,,,,,,4,,,Combinatorics,TRUE
4,Longest Common Subsequence,2,LCS,LCS,46,,,1,1,$O(rn + n \log n)$,,,[https://dl.acm.org/citation.cfm?id=322044 Hirschberg (1977)],Hirschberg,1977,https://dl.acm.org/citation.cfm?id=322044,,['Daniel S. Hirschberg'],1,['Algorithms for the Longest Common Subsequence Problem'],,,,1,-,5,"r: 3,
n: 4,
m+n: 5",$O(rn + n \log n)$,20,"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
m+n: 3",$O(n + p)$,https://link.springer.com/content/pdf/10.1007/BF01840365.pdf,0,0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,NA,NA,,,,,,,,4,,,Combinatorics,TRUE
4,Longest Common Subsequence,2,LCS,LCS,47,,,1,1,$O(rm \log(n/m) + rm)$,,,[https://www.sciencedirect.com/science/article/pii/0022000084900254 Hsu and Du (Scheme 1) (1984)],Hsu and Du (Scheme 1),1984,https://www.sciencedirect.com/science/article/pii/0022000084900254,,"['W.J. Hsu', 'M.W. Du']",2,['New algorithms for the LCS problem'],,,,0,-,5,"r: 3,
m: 3,
n: 2,
m+n: 5",$O(rm \log(n/m) + rm)$,20,"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"r: 3,
m: 3,
m+n: 5",$O(rm)$,https://www.sciencedirect.com/science/article/pii/0022000084900254,0,1,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,NA,NA,,,,,,,,4,,,Combinatorics,TRUE
4,Longest Common Subsequence,2,LCS,LCS,48,,,1,1,$O(rm + sn + n \log s)$,,,[https://link.springer.com/article/10.1007/BF01840365 Apostolico and Guerra (Algorithm 2) (1987)],Apostolico and Guerra (Algorithm 2),1987,https://link.springer.com/article/10.1007/BF01840365,10.1007/BF01840365,"['A. Apostolico', 'C. Guerra']",2,['The longest common subsequence problem revisited'],,,,1,-,5,"r: 3,
m: 3,
s: 3,
n: 3,
m+n: 5",$O(rm + sn + n \log s)$,20,"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
s: 3,
m+n: 3",$O(p + sn)$,https://link.springer.com/content/pdf/10.1007/BF01840365.pdf,0,0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,NA,NA,,,,,,,,4,,,Combinatorics,TRUE
4,Longest Common Subsequence,2,LCS,LCS,49,,,1,1,"$O(sn + \min(sp, rm))$",,,[https://dl.acm.org/doi/abs/10.5555/105582.105592 Chin and Poon (1991)],Chin and Poon,1991,https://dl.acm.org/doi/abs/10.5555/105582.105592,,"['Francis Y. L. Chin', 'C. K. Poon']",2,['A fast algorithm for computing longest common subsequences of small alphabet size'],,,,0,-,5,"r: 3,
m: 3,
s: 3,
n: 3,
p: 4,
m+n: 5","$O(sn + \min(sp, rm))$",20,"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS
$p$: the number of dominant matches (AKA number of minimal candidates), i.e. the total number of ordered pairs of positions at which the two sequences match
$s$: size of alphabet",m+n,,,Word RAM,words,3,"p: 3,
n: 3,
m+n: 3",$O(p + n)$,"https://link.springer.com/content/pdf/10.1007/3-540-58338-6_63.pdf, Fig. 3",0,0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1007/3-540-58338-6_63.pdf,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,NA,NA,,,,,,,,4,,,Combinatorics,TRUE
4,Longest Common Subsequence,2,LCS,LCS,50,,,1,1,$O(n(m-r))$,,,[https://link.springer.com/article/10.1007/BF00264437 Nakatsu et al. (1982)],Nakatsu et al.,1982,https://link.springer.com/article/10.1007/BF00264437,10.1007/BF00264437,"['Narao Nakatsu', 'Yahiko Kambayashi', 'Shuzo Yajima']",3,['A longest common subsequence algorithm suitable for similar text strings'],,,,0,-,5,"n: 3,
m: 3,
m+n: 5",$O(n(m-r))$,20,"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"m: 5,
m+n: 5",$O(m^2)$,"https://link.springer.com/content/pdf/10.1007/3-540-58338-6_63.pdf, Fig. 3",0,0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1007/3-540-58338-6_63.pdf,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,NA,NA,,,,,,,,4,,,Combinatorics,TRUE
4,Longest Common Subsequence,2,LCS,LCS,51,,,1,1,$O(n(m-r))$,,,[https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380151102 Miller and Myers (1985)],Miller and Myers,1985,https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380151102,10.1002/spe.4380151102,"['Webb Miller', 'Eugene W. Myers']",2,['A file comparison program'],,,,0,-,5,"n: 3,
m: 3,
m+n: 5",$O(n(m-r))$,20,"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"m: 5,
m+n: 5",$O(m^2)$,Derived: Uses an upper triangular matrix $M$ that is size $(m + 1) \times (m + 1)$,1,0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,NA,NA,,,,,,,,4,,,Combinatorics,TRUE
4,Longest Common Subsequence,2,LCS,LCS,52,,,1,1,$O(n(m-r))$,,,[https://publications.mpi-cbg.de/Wu_1990_6334.pdf Wu et al. (1990)],Wu et al.,1990,https://publications.mpi-cbg.de/Wu_1990_6334.pdf,,"['Sun Wu', 'Udi Manber', 'Gene Myers', 'Webb Miller']",4,['An O(NP) Sequence Comparison Algorithm'],,,,0,-,5,"n: 3,
m: 3,
m+n: 5",$O(n(m-r))$,20,"$n$: length of the longer input string
$m$: length of the shorter input string
$r$: length of the LCS",m+n,,,Word RAM,words,5,"m: 5,
m+n: 5",$O(m^2)$?,Derived: Uses an upper triangular matrix $M$ that is size $(m + 1) \times (m + 1)$,1,0,,0,,0,,0,0,,0,0,,The longest common subsequence (LCS) problem is the problem of finding the longest subsequence common to all sequences in a set of sequences (often just two sequences).,,,,,,,,,,NA,NA,,,,,,,,4,,,Combinatorics,TRUE
5,Maximum Flow,1,Max Flow,Integer Maximum Flow,64,,,1,1,$O(VE \log((V \log U)/(E \log \log U) + 2))$,,,"[https://apps.dtic.mil/sti/tr/pdf/ADA194034.pdf Ahuja, Orlin, Tarjan (1987)]","Ahuja, Orlin, Tarjan",1987,https://apps.dtic.mil/sti/tr/pdf/ADA194034.pdf,,"['R.K. Ahuja', 'J.B. Orlin', 'R.E. Tarjan']",3,['Improved Time Bounds for the Maximum Flow Problem'],,,,1,0,6,"V: 6,
E: 3",$O(VE \log((V \log U)/(E \log \log U) + 2))$,,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge capacity",V,https://apps.dtic.mil/sti/tr/pdf/ADA194034.pdf,0,Word RAM,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,maximum flow problems involve finding a feasible flow through a flow network that is maximum.,,,"V:E:U
0.6:1:1",,,,,,,0.07226045025,#VALUE!,,0.1215822702,0,,0.1491085327,0,,2,,,Combinatorics,FALSE
7,Max Independent Set,0.001,#N/A,3-Graph Coloring,90,,,1,1,$O(1.2108^n)$,,,[https://www.sciencedirect.com/science/article/pii/0196677486900325 Robson (1986)],Robson,1986,https://www.sciencedirect.com/science/article/pii/0196677486900325,,['J.M. Robson'],1,['Algorithms for maximum independent sets'],,,,1,0,#N/A,n: 8,$O(1.2108^n)$,,$n$: number of vertices,#N/A,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,https://arxiv.org/pdf/cs/0006046.pdf,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
7,Graph Coloring,0.001,,3-Graph Coloring,91,,,1,1,$O(1.333^n)$,,,[https://ieeexplore.ieee.org/document/814612 Schöning (1999)],Schöning,1999,https://ieeexplore.ieee.org/document/814612,,['T. Schoning'],1,['A probabilistic algorithm for k-SAT and constraint satisfaction problems'],,,,0,0,8,n: 8,$O(1.333^n)$,,,n,,,,,#VALUE!,,,,,,,1,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,Inf,1,,,,,,,,1,,,Combinatorics,TRUE
7,Graph Coloring,0.001,,3-Graph Coloring,92,,,1,1,$O(1.239^n)$,,,[https://dl.acm.org/doi/10.5555/314613.314838 Hirsch (1998)],Hirsch,1998,https://dl.acm.org/doi/10.5555/314613.314838,,['Edward A. Hirsch'],1,['Two new upper bounds for SAT'],,,,0,0,8,n: 8,$O(1.239^n)$,,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,Inf,1,,,,,,,,1,,,Combinatorics,TRUE
7,Graph Coloring,0.001,,3-Graph Coloring,93,,,1,1,$O(1.4422^n)$,,,[https://www.sciencedirect.com/science/article/abs/pii/0020019088900658 Johnson (1988)],Johnson,1988,https://www.sciencedirect.com/science/article/abs/pii/0020019088900658,,"['David S. Johnson', 'Mihalis Yannakakis', 'Christos H. Papadimitriou']",3,['On generating all maximal independent sets'],,,,0,0,8,n: 8,$O(1.4422^n)$,,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,Inf,1,,,,,,,,1,,,Combinatorics,TRUE
7.5,Graph Coloring,0.001,#N/A,3-Coloring a Random 3-Colorable Graph,94,,,1,1,$O(\text{poly}(n))$,,,[http://www.cs.tau.ac.il/~nogaa/PDFS/spectcolpr1.pdf Alon and Kahale (1997)],Alon and Kahale,1997,http://www.cs.tau.ac.il/~nogaa/PDFS/spectcolpr1.pdf,,"['Noga Alon', 'Nabil Kahale']",2,['A spectral technique for coloring random 3-colorable graphs'],2,1,http://www.cs.tau.ac.il/~nogaa/PDFS/spectcolpr1.pdf,0,0,8,n: 8,$O(\text{poly}(n))$,,,n,,,,,#VALUE!,,,,,,,1,Monte Carlo?,0,,0,0,,0,0,,"graph coloring is a special case of graph labeling; it is an assignment
 of labels traditionally called ""colors"" to elements of a graph subject
 to certain constraints. ",,,,,,,,,,Inf,1,,,,,,,,1,,,Combinatorics,TRUE
12,Convex Hull,0.001,,,133,,,1,1,$O(n \log n)$,,,[https://dl.acm.org/doi/abs/10.1145/359423.359430 convex hull algorithm; Preparata and Hong (1977)],convex hull algorithm; Preparata and Hong,1977,https://dl.acm.org/doi/abs/10.1145/359423.359430,,"['F. P. Preparata', 'S. J. Hong']",2,['Convex Hulls of Finite Sets of Points in Two and Three Dimensions'],,,,0,0,4,n: 4,$O(n \log n)$,,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,"the convex hull or convex envelope or convex closure of a set X of points
 in the Euclidean plane or in a Euclidean space
 (or; more generally; in an affine space over the reals) is the smallest 
convex set that contains X. ",,,h = n^0.5,,,,,,,9965,100351.2293,,,,,,,,3,,,Image Processing,FALSE
14,Minimum Spanning Tree (MST),2,MST,"Undirected, General MST",163,Parallel algorithm,,1,1,$O(E \log(V)/p)$,,,[https://www.sciencedirect.com/science/article/pii/S0743731506001262 Bader & Cong Parallel Implementation  (2006)],Bader & Cong Parallel Implementation ,2006,https://www.sciencedirect.com/science/article/pii/S0743731506001262,,"['David A. Bader', 'Guojing Cong']",2,['Fast shared-memory algorithms for computing the minimum spanning forest of sparse graphs'],,,,0,0,5.01,"E: 3,
V: 5.01",$O(E \log(V)/p)$,-,"$V$: number of vertices
$E$: number of edges
$U$: maximum edge weight
$p$: number of processors",V,https://www.sciencedirect.com/science/article/pii/S0743731506001262,0,PRAM/SMPs?,words,3,"V: 3,
E: 1",$O(V)$,Initializes and uses a constant number of arrays of size $O(V)$ (and does work similar to work done in Boruvka/Prim algorithm),1,0,,0,,0,,0,1,$p$,0,0,,"A minimum spanning tree (MST) or minimum weight spanning tree is a subset
 of the edges of a connected; edge-weighted undirected graph that
 connects all the vertices together; without any cycles and
 with the minimum possible total edge weight.",,,"V:E
5:7",,,,,,,8.7,583.3333333,,,,,,,,5,,,Combinatorics,FALSE
18,Integer Factoring,1,Integer Factoring,First Category Integer Factoring,200,"For integers of the form $r^e \pm s$, for r and s relatively small",,1,1,$O(\exp((1+o(1))(32n/9)^{1/3}(log n)^{2/3})$,,http://www.ams.org/notices/199612/pomerance.pdf,[ Special number field sieve (1940)],Special number field sieve,1940,,,[],0,,,,,0,0,8,n: 8,"$O(\exp((1+o(1))(32n/9)^{1/3}(log n)^{2/3})$, under assumption about numbers in a sequence behaving randomly in a given range",,"$n$: number of bits in the integer
$\Gamma$: number of smooth pairs",n,,,Word RAM,bits,5.33,n: 5.33,$O(\Gamma n^{4/3} \log n)$,https://www.sciencedirect.com/science/article/pii/S0304397516300172,0,0,,0,,0,,1,0,,0,0,"(runtime depends on heuristic arguments)

http://www.ams.org/notices/199612/pomerance.pdf",whose running time depends on the size of smallest prime factor.,,,,100,,10000,,1000000,,Inf,1,,,,,,,,1,,,Numerical Analysis,TRUE
19,Integer Factoring,1,Integer Factoring,Second Category Integer Factoring,205,,,1,1,$O(\exp((1+o(1))(64n/9)^{1/3}(log n)^{2/3})$,,,[http://www.ams.org/notices/199612/pomerance.pdf General number field sieve (1996)],General number field sieve,1996,http://www.ams.org/notices/199612/pomerance.pdf,,['Carl Pomerance'],1,['A Tale of Two Sieves'],,,,0,0,8,n: 8,"$O(\exp((1+o(1))(64n/9)^{1/3}(log n)^{2/3})$, under assumption about numbers in a sequence behaving randomly in a given range",,"$n$: number of bits in the integer
$\Gamma$: number of smooth pairs",n,,,Word RAM,bits,5.33,n: 5.33,$O(\Gamma n^{4/3} \log n)$,https://www.sciencedirect.com/science/article/pii/S0304397516300172,0,1,,0,,0,,1,0,,0,0,(runtime depends on heuristic arguments),has a running time which depends solely on the size of the integer to be factored.,,,,,,,,,,,,,,,,,,,4,,,Numerical Analysis,TRUE
22,String Search,2,Single String Search,Single String Search,238,,,1,1,$O(n + m)$,,,[http://monge.univ-mlv.fr/~mac/Articles-PDF/CP-1991-jacm.pdf Two-way String-Matching Algorithm (1991)],Two-way String-Matching Algorithm,1991,http://monge.univ-mlv.fr/~mac/Articles-PDF/CP-1991-jacm.pdf,,"['MAXIME CROCHEMORE', 'DOMINIQUE PERRIN']",2,['Two-Way String-Matching'],,,,0,0,3,"n: 3,
m: 3,
m+n: 3",$O(n + m)$,10,"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,1,"n: 1,
m+n: 1",$O(1)$,http://monge.univ-mlv.fr/~mac/Articles-PDF/CP-1991-jacm.pdf,0,1,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics,FALSE
22,String Search,2,Single String Search,Single String Search,239,,,1,1,$O(mn)$,,,[- String-Matching with Finite Automata (1940)],String-Matching with Finite Automata,1940,-,,[],0,,,,,0,0,5,"n: 3,
m: 3,
m+n: 5",$O(mn)$,20,"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,Derived: $O(m)$ states in the DFA,1,0,,0,,0,,0,0,,0,0,https://www.geeksforgeeks.org/finite-automata-algorithm-for-pattern-searching/,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.100.7210&rep=rep1&type=pdf,Combinatorics,FALSE
22,String Search,2,Single String Search,Single String Search,240,,,1,1,$O(mn)$,,,[http://www.ijcte.org/papers/462-G1278.pdf Quick-Skip Searching (2012)],Quick-Skip Searching,2012,http://www.ijcte.org/papers/462-G1278.pdf,,"['Mustafa Abdul Sahib Naser', 'Nur'Aini Abdul Rashid', 'Mohammed Faiz Aboalmaaly']",3,['Quick-Skip Search Hybrid Algorithm for the Exact String Matching Problem'],,,,0,0,5,"n: 3,
m: 3,
m+n: 5",$O(mn)$,20,"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,"Derived: Uses two tables, both of size $O(m)$",1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
22,String Search,2,Single String Search,Single String Search,241,,,1,1,$O(n+m+s)$,,,[https://thesai.org/Downloads/Volume8No6/Paper_15-Fast_Hybrid_String_Matching_Algorithm.pdf Fast Hybrid Algorithm (2017)],Fast Hybrid Algorithm,2017,https://thesai.org/Downloads/Volume8No6/Paper_15-Fast_Hybrid_String_Matching_Algorithm.pdf,,"['Sinan Sameer Mahmood Al-Dabbagh', 'Mustafa Abdul Sahib Naser', 'Nuraini bint Abdul Rashid', 'Nawaf Hazim Barnouti']",4,['Fast Hybrid String Matching Algorithm based on the Quick-Skip and Tuned Boyer-Moore Algorithms'],4,1,https://thesai.org/Downloads/Volume8No6/Paper_15-Fast_Hybrid_String_Matching_Algorithm.pdf,1,4->6,3,"n: 3,
m: 3,
m+n: 3,
s: 3",$O(n+m+s)$,10,"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,"Derived: Uses three tables, each of size $O(m)$",1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,1150,69.65217391,0.05665744313,1100050,72724.058,0.156481465,1100000050,72727269.51,0.2650274945,4,,,Combinatorics,FALSE
22,String Search,2,Single String Search,Single String Search,243,,,1,1,$O(n (\log_s m)/m)$,,,[https://link.springer.com/chapter/10.1007/BFb0030778 Backward Non-Deterministic DAWG Matching (BNDM) (1998)],Backward Non-Deterministic DAWG Matching (BNDM),1998,https://link.springer.com/chapter/10.1007/BFb0030778,10.1007/BFb0030778,"['Gonzalo Navarro', 'Mathieu Raffinot']",2,['A bit-parallel approach to suffix automata: Fast extended string matching'],,,,0,0,3,"n: 3,
m: 3,
m+n: 3",$O(n+m)$,10,"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,3,"m: 3,
s: 3,
m+n: 3",$O(sm)$,https://link.springer.com/chapter/10.1007/BFb0030778,0,1,,0,,0,,0,1,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m
9:1",,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
22,String Search,2,,Multiple String Search,244,"Automaton-based, constructs a converse state machine from the given patterns",,1,1,$O(mn)$,,,[https://link.springer.com/chapter/10.1007/3-540-09510-1_10 Commentz-Walter Algorithm (1979)],Commentz-Walter Algorithm,1979,https://link.springer.com/chapter/10.1007/3-540-09510-1_10,10.1007/3-540-09510-1_10,['Beate Commentz-Walter'],1,['A string matching algorithm fast on the average'],,,,0,0,5,"n: 3,
m: 3,
m+n: 5",$O(mn)$,20,"$m$: pattern length
$n$: length of searchable text
$k$: number of keywords",m+n,,,Word RAM,words,3,"m: 3,
k: 3,
m+n: 3",$O(km)$,Derived: Number of states of the automaton that is created,1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
22,String Search,2,,Multiple String Search,245,"Automaton-based, finite automaton that tracks the partial prefix match",,1,1,$O(n + m + z)$,,,[https://cr.yp.to/bib/1975/aho.pdf Aho–Corasick (AC) Algorithm (1975)],Aho–Corasick (AC) Algorithm,1975,https://cr.yp.to/bib/1975/aho.pdf,,"['Alfred V. Aho', 'Margaret J. Corasick']",2,['Efficient String Matching: An Aid to Bibliographic Search'],,,,0,0,3,"n: 3,
m: 3,
m+n: 3,
z: 3",$O(n + m + z)$,10,"$m$: pattern length
$n$: length of searchable text
$k$: number of keywords
$z$: number of matches",m+n,,,Word RAM,words,3,"m: 3,
k: 3,
m+n: 3",$O(km)$,Derived: Number of states of the automaton that is created,1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
22,String Search,2,Single String Search,Single String Search,246,Bad-character heuristic,,1,1,$O(n)$,Uniform distribution (over the given alphabet) of characters in the text and pattern,https://doi.org/10.1016/0304-3975(92)90133-Z,[https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380100608 Boyer-Moore-Horspool (BMH) (1980)],Boyer-Moore-Horspool (BMH),1980,https://onlinelibrary.wiley.com/doi/abs/10.1002/spe.4380100608,10.1002/spe.4380100608,['R. Nigel Horspool'],1,['Practical fast searching in strings'],,,,0,0,5,"n: 3,
m: 3,
m+n: 5",$O(mn + s)$,20,"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,1,"s: 3,
m+n: 1",$O(s)$,Derived: Uses a bad-character shift table of size $O(s)$,1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
22,String Search,2,Single String Search,Single String Search,247,Slight variation of BMH,,1,1,$O(n)$,Uniform distribution (over the given alphabet) of characters in the text and pattern,https://doi.org/10.1016/0304-3975(92)90133-Z,[https://www.cin.ufpe.br/~paguso/courses/if767/bib/Raita_1992.pdf Raita Algorithm (1991)],Raita Algorithm,1991,https://www.cin.ufpe.br/~paguso/courses/if767/bib/Raita_1992.pdf,,['TIMO RAITA'],1,['Tuning the Boyer–Moore–Horspool String Searching Algorithm'],,,,0,0,5,"n: 3,
m: 3,
m+n: 5,
s: 3",$O(mn + s)$,20,"$m$: pattern length
$n$: length of searchable text
$s$: size of the alphabet",m+n,,,Word RAM,words,1,"s: 3,
m+n: 1",$O(s)$,Derived: Uses a bad-character shift table of size $O(s)$,1,0,,0,,0,,0,0,,0,0,,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
22,String Search,2,Single String Search,Single String Search,248,Automaton-based oracle,,1,1,$O(mn)$,,,[https://link.springer.com/chapter/10.1007/3-540-47849-3_18 BOM (Backward Oracle Matching) (1999)],BOM (Backward Oracle Matching),1999,https://link.springer.com/chapter/10.1007/3-540-47849-3_18,10.1007/3-540-47849-3_18,"['Cyril Allauzen', 'Maxime Crochemore', 'Mathieu Raffinot']",3,['Factor Oracle: A New Structure for Pattern Matching'],,,,0,0,5,"n: 3,
m: 3,
m+n: 5",$O(mn)$,20,"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,https://link.springer.com/content/pdf/10.1007/3-540-47849-3_18.pdf,0,1,,0,,0,,0,0,,0,0,https://www-igm.univ-mlv.fr/~lecroq/string/bom.html,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
22,String Search,2,Single String Search,Single String Search,249,Variant of BM,,1,1,$O(m + s + n)$,,,[https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1456&context=cstech&sei-redir=1 Apostolico–Giancarlo Algorithm (1986)],Apostolico–Giancarlo Algorithm,1986,https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1456&context=cstech&sei-redir=1,,"['Alberto Apostolicao', 'Raffaele Giancarlo']",2,['The Boyer-Moore-Galil String Searching Strategies Revisited'],,,,0,0,3,"n: 3,
m: 3,
m+n: 3,
s: 3",$O(m + s + n)$,10,"$m$: pattern length
$n$: length of searchable text",m+n,,,Word RAM,words,3,"m: 3,
m+n: 3",$O(m)$,https://docs.lib.purdue.edu/cgi/viewcontent.cgi?article=1456&context=cstech&sei-redir=1,0,1,,0,,0,,0,0,,0,0,http://www.darkridge.com/~jpr5/mirror/string/node16.html,"try to find a place where one or several strings (also called patterns) are
 found within a larger string or text.",,,"n:m:k
150000:50:8",,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
23,Sequence Alignment,1,"Edit Distance, constant-size alphabet","Edit Sequence, constant-size alphabet",258,,,1,1,$O(mn)$,,,[https://www.ncbi.nlm.nih.gov/pubmed/9254694 Gapped BLAST (1997)],Gapped BLAST,1997,https://www.ncbi.nlm.nih.gov/pubmed/9254694,10.1093/nar/25.17.3389,"['S. Altschul', 'T L Madden', 'A A Schäffer', 'J Zhang', 'Z Zhang', 'W Miller', 'D J Lipman']",7,['Gapped BLAST and PSI-BLAST: a new generation of protein database search programs'],,,,0,0,5,"n: 3,
m: 3,
m+n: 5",$O(mn)$,20,"$n$, $m$: lengths of input strings; assume $n\geq m$",m+n,,,Word RAM,words,5,"n: 5,
m: 3,
m+n: 5",$O(mn)$?,"Uses at most a constant number of $O(m)\times O(n)$ arrays, whose contents are of size $O(1)$",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics,FALSE
23,Sequence Alignment,1,"Edit Distance, constant-size alphabet","Edit Sequence, constant-size alphabet",259,,,1,1,$O(mn)$,,,[https://www.ncbi.nlm.nih.gov/pubmed/2231712 Basic Local Alignment Search Tool (BLAST) (1990)],Basic Local Alignment Search Tool (BLAST),1990,https://www.ncbi.nlm.nih.gov/pubmed/2231712,,"['S F Altschul', 'W Gish', 'W Miller', 'E W Myers', 'D J Lipman']",5,['Basic local alignment search tool'],,,,0,0,5,"n: 3,
m: 3,
m+n: 5",$O(mn)$,20,"$n$, $m$: lengths of input strings; assume $n\geq m$",m+n,,,Word RAM,words,5,"n: 5,
m: 3,
m+n: 5",$O(mn)$?,"Uses at most a constant number of $O(m)\times O(n)$ arrays, whose contents are of size $O(1)$",1,0,,0,,0,,0,0,,0,0,,"a sequence alignment is a way of arranging the sequences of DNA; RNA;
 or protein to identify regions of similarity that may be a consequence of functional;
 structural; or evolutionary relationships between the sequences.",,,"n:m
1:1",,,,,,,250000,1,,,,,,,,4,,,Bioinformatics,FALSE
24,Joins,1,,,262,,,1,1,$O(nm)$,,,[- Nested loop join (1960)],Nested loop join,1960,-,,[],0,,1,1,https://docs.oracle.com/cd/E17952_01/mysql-5.7-en/nested-loop-joins.html,1,0,5,"n: 3,
m: 3,
m+n: 5",$O(nm)$,20,"$n$, $m$: sizes of input tables",m+n,,,Word RAM,words,1,"n: 1,
m+n: 1",$O(1)$,Just need to keep track of which rows are being checked,1,0,,0,,0,,0,0,,0,0,https://docs.oracle.com/cd/E17952_01/mysql-5.7-en/nested-loop-joins.html,"An SQL join clause - corresponding to a join operation in relational algebra
 - combines columns from one or more tables in a relational database.",,,"n:m
1:1",,,,,,,250000,1,,250000000000,1,,2.5E+17,1,,4,,,Databases,FALSE
24,Joins,1,,,263,,,1,1,$O(n \log n + m \log m)$,,,[- Sort merge join (1960)],Sort merge join,1960,-,,[],0,,,,,1,4->5,4,"n: 3,
m: 3,
m+n: 4",$O(n \log n + m \log m)$,11,"$n$, $m$: sizes of input tables",m+n,,,Word RAM,words,3,"n: 3,
m: 3,
m+n: 3",$O(n+m)$?,Need sorted lists of indices of input tables,1,0,,0,,0,,0,0,,0,0,https://use-the-index-luke.com/sql/join/sort-merge-join,"An SQL join clause - corresponding to a join operation in relational algebra
 - combines columns from one or more tables in a relational database.",,,"n:m
1:1",,,,,,,8960,27.90178571,26.90178571,18931568.57,13205.45622,13204.45622,28897352854,8651311.463,8651310.463,4,,,Databases,FALSE
24,Joins,1,,,264,,,1,1,$O(n+m)$,,,[- Hash join (1960)],Hash join,1960,-,,[],0,,2,1,http://neuyilan.github.io/2018/01/04/hash%20join算法总结/Hash%20Join%20Algorithms.pdf,1,5->6,3,"n: 3,
m: 3,
m+n: 3",$O(n+m)$,10,"$n$, $m$: sizes of input tables",m+n,,,Word RAM,words,3,"n: 3,
m: 3,
m+n: 3",$O(n+m)$?,Need a hash table of at least that size,1,0,,0,,0,,0,0,,0,0,https://dev.mysql.com/doc/refman/8.0/en/hash-joins.html,"An SQL join clause - corresponding to a join operation in relational algebra
 - combines columns from one or more tables in a relational database.",,,"n:m
1:1",,,,,,,1000,250,249,1000000,250000,249999,1000000000,250000000,249999999,4,,,Databases,FALSE
28,Maximum Cardinality Matching,1,Bipartite Graph MCM,Bipartite Graph MCM,284,,,1,1,$O(VE)$,,,[https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/maximal-flow-through-a-network/5D6E55D3B06C4F7B1043BC1D82D40764 Ford–Fulkerson algorithm (1956)],Ford–Fulkerson algorithm,1956,https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/maximal-flow-through-a-network/5D6E55D3B06C4F7B1043BC1D82D40764,,"['L. R. Ford Jr.', 'D. R. Fulkerson']",2,['Maximal Flow Through a Network'],,,,1,0,6,"V: 6,
E: 3",$O(VE)$,16,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",$O(E)$,creating new graph and using it as input to the Ford-Fulkerson algorithm,1,0,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,"V:E
1:1",500,,500000,,500000000,,250000,1,,250000000000,1,,2.5E+17,1,,4,,"http://www.cs.kent.edu/~dragan/GraphAn/p23-galil.pdf

https://hal.archives-ouvertes.fr/hal-01740403/document",Combinatorics,FALSE
28,Maximum Cardinality Matching,1,Bipartite Graph MCM,Bipartite Graph MCM,285,,,1,1,$O(V^{0.5} E)$,,,[https://epubs.siam.org/doi/10.1137/0202019 Hopcroft–Karp algorithm (1973)],Hopcroft–Karp algorithm,1973,https://epubs.siam.org/doi/10.1137/0202019,10.1137/0202019,"['John E. Hopcroft', 'Richard M. Karp']",2,['An $n^{5/2} $ Algorithm for Maximum Matchings in Bipartite Graphs'],,,,1,0,5.5,"V: 5.5,
E: 3",$O(V^{0.5} E)$,15.25,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,3,V: 3,$O(V)$,"maximal set of vertex-disjoint shortest augmenting paths uses $O(V)$ space to store, taking symmetric difference also uses $O(V)$ space",1,0,,0,,0,,0,0,,0,0,for PDF: https://web.eecs.umich.edu/~pettie/matching/Hopcroft-Karp-bipartite-matching.pdf,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,500,,500000,,500000000,,,,,,,,,,,4,,,Combinatorics,FALSE
28,Maximum Cardinality Matching,1,Bipartite Graph MCM,Bipartite Graph MCM,287,,,1,1,$O(V^{\omega/2})$,,,[https://link.springer.com/article/10.1007/s00453-005-1187-5 Mucha; Sankowski (planar) (2006)],Mucha; Sankowski (planar),2006,https://link.springer.com/article/10.1007/s00453-005-1187-5,10.1007/s00453-005-1187-5,"['Marcin Mucha', 'Piotr Sankowski']",2,['Maximum matchings in planar graphs via gaussian elimination'],,,,1,0,4.1864298,V: 4.1864298,$O(V^{\omega/2})$,15.097,"$V$: number of vertices
$E$: number of edges
$\omega$: matrix multiplication constant",V,,,Word RAM,words,4,V: 4,$O(V \log V)$??,Paper mentions matrices with $O(V \log V)$ nonempty entries; unclear if there are any other space-consuming objects as planar graphs only require $O(V)$ space,0,1,,1,Monte Carlo,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,1608.334452,155.4403063,0.1061939347,5893541.76,42419.31426,0.2375172828,21596151485,11576136.62,0.3844308644,4,,,Combinatorics,FALSE
28,Maximum Cardinality Matching,2,Bipartite Graph MCM,Bipartite Graph MCM,288,Based on electric flows,,1,1,$O(E^{10/7} \text{polylog}(V))$,,,[https://arxiv.org/abs/1307.2205 Madry's algorithm (2013)],Madry's algorithm,2013,https://arxiv.org/abs/1307.2205,,['Aleksander Madry'],1,"['Navigating Central Path with Electrical Flows: from Flows to Matchings, and Back']",,,,0,0,5.857,"V: 5.857,
E: 4.42857",$O(E^{10/7} \text{polylog}(V))$,15.614,"$V$: number of vertices
$E$: number of edges",V,https://arxiv.org/abs/1307.2205,0,Word RAM,words,5,"V: 5,
E: 3",$O(V + E)$,Derived: Uses an augmented graph (copy of the original graph plus an additional node with edges between it and all other nodes),1,0,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
28,Maximum Cardinality Matching,1,Bipartite Graph MCM,Bipartite Graph MCM,289,,,1,1,"$O(\min(Vk, E)+\sqrt{k}\min(k^2, E))$",,,[https://arxiv.org/abs/1105.1569 Chandran and Hochbaum (2011)],Chandran and Hochbaum,2011,https://arxiv.org/abs/1105.1569,,"['Bala G. Chandran', 'Dorit S. Hochbaum']",2,['Practical and theoretical improvements for bipartite matching using the pseudoflow algorithm'],,,,0,0,3,"V: 3,
E: 3,
k: 5.5","$O(\min(Vk, E)+\sqrt{k}\min(k^2, E))$",30,"$V$: number of vertices
$E$: number of edges
($k$: size of maximum matching)",V,,,Word RAM,words,5,"E: 3,
V: 5",$O(E)$??,Designs a flow network and runs pseudoflow algorithms on graph; space can be reused if too many residual graphs are created,1,0,,1,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
28,Maximum Cardinality Matching,1,General Graph MCM,General Graph MCM,290,,,1,1,$O(V^{0.5} E)$,,,[https://web.eecs.umich.edu/~pettie/matching/Blum-matching-ICALP90.pdf Blum (1990)],Blum,1990,https://web.eecs.umich.edu/~pettie/matching/Blum-matching-ICALP90.pdf,,['Norbert Blum'],1,['A New Approach to Maximum Matching in General Graphs'],,,,0,0,5.5,"V: 5.5,
E: 3",$O(V^{0.5} E)$,15.25,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",$O(E)$??,"Each phase, creates a separate directed graph and solves a reachability problem on it. Can reuse space across phases",1,0,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
28,Maximum Cardinality Matching,1,General Graph MCM,General Graph MCM,291,,,1,1,$O(V^{0.5} E)$,,,[https://web.eecs.umich.edu/~pettie/matching/Gabow-Tarjan-scaling-general-graph-matching.pdf Gabow; Tarjan (1991)],Gabow; Tarjan,1991,https://web.eecs.umich.edu/~pettie/matching/Gabow-Tarjan-scaling-general-graph-matching.pdf,,"['Harold N. Gabow', 'Robert E. Tarjan']",2,['Faster Scaling Algorithms for General Graph Matching Problems'],,,,0,0,5.5,"V: 5.5,
E: 3",$O(V^{0.5} E)$,15.25,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",$O(E)$?,https://web.eecs.umich.edu/~pettie/matching/Gabow-Tarjan-scaling-general-graph-matching.pdf,0,1,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
28,Maximum Cardinality Matching,1,General Graph MCM,General Graph MCM,292,,,1,1,$O(V^{\omega})$,,,"[https://ieeexplore.ieee.org/document/1366244 Mucha, Sankowski (general) (2004)]","Mucha, Sankowski (general)",2004,https://ieeexplore.ieee.org/document/1366244,,"['M. Mucha', 'P. Sankowski']",2,['Maximum matchings via Gaussian elimination'],,,,0,0,5.376,V: 5.376,$O(V^{\omega})$,15.109,"$V$: number of vertices
$E$: number of edges
$\omega$: matrix multiplication constant",V,,,Word RAM,words,5,V: 5,$O(V^2)$??,Algorithm uses/manipulates constant number of matrices and graphs?,1,0,,1,Monte Carlo,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
28,Maximum Cardinality Matching,2,,Planar Bipartite Graph Perfect Matching,293,,,1,1,$O(V^{4/3} \log V)$,,,[http://theory.stanford.edu/~virgi/cs267/papers/planar-sssp.pdf Klein (section 5) (1997)],Klein (section 5),1997,http://theory.stanford.edu/~virgi/cs267/papers/planar-sssp.pdf,,"['Monika R. Henzinger', 'Philip Klein', 'Satish Rao', 'Sairam Subramanian']",4,['Faster Shortest-Path Algorithms for Planar Graphs'],,,,1,0,4.33,V: 4.33,$O(V^{4/3} \log V)$,15.41,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,4.33,V: 4.33,$O(V^{4/3})$?,"Considers and operates on a graph partition (which still takes up $O(E)=O(V)$ space), and computes shortest-path distances within each graph partition, the total of which requires $O(V^{4/3})$ space",1,0,,0,,0,,0,0,,0,0,,"the goal is to find a matching with as many edges as possible
 (equivalently: a matching that covers as many vertices as possible).",,,,,,,,,,34851.25256,7.173343327,0.04923135134,719145396.2,347.6348473,0.1533964681,10727244188189,23305.14675,0.2779775233,4,,,Combinatorics,FALSE
29,Key Exchange,1,,Key Exchange,294,,,1,1,$O(n\cdot \text{mult}(n))$,"Not sure if ""average case"" distribution makes sense here",(none),[https://ieeexplore.ieee.org/document/1055638 Diffie–Hellman key exchange (1978)],Diffie–Hellman key exchange,1978,https://ieeexplore.ieee.org/document/1055638,,"['W. Diffie', 'M. Hellman']",2,['New directions in cryptography'],2,1,https://dl.acm.org/doi/10.1145/359460.359473,1,0,7,n: 7,$O(n\cdot \text{mult}(n))$,,"$n$: maximum size of numbers (prime, base, keys), in bits
$\text{mult}(n)$: running time on $n$-bit multiplication",n,,,Word RAM?,bits,3,n: 3,$O(n)$,Each party only keeps track of a constant number of $n$-bit integers,1,0,,0,,0,,0,0,,0,0,,"Key exchange (also key establishment) is a method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm.",,,,,,,,,,62500000000,1,,6.25E+22,1,,6.25E+34,1,,2,,,Cryptography,FALSE
29,Key Exchange,1,,Key Exchange,295,,,1,1,$O(n^2\text{mult}(n))$?,^see above,(none),[https://csrc.nist.gov/publications/detail/sp/800-56a/revised/archive/2007-03-14 Elliptic-curve Diffie-Hellman (ECDH) (2006)],Elliptic-curve Diffie-Hellman (ECDH),2006,https://csrc.nist.gov/publications/detail/sp/800-56a/revised/archive/2007-03-14,,"['Elaine Barker', 'Don Johnson', 'Miles Smid']",3,['Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography'],2,1,,0,0,7,n: 7,$O(n^2\text{mult}(n))$,,"$n$: maximum size of numbers (prime, base, keys), in bits
$\text{mult}(n)$: running time on $n$-bit multiplication",n,,,Word RAM?,bits,3,n: 3,$O(n)$,Each party only keeps track of a constant number of $n$-bit integers,1,0,,0,,0,,0,0,,0,0,https://csrc.nist.gov/pubs/sp/800/56/a/r3/final,"Key exchange (also key establishment) is a method in cryptography by which cryptographic keys are exchanged between two parties, allowing use of a cryptographic algorithm.",,,,,,,,,,125000000,500,,1.25E+17,500000,,1.25E+26,500000000,,2,,,Cryptography,FALSE
30,Mutual Exclusion,0.001,,2-thread Mutual Exclusion,296,,,1,1,$O(n)$,"Not sure if ""average case"" distribution makes sense here",(none),[- Dekker's algorithm (1963)],Dekker's algorithm,1963,-,,[],0,,1,1,,1,0,3,n: 3,$O(n)$,10,$n$: number of processes,n,,,,communication variables?,#VALUE!,,,,,,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Dekker%27s_algorithm

https://www.geeksforgeeks.org/dekkers-algorithm-in-process-synchronization/","mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Operating Systems,FALSE
30,Mutual Exclusion,1,,,297,,,1,1,$O(n)$,^see above,(none),[https://zoo.cs.yale.edu/classes/cs323/doc/Peterson.pdf Peterson's algorithm (1981)],Peterson's algorithm,1981,https://zoo.cs.yale.edu/classes/cs323/doc/Peterson.pdf,,['G.L. Peterson'],1,['Myths about the Mutual Exclusion Problem'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of processes,n,,,,communication variables?,3,n: 3,$O(n)$ total,"see original paper (""requires $2n-1$ shared variables of size $n$"")",0,1,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,1000,1,,,,,,,,6,,,Operating Systems,FALSE
30,Mutual Exclusion,1,,,303,,,1,1,$O(\log n)$,^see above,(none),[https://www.sciencedirect.com/science/article/abs/pii/S0743731596900416 Naimi-Trehel's algorithm (1996)],Naimi-Trehel's algorithm,1996,https://www.sciencedirect.com/science/article/abs/pii/S0743731596900416,,"['Mohamed Naimi', 'Michel Trehel', 'André Arnold']",3,['A Log (N) Distributed Mutual Exclusion Algorithm Based on Path Reversal'],,,,0,0,2,n: 2,$O(\log n)$,1,$n$: number of processes,n,,,,communication variables?,3,n: 3,"$O(1)$ per process, $O(n)$ total?",Each process keeps track of a constant number of variables (see algorithm description),1,0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,9.965,100.3512293,,,,,,,,6,,,Operating Systems,FALSE
30,Mutual Exclusion,1,,,305,,,1,1,$O(\log n)$,^see above,(none),[https://ieeexplore.ieee.org/document/113817 Chan-Singhal-Liu (1990)],Chan-Singhal-Liu,1990,https://ieeexplore.ieee.org/document/113817,,"['Y.-I. Chang', 'M. Singhal', 'M.T. Liu']",3,['A dynamic token-based distributed mutual exclusion algorithm'],,,,0,0,2,n: 2,$O(\log n)$,1,$n$: number of processes,n,,,,communication variables?,3,n: 3,"$O(1)$ per process, $O(n)$ total?",Each process seems to keep track of a constant number of variables (see algorithm description),1,0,,0,,0,,0,0,,0,0,,"mutual exclusion is a property of concurrency control; which is instituted
 for the purpose of preventing race conditions. ",,,,,,,,,,9.965,100.3512293,0.3338136837,19.93156857,50171.66594,0.966883593,29.89735285,33447777.3,1.953064644,6,,,Operating Systems,FALSE
31,SDD Systems Solvers,2,,Inexact Laplacian Solver,306,Spectral Sparsification,,1,0,$O(m \log^c n)$,,,"[https://dl.acm.org/doi/abs/10.1145/1007352.1007372 Spielman, Teng  (2004)]","Spielman, Teng ",2004,https://dl.acm.org/doi/abs/10.1145/1007352.1007372,10.1145/1007352.1007372,"['Daniel A. Spielman', 'Shang-Hua Teng']",2,"['Nearly-linear time algorithms for graph partitioning, graph sparsification, and solving linear systems']",,,,0,0,4,"m: 3,
n: 5.01,
n^2: 4",$O(m \log^c n)$,,"$n$: dimension of matrix
$m$: number of non-zero entries times $\log(1/\epsilon)$",n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$O(n)$,Derived: Uses spanning trees and sparse Cholesky factorization which both take $O(n)$ space,1,0,,0,,1,$\epsilon$,0,0,,0,0,https://pdfs.semanticscholar.org/9038/1cb96bcee79a8bfab06def49b762baee8da3.pdf,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis,FALSE
31,SDD Systems Solvers,2,,Inexact Laplacian Solver,307,Using maximum-weight spanning trees,,1,0,$O(mn^{3/4})$,,,[ Vaidya (1990)],Vaidya,1990,,,[],0,,,,,1,0,4.375,"n: 5.75,
m: 3,
n^2: 4.375",$O(mn^{3/4})$,,"$n$: dimension of matrix
$m$: number of non-zero entries times $\log(1/\epsilon)$",n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$O(n)$,Derived: Uses a spanning tree (size $O(n)$),1,0,,0,,1,$\epsilon$,0,0,,0,0,https://pdfs.semanticscholar.org/9038/1cb96bcee79a8bfab06def49b762baee8da3.pdf,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,2732020.846,Inf,,2732020845645,Inf,,2.73202E+18,Inf,,1,,,Numerical Analysis,FALSE
31,SDD Systems Solvers,2,,Inexact Laplacian Solver,308,Support Tree Conjugate Gradients (STCG),,1,1,$O(n^2)$,,,[https://www.cs.cmu.edu/~glmiller/Publications/Papers/GrMiZa94-tr.pdf Gremban; Miller; Zagha (1995)],Gremban; Miller; Zagha,1995,https://www.cs.cmu.edu/~glmiller/Publications/Papers/GrMiZa94-tr.pdf,,"['Keith D. Gremban', 'Gary L. Miller', 'Marco Zagha']",3,['Performance Evaluation of a New Parallel Preconditioner'],,,,1,3->4,3,"n: 5,
n^2: 3",$O(n^2)$,10,$n$: dimension of matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,https://www.cs.cmu.edu/~glmiller/Publications/Papers/GrMiZa94-tr.pdf,0,1,,0,,1,?,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,1000000,Inf,,1000000000000,Inf,,1E+18,Inf,,1,,,Numerical Analysis,FALSE
31,SDD Systems Solvers,0.001,,Inexact Laplacian Solver,310,,,1,0,$\tilde{O}(mn^{1/2})$,,,[https://www.researchgate.net/publication/242495354_On_spanning_tree_preconditioners Boman; Hendrickson (2001)],Boman; Hendrickson,2001,https://www.researchgate.net/publication/242495354_On_spanning_tree_preconditioners,,"['Erik G. Boman', 'Bruce Hendrickson']",2,['On Spanning Tree Preconditioners'],,,,1,0,4.25,"n: 5.5,
m: 3,
n^2: 4.25",$\tilde{O}(mn^{1/2})$,,"$n$: dimension of matrix
$m$: number of non-zero entries times $\log(1/\epsilon)$",n^2,,,,,#VALUE!,,,,,,,0,,1,$\epsilon$,0,0,,0,0,https://pdfs.semanticscholar.org/9038/1cb96bcee79a8bfab06def49b762baee8da3.pdf,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,3316.983346,Inf,,4316983.346,Inf,,4901945847,Inf,,1,,,Numerical Analysis,FALSE
31,SDD Systems Solvers,2,,Inexact Laplacian Solver,311,Maximum-weight-basis (MWB) preconditioners,,1,0,$O(n\log(1/\epsilon))$,,,[https://onlinelibrary.wiley.com/doi/abs/10.1002/nla.343 Boman; Chen; Hendrickson; Toledo (2004)],Boman; Chen; Hendrickson; Toledo,2004,https://onlinelibrary.wiley.com/doi/abs/10.1002/nla.343,10.1002/nla.343,"['Erik G. Boman', 'Doron Chen', 'Bruce Hendrickson', 'Sivan Toledo']",4,['Maximum-weight-basis preconditioners'],,,,0,0,2.5,"n: 3,
n^2: 2.5",$O(n\log(1/\epsilon))$,,"$n$: dimension of matrix
$m$: number of non-zero entries times $\log(1/\epsilon)$",n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$O(n)$,Derived: The preconditioners used have $O(n)$ non-zero entries,1,0,,0,,1,$\epsilon$,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis,FALSE
31,SDD Systems Solvers,2,,Inexact Laplacian Solver,312,Incremental sparsifier,,1,0,$\tilde{O}(m \log n)$,,,[https://arxiv.org/abs/1102.4842 Koutis; Miller and Peng (2010)],Koutis; Miller and Peng,2010,https://arxiv.org/abs/1102.4842,,"['Ioannis Koutis', 'Gary Miller', 'Richard Peng']",3,['A nearly-mlogn time solver for SDD linear systems'],,,,0,0,4,"m: 3,
n: 5.01,
n^2: 4",$\tilde{O}(m \log n)$,,"$n$: dimension of matrix
$m$: number of non-zero entries times $\log(1/\epsilon)$",n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$O(n)$,"Derived: Uses an auxiliary chain of graphs, which can be kept track of with a single spanning tree",1,0,,0,,1,$\epsilon$,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis,FALSE
31,SDD Systems Solvers,2,,Inexact Laplacian Solver,313,Incremental sparsifier,,1,0,$\tilde{O}(m \log n)$,,,[https://arxiv.org/abs/1003.2958 Koutis; Miller and Peng (2011)],Koutis; Miller and Peng,2011,https://arxiv.org/abs/1003.2958,,"['Ioannis Koutis', 'Gary L. Miller', 'Richard Peng']",3,['Approaching optimality for solving SDD systems'],,,,0,0,4,"m: 3,
n: 5.01,
n^2: 4",$\tilde{O}(m \log n)$,,"$n$: dimension of matrix
$m$: number of non-zero entries times $\log(1/\epsilon)$",n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$O(n)$,"Derived: Uses an auxiliary chain of graphs, which can be kept track of with a single spanning tree",1,0,,0,,1,$\epsilon$,0,0,,0,0,https://pdfs.semanticscholar.org/9038/1cb96bcee79a8bfab06def49b762baee8da3.pdf,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis,FALSE
31,SDD Systems Solvers,2,,Inexact Laplacian Solver,314,Combinatorial multigrid,,1,0,$O(n \log n)$,,,[https://ieeexplore.ieee.org/document/5644892 Blelloch; Koutis;  Miller; Tangwongsan (2010)],Blelloch; Koutis;  Miller; Tangwongsan,2010,https://ieeexplore.ieee.org/document/5644892,,"['Guy E. Blelloch', 'Ioannis Koutis', 'Gary L. Miller', 'Kanat Tangwongsan']",4,['Hierarchical Diagonal Blocking and Precision Reduction Applied to Combinatorial Multigrid'],,,,1,4->5,2.51,"n: 4,
n^2: 2.51",$O(n \log n)$,,"$n$: dimension of matrix
$m$: number of non-zero entries",n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5,
m: 3",$m + O(n/\log n)$,https://www.cs.cmu.edu/afs/cs.cmu.edu/Web/People/jkoutis/papers/SC10-paper.pdf,0,1,,0,,1,?,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,9965.784285,Inf,,19931568.57,Inf,,29897352854,Inf,,1,,,Numerical Analysis,FALSE
31,SDD Systems Solvers,2,,Inexact Laplacian Solver,316,Low-stretch spanning tree,,1,0,$O(m \log^2(n) \log \log n \log(1/\epsilon))$,,,[https://arxiv.org/abs/1301.6628 Kelner; Orecchia; Sidford; Zhu (2013)],Kelner; Orecchia; Sidford; Zhu,2013,https://arxiv.org/abs/1301.6628,,"['Jonathan A. Kelner', 'Lorenzo Orecchia', 'Aaron Sidford', 'Zeyuan Allen Zhu']",4,"['A Simple, Combinatorial Algorithm for Solving SDD Systems in Nearly-Linear Time']",,,,0,0,4.011,"n: 5.021,
m: 3,
n^2: 4.011",$O(m \log^2(n) \log \log n)$,,"$n$: dimension of matrix
$m$: number of non-zero entries times $\log(1/\epsilon)$",n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$O(n)$,Derived: Uses a spanning tree of the graph that the Laplacian is for,1,0,,0,,1,$\epsilon$,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis,FALSE
31,SDD Systems Solvers,2,,Inexact Laplacian Solver,317,Recursive algorithm with sparse Cholesky factorization of Laplacian,,1,0,$O(n)$,,,[https://arxiv.org/abs/1506.08204 Lee; Peng; Spielman (2015)],Lee; Peng; Spielman,2015,https://arxiv.org/abs/1506.08204,,"['Yin Tat Lee', 'Richard Peng', 'Daniel A. Spielman']",3,['Sparsified Cholesky Solvers for SDD linear systems'],2,1,https://arxiv.org/pdf/1506.08204.pdf,1,5->6,2.5,"n: 3,
n^2: 2.5",$O(n)$,,$n$: dimension of matrix,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$O(n)$,Derived: Uses an auxiliary sparse Cholesky decomposition which has $O(n)$ non-zero entries,1,0,,0,,1,The sparse Cholesky decomposition is a $2$-approximation,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,1000,Inf,,1000000,Inf,,1000000000,Inf,,1,,,Numerical Analysis,FALSE
31,SDD Systems Solvers,1,,Inexact Laplacian Solver,318,Support Theory (Trusses and Stiffness Matrices),,1,0,$O(n^{5/4} (\log^2(n) \log\log n)^{3/4} \log(1/\epsilon))$,,,[https://arxiv.org/abs/cs/0703119 Daitch; Spielman (2007)],Daitch; Spielman,2007,https://arxiv.org/abs/cs/0703119,,"['Samuel I. Daitch', 'Daniel A. Spielman']",2,['Support-Graph Preconditioners for 2-Dimensional Trusses'],,,,0,0,2.635,"n: 4.25,
n^2: 2.635",$O(n^{5/4} (\log^2(n) \log\log n)^{3/4} \log(1/\epsilon))$,,$n$: dimension of matrix,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$O(n)$,Derived: Uses an auxiliary sparse Cholesky decomposition which has $O(n)$ non-zero entries,1,0,,0,,1,$\epsilon$,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis,FALSE
31,SDD Systems Solvers,2,Exact Laplacian Solver,Exact Laplacian Solver,319,Use Gaussian elimination to compute the inverse of the Laplacian to solve for x,,1,1,$O(n^3)$,,,[- Gaussian Elimination (-150)],Gaussian Elimination,-150,-,,[],0,,1,1,,1,1->3,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,16,$n$: dimension of matrix,n^2,,,Word RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Derived: Storing the inverse of the Laplacian,1,0,,0,,0,,0,0,,0,0,https://pdfs.semanticscholar.org/e31c/0ce119f452e1804461c375f9814a6050519b.pdf,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,1000000000,Inf,,1E+18,Inf,,1E+27,Inf,,1,,,Numerical Analysis,FALSE
31,SDD Systems Solvers,2,Exact Laplacian Solver,Exact Laplacian Solver,320,Explicitly calculating the inverse of the Laplacian to solve for x,,1,1,$O(n!)$,,,[- Naive Implementation (1940)],Naive Implementation,1940,-,,[],0,,1,1,,1,0,8,"n: 8,
n^2: 8",$O(n!)$,9000,$n$: dimension of matrix,n^2,,,Word RAM,Word RAM,3,"n: 5,
n^2: 3",$O(n^2)$,Derived: The Leibniz formula for the determinant of the Laplacian can be computed with constant space. The adjugate matrix of the Laplacian takes $n^2$ space.,1,0,,0,,0,,0,0,,0,0,,"In mathematics, a square matrix is said to be diagonally dominant if, for every row of the matrix, the magnitude of the diagonal entry in a row is larger than or equal to the sum of the magnitudes of all the other (non-diagonal) entries in that row.",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,FALSE
32,Cycle Detection,1,,,321,,,1,1,$O((\lambda + \mu) t_f)$,"S = {0, ..., N-1}
F = {f | f: S -> S}
f chosen randomly from the N^N functions in F
",,[- Floyd's tortoise and hare algorithm (1967)],Floyd's tortoise and hare algorithm,1967,-,,[],0,,3,0,https://www.semanticscholar.org/paper/The-Complexity-of-Finding-Cycles-in-Periodic-Sedgewick-Szymanski/8f1e5d92733380112a44630d0561611121c3228d,1,0,3,"\lambda: 3,
\mu: 3,
t_f: 3",$O((\lambda + \mu) t_f)$,,"$t_f$: time to perform one evaluation of $f$
$\mu$: the starting index of the cycle
$\lambda$: the period of the cycle",\mu,,,,Pointer algo,1,\mu: 1,$O(1)$,Algorithmic Cryptanalysis,0,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Cycle_detection,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Combinatorics,FALSE
32,Cycle Detection,1,,,322,,,1,1,$O((\lambda + \mu) t_f)$,,,[https://maths-people.anu.edu.au/~brent/pd/rpb051i.pdf Brent's algorithm (1973)],Brent's algorithm,1973,https://maths-people.anu.edu.au/~brent/pd/rpb051i.pdf,,['RICHARD P. BRENT'],1,['AN IMPROVED MONTE CARLO FACTORIZATION ALGORITHM'],,,,0,0,3,"\lambda: 3,
\mu: 3,
t_f: 3",$O((\lambda + \mu) t_f)$,,"$t_f$: time to perform one evaluation of $f$
$\mu$: the starting index of the cycle
$\lambda$: the period of the cycle",\mu,,,,Pointer algo,1,\mu: 1,$O(1)$,Algorithmic Cryptanalysis,0,0,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,1000,,,,,,,,,6,,,Combinatorics,FALSE
32,Cycle Detection,1,,,323,,,1,1,$O((\lambda + \mu) \log(\lambda + \mu) t_f)$,,,[https://web.archive.org/web/20200318230848/http://www.inwap.com/pdp10/hbaker/hakmem/flows.html Gosper's algorithm (1978)],Gosper's algorithm,1978,https://web.archive.org/web/20200318230848/http://www.inwap.com/pdp10/hbaker/hakmem/flows.html,,"['M. Beeler', 'R.W. Gosper', 'R. Schroeppel']",3,['Hakmem -- Flows and Iterated Functions'],,,,0,0,4,"\lambda: 4,
\mu: 4,
t_f: 3",$O((\lambda + \mu) \log(\lambda + \mu) t_f)$,,"$t_f$: time to perform one evaluation of $f$
$\mu$: the starting index of the cycle
$\lambda$: the period of the cycle",\mu,,,,,2,"\mu: 2,
\lambda: 2",$\Theta(\log(\mu + \lambda))$,https://en.wikipedia.org/wiki/Cycle_detection#Gosper's_algorithm,0,0,,0,,0,,0,0,,0,0,,"cycle detection or cycle finding is the algorithmic problem of finding a cycle
 in a sequence of iterated function values.",,,,,,,,,,1000,,,,,,,,,6,,,Combinatorics,FALSE
33,Generating Random Permutations,2,General Permutations,General Permutations,326,,,1,1,$O(n^2)$,From randomness in the algorithm itself,(none),[https://www.worldcat.org/title/statistical-tables-for-biological-agricultural-and-medical-research/oclc/14222135 Fisher–Yates/Knuth shuffle (1938)],Fisher–Yates/Knuth shuffle,1938,https://www.worldcat.org/title/statistical-tables-for-biological-agricultural-and-medical-research/oclc/14222135,,"['Ronald Aylmer Fisher', 'Frank Yates']",2,"['Statistical tables for biological, agricultural and medical research']",,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,Need to keep track of which elements have been struck out already,1,0,,1,??,0,,0,0,,0,0,https://digital.library.adelaide.edu.au/dspace/handle/2440/10701,Generating random permutation of an input string.,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis,FALSE
33,Generating Random Permutations,2,General Permutations,General Permutations,327,,,1,1,$O(n)$,^see above,(none),[https://dl.acm.org/doi/10.1145/364520.364540 Durstenfeld's Algorithm 235 (1964)],Durstenfeld's Algorithm 235,1964,https://dl.acm.org/doi/10.1145/364520.364540,10.1145/364520.364540,['Richard Durstenfeld'],1,['Algorithm 235: Random permutation'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of elements,n,,,Word RAM,words,1,n: 1,$O(1)$,Essentially in-situ,1,0,,1,??,0,,0,0,,0,0,,Generating random permutation of an input string.,,,,1,0.3335214322,1,0.77827941,1,1.371373706,1000,,,,,,,,,6,,,Numerical Analysis,FALSE
33,Generating Random Permutations,2,General Permutations,General Permutations,328,,,1,1,$O(n)$,^see above,(none),[- Radix sorting method (1887)],Radix sorting method,1887,-,,[],0,,4,1,https://www.geeksforgeeks.org/radix-sort/,1,0,3,n: 3,$O(n)$,10,$n$: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,"Need to keep track of randomly generated numbers, but otherwise see radix sort",1,0,,1,??,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Radix_sort,Generating random permutation of an input string.,,,,1000,,1000000,,1000000000,,1000,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis,FALSE
33,Generating Random Permutations,2,,Cyclic Permutations,329,,,1,1,$O(n)$,^see above,(none),[https://www.sciencedirect.com/science/article/abs/pii/0020019086900736 Sattolo's algorithm (1986)],Sattolo's algorithm,1986,https://www.sciencedirect.com/science/article/abs/pii/0020019086900736,,['Sandra Sattolo'],1,['An algorithm to generate a random cyclic permutation'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of elements,n,,,Word RAM,words,1,n: 1,$O(1)$,Essentially in-situ,1,0,,1,??,0,,0,0,,0,0,,Generating random permutation of an input string.,,,,,,,,,,1000000,,,,,,,,,6,,,Numerical Analysis,FALSE
34,Convex Optimization (Non-linear),1,,ILP;MILPs,330,,0,1,1,"$O(2^n \text{poly}(n, m))$? (previously $O(n^3)$)",,,[https://www.cs.uleth.ca/~benkoczi/OR/read/cutting-stock-LP.pdf Gomory's cutting method (1953)],Gomory's cutting method,1953,https://www.cs.uleth.ca/~benkoczi/OR/read/cutting-stock-LP.pdf,,"['P. C. Gilmore', 'R. E. Gomory']",2,['A Linear Programming Approach to the Cutting-Stock Problem'],2,1,http://www.math.wsu.edu/faculty/genz/364/lessons/l603.pdf,1,0,8,"n: 8,
m: 7","$O(2^n \text{poly}(n, m))$",,"$n$: number of variables
$m$: number of constraints
$L$: length of input, in bits",n,,,Word/Real RAM,words,3,"n: 3,
m: 5",$O(nm+m^2)$,"See simplex algorithm, but also $O(m)$ variables and constraints are introduced",1,0,,0,,1,,0,0,,0,0,https://en.wikipedia.org/wiki/Ralph_E._Gomory,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,1000000000,1,,1E+18,1,,1E+27,1,,3,,,Numerical Analysis,FALSE
34,Convex Optimization (Non-linear),1,Convex Optimization (Non-linear),"General, Constrained optimization",331,,0,1,1,$O(n^4)$,,,[https://link.springer.com/content/pdf/10.1007/BFb0120703.pdf Wolfe; Lemaréchal; Kiwiel (1964)],Wolfe; Lemaréchal; Kiwiel,1964,https://link.springer.com/content/pdf/10.1007/BFb0120703.pdf,,['Philip Wolfe'],1,['A method of conjugate subgradients for minimizing nondifferentiable functions'],,,,0,0,7,n: 7,$O(n^4)$,40,"$n$: number of variables
$m$: number of constraints
$L$: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
L: 3",$O(n+L)$??,"keeps track of current guess $x^{(k)}$, and computes bundle $G^{(k)}$, direction $d^{(k)}$, and scalar $t^{(k)}$?",1,0,,0,,1,,0,0,,0,0,,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,1000000000000,,,,,,,,,3,,,Numerical Analysis,FALSE
34,Convex Optimization (Non-linear),1,Convex Optimization (Non-linear),"General, Constrained optimization",332,,0,1,1,$O(n^2 \log n)$,,,[https://www.sciencedirect.com/science/article/abs/pii/0041555380900610 Ellipsoid method (1971)],Ellipsoid method,1971,https://www.sciencedirect.com/science/article/abs/pii/0041555380900610,,['L.G. Khachiyan'],1,['Polynomial algorithms in linear programming'],,,,1,0,5.01,n: 5.01,$O(n^2 \log n)$,21,"$n$: number of variables
$m$: number of constraints
$L$: length of input, in bits",n,,,Word RAM,words,3,"n: 3,
m: 3,
L: 3",$O(nmL)$,see orginal paper (noting that $O(\alpha\log(H \alpha)) = O(L)$),0,1,,0,,1,,0,0,,0,0,https://en.wikipedia.org/wiki/Ellipsoid_method,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,9965784.285,100.3433319,0.2917956166,19931568569324,50171.66594,0.8244694033,2.98974E+19,33447777.3,1.618306015,3,,,Numerical Analysis,FALSE
34,Convex Optimization (Non-linear),1,Convex Optimization (Non-linear),"General, Constrained optimization",333,,0,1,1,$O(n^2)$,,,[https://www.springer.com/gp/book/9783642821202 Subgradient method (1981)],Subgradient method,1981,https://www.springer.com/gp/book/9783642821202,10.1007/978-3-642-82118-9,['Naum Zuselevich Shor'],1,['Minimization Methods for Non-Differentiable Functions'],1,1,https://en.wikipedia.org/wiki/Subgradient_method,1,3->4,5,n: 5,$O(n^2)$,20,"$n$: number of variables
$m$: number of constraints
$L$: length of input, in bits",n,,,Word/Real RAM,words,3,"n: 3,
L: 3",$O(n+L)$?,"keep track of current guess $x^{(k)}$, and needs to compute subgradient $g^{(k)}$",1,0,,0,,1,,0,0,,0,0,,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,1000000,1000,0.279802214,1000000000000,1000000,0.637893707,1E+18,1000000000,1.096179992,3,,,Numerical Analysis,FALSE
34,Convex Optimization (Non-linear),1,Convex Optimization (Non-linear),Stochastic optimization,334,,0,1,1,$O(n^2)$,,,[ Dual subgradients and the drift-plus-penalty method (1993)],Dual subgradients and the drift-plus-penalty method,1993,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,"$n$: number of variables
$m$: number of constraints
$V$: weight parameter (and average queue size)
$L$: length of input, in bits",n,,,Word/Real RAM,words,3,"n: 3,
m: 3,
V: 3",$O(Vmn)$??,involves minimizing an expression with up to $O(Vmn)$ terms per iteration?,1,0,,0,,1,,0,0,,0,0,,Convex optimization is a subfield of mathematical optimization that studies the problem of minimizing convex functions over convex sets.,,,,,,,,,,1000000,,,,,,,,,3,,,Numerical Analysis,FALSE
35,Gröbner Bases,1,,Gröbner Bases,335,,,1,1,$O(d^{2^{n+o(1)}})$,,,[https://dl.acm.org/doi/10.1145/1088216.1088219 Buchberger's algorithm (1976)],Buchberger's algorithm,1976,https://dl.acm.org/doi/10.1145/1088216.1088219,10.1145/1088216.1088219,['B. Buchberger'],1,['A theoretical basis for the reduction of polynomials to canonical forms'],2,0,https://dl.acm.org/doi/pdf/10.1145/1088216.1088219,1,0,8,n: 8,$O(d^{2^{n+o(1)}})$,,"$n$: number of variables in each polynomial
$d$: maximal total degree of the polynomials",n,,,Word RAM,words,8,"n: 8,
d: 7",$d^{2^{n+o(1)}}$??,"Output may contain that many elements. However, this bound seems very crude/loose",1,0,,0,,0,,0,0,,0,0,"EXPSPACE-hard reference: ""Complexity of Gröbner basis detection and border basis detection""","In mathematics, and more specifically in computer algebra, computational algebraic geometry, and computational commutative algebra, a Gröbner basis is a particular kind of generating set of an ideal in a polynomial ring K[x1, ..,xn] over a field K. ",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,turns out this is EXPSPACE hard: https://www.sciencedirect.com/science/article/pii/S0304397512007505,,Numerical Analysis,FALSE
35,Gröbner Bases,1,,Gröbner Bases,336,,,1,1,$O(\binom{n+D_{reg}}{D_{reg}}^{\omega})$,,,[https://linkinghub.elsevier.com/retrieve/pii/S0022404999000055 Faugère F4 algorithm (1999)],Faugère F4 algorithm,1999,https://linkinghub.elsevier.com/retrieve/pii/S0022404999000055,,['Jean-Charles Faugére'],1,['A new efficient algorithm for computing Gröbner bases (F4)'],1,1,https://reader.elsevier.com/reader/sd/pii/S0022404999000055?token=DC73BE34D9F12491D472CE3BBE70B5745448C6F5A27E99595808DA4B6E66531C37C9B7D23A7AFD7419D27DC7F06396F7,1,0,8,n: 8,$O(\binom{n+D_{reg}}{D_{reg}}^{\omega})$,,"$n$: number of variables in each polynomial
$D_{reg}$: smallest degree for which a nontrivial relation occurs
$\omega$: exponent on matrix multiplication",n,,,Word RAM,words,8,n: 8,$O(\binom{n+D_{reg}}{D_{reg}}^2)$?,Seems to keep track of a square matrix (for monomials) of size $O(\binom{n+D_{reg}}{D_{reg}}^2$),1,0,,0,,0,,0,0,,0,0,https://eprint.iacr.org/2021/051.pdf,"In mathematics, and more specifically in computer algebra, computational algebraic geometry, and computational commutative algebra, a Gröbner basis is a particular kind of generating set of an ideal in a polynomial ring K[x1, ..,xn] over a field K. ",,,"d:n
1:400",,,,,,,1000000000,Inf,,1E+18,Inf,,1E+27,Inf,,1,,,Numerical Analysis,FALSE
35,Gröbner Bases,1,,Gröbner Bases,337,,,1,1,$O(\binom{n+D_{reg}}{D_{reg}}^{\omega})$,,,[https://dl.acm.org/doi/10.1145/780506.780516 Faugère F5 algorithm (2002)],Faugère F5 algorithm,2002,https://dl.acm.org/doi/10.1145/780506.780516,10.1145/780506.780516,['Jean-Charles Faugére'],1,['A new efficient algorithm for computing Gröbner bases without reduction to zero (F5)'],,,,0,0,8,n: 8,$O(\binom{n+D_{reg}}{D_{reg}}^{\omega})$,,"$n$: number of variables in each polynomial
$D_{reg}$: smallest degree for which a nontrivial relation occurs
$\omega$: exponent on matrix multiplication",n,,,Word RAM,words,8,n: 8,$O(\binom{n+D_{reg}}{D_{reg}}^2)$?,Seems to keep track of a square matrix (for monomials) of size $O(\binom{n+D_{reg}}{D_{reg}}^2$),1,0,,0,,0,,0,0,,0,0,https://hal.inria.fr/hal-01064519/document,"In mathematics, and more specifically in computer algebra, computational algebraic geometry, and computational commutative algebra, a Gröbner basis is a particular kind of generating set of an ideal in a polynomial ring K[x1, ..,xn] over a field K. ",,,,,,,,,,,,,,,,,,,1,,,Numerical Analysis,FALSE
36,Minimum value in each row of an implicitly-defined totally monotone matrix,1,,,338,,,1,1,$O(mn)$,,,[- Naive algorithm (1940)],Naive algorithm,1940,-,,[],0,,1,1,,1,0,3,"n: 3,
m: 3,
mn: 3",$O(mn)$,10,"$n$, $m$: dimensions of matrix; assume $m\geq n$
possibly uses a function $f$ to define entries; assume evaluation of $f$ takes time $O(1)$",mn,,,Word RAM,words,1,"n: 1,
mn: 1",$O(1)$,"Only needs to keep track of current minimum in current row - once done with a row, can send stored minimum to output and recycle space",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,250000,1,,250000000000,1,,2.5E+17,1,,4,,,Combinatorics,FALSE
36,Minimum value in each row of an implicitly-defined totally monotone matrix,1,,,339,,,1,1,$O(n(1+\log(n/m)))$,,,[https://link.springer.com/article/10.1007/BF01840359 SMAWK algorithm (1987)],SMAWK algorithm,1987,https://link.springer.com/article/10.1007/BF01840359,10.1007/BF01840359,"['Alok Aggarwal', 'Maria M. Klawe', 'Shlomo Moran', 'Peter Shor', 'Robert Wilber']",5,['Geometric applications of a matrix-searching algorithm'],0.25,0,https://link.springer.com/content/pdf/10.1007/BF01840359.pdf,1,4->6,2.51,"n: 4,
m: 1.5,
mn: 2.51",$O(n(1+\log(n/m)))$,,"$n$, $m$: dimensions of matrix; assume $m\geq n$
possibly uses a function $f$ to define entries; assume evaluation of $f$ takes time $O(1)$",mn,,,Word RAM,words,2.5,"n: 3,
mn: 2.5",$O(n)$?,Need to keep track of which columns aren't pruned. Also uses $O(n)$ auxiliary space during prune-and-search?,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,250,0.1246567656,1000000,250000,0.3027161207,1000000000,250000000,0.5089664179,4,,,Combinatorics,FALSE
37,All Permutations,2,All Permutations,All Permutations,340,,,1,1,amortized $O(1)$ per permutation (minus outputting); $O(n\times n!)$ total,averaged over all permutations,https://dl.acm.org/doi/10.1145/356689.356692,[https://www.ams.org/journals/mcom/1963-17-083/S0025-5718-1963-0159764-2/home.html Steinhaus–Johnson–Trotter algorithm (1963)],Steinhaus–Johnson–Trotter algorithm,1963,https://www.ams.org/journals/mcom/1963-17-083/S0025-5718-1963-0159764-2/home.html,,['Selmer M. Johnson'],1,['Generation of permutations by adjacent transposition'],2,1,https://en.wikipedia.org/wiki/Steinhaus–Johnson–Trotter_algorithm,0,0,8,n: 8,$O(n\times n!)$,,$n$: number of elements,n,,,Word RAM,words,1,n: 1,$O(1)$,Determining $x_i$ and $y_i$ each iteration can be done in constant space,1,0,,0,,0,,0,0,,0,0,,All permutations of an input string.,,,,1,1.682695795,1,6.19685673,1,18.30697729,1000,1000,,1000000,1000000,,1000000000,1000000000,,4,,,Numerical Analysis,FALSE
37,All Permutations,2,All Permutations,All Permutations,341,,,1,1,amortized $O(1)$ per permutation (minus outputting); $O(n\times n!)$ total,averaged over all permutations,(napkin math - number of iterations is approximately e*n!),[https://mathscinet.ams.org/mathscinet-getitem?mr=0080380 Tompkins–Paige algorithm (1956)],Tompkins–Paige algorithm,1956,https://mathscinet.ams.org/mathscinet-getitem?mr=0080380,,['Charles Tompkins'],1,['Machine attacks on problems whose variables are permutations'],1,1,https://en.wikipedia.org/wiki/Tompkins–Paige_algorithm,1,0,8,n: 8,$O(n\times n!)$,,$n$: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,Keeps track of auxiliary counting array,1,0,,0,,0,,0,0,,0,0,,All permutations of an input string.,,,,1000,,1000000,,1000000000,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Numerical Analysis,FALSE
37,All Permutations,2,All Permutations,All Permutations,342,,,1,1,$O(1)$ per permutation (minus outputting); $O(n\times n!)$ total,averaged over all permutations,Easily derived (each permutation takes O(1) time) ,[https://academic.oup.com/comjnl/article/6/3/293/360213 Heap's algorithm (1963)],Heap's algorithm,1963,https://academic.oup.com/comjnl/article/6/3/293/360213,10.1093/comjnl/6.3.293,['B. R. Heap'],1,['Permutations by Interchanges'],,,,0,0,8,n: 8,$O(n\times n!)$,,$n$: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,$O(n)$-sized stack or array necessary,1,0,,0,,0,,0,0,,0,0,,All permutations of an input string.,,,,,,,,,,1000,,,,,,,,,4,,,Numerical Analysis,FALSE
38,Optimal Binary Search Trees,2,,Alphabetic Tree Problem,343,,,1,1,$O(n \log n)$,,,[https://epubs.siam.org/doi/abs/10.1137/0206045 Garsia–Wachs algorithm (1977)],Garsia–Wachs algorithm,1977,https://epubs.siam.org/doi/abs/10.1137/0206045,10.1137/0206045,"['Adriano M. Garsia', 'Michelle L. Wachs']",2,['A New Algorithm for Minimum Cost Binary Trees'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,"https://epubs.siam.org/doi/epdf/10.1137/0206045, See implementation of MINTREE",0,1,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,9965,,,,,,,,,1,,,Combinatorics,FALSE
38,Optimal Binary Search Trees,2,,Alphabetic Tree Problem,344,,,1,1,$O(n \log n)$,,,[https://epubs.siam.org/doi/10.1137/0121057 Hu–Tucker algorithm (1971)],Hu–Tucker algorithm,1971,https://epubs.siam.org/doi/10.1137/0121057,10.1137/0121057,"['T. C. Hu', 'A. C. Tucker']",2,['Optimal Computer Search Trees and Variable-Length Alphabetical Codes'],4,0,https://epubs.siam.org/doi/10.1137/0121057,1,4->5,4,n: 4,$O(n \log n)$,11,$n$: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,https://epubs.siam.org/doi/10.1137/0121057,0,1,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,9965,Inf,,19931568.57,Inf,,29897352854,Inf,,1,,,Combinatorics,FALSE
38,Optimal Binary Search Trees,2,OBST,OBST,345,,,1,1,$O(n^2)$,,,[https://link.springer.com/article/10.1007/BF00264289 Knuth's DP algorithm (1971)],Knuth's DP algorithm,1971,https://link.springer.com/article/10.1007/BF00264289,,['Donald E. Knuth'],1,['Optimum binary search trees'],,,,1,3->4,5,n: 5,$O(n^2)$,20,$n$: number of elements,n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4492658,0,0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000000,Inf,,1000000000000,Inf,,1E+18,Inf,,1,,,Combinatorics,FALSE
38,Optimal Binary Search Trees,2,OBST,OBST,346,,,1,1,$O(n^3)$,,,"[https://ieeexplore.ieee.org/document/6768523 DP algorithm (Gilbert, Moore) (1959)]","DP algorithm (Gilbert, Moore)",1959,https://ieeexplore.ieee.org/document/6768523,,"['E. N. Gilbert', 'E. F. Moore']",2,['Variable-length binary encodings'],,,,1,1->3,6,n: 6,$O(n^3)$,30,$n$: number of elements,n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=4492658,0,0,,0,,0,,0,0,,0,0,https://link.springer.com/article/10.1007/BF00264289,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000000000,Inf,,1E+18,Inf,,1E+27,Inf,,1,,,Combinatorics,FALSE
38,Optimal Binary Search Trees,1,OBST,OBST,347,,,1,1,$O(4^n/n^{3/2})$,,,[https://link.springer.com/article/10.1007/BF00264289 Naive algorithm (1940)],Naive algorithm,1940,https://link.springer.com/article/10.1007/BF00264289,,['D. E. Knuth'],1,['Optimum binary search trees'],1,1,,1,0,8,n: 8,$O(4^n/n^{3/2})$,1984,$n$: number of elements,n,,,Word RAM,words,1,n: 1,$O(1)$,Derived: Constant space to verify optimality. Constant space if you can enumerate the trees in-situ.,1,0,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
38,Optimal Binary Search Trees,2,OBST,OBST,349,,,1,1,$O(n^2)$,,,[https://doi.org/10.1137/0603055 Yao (1982)],Yao,1982,https://doi.org/10.1137/0603055,10.1137/0603055,['F. Frances Yao'],1,['Speed-Up in Dynamic Programming'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of elements,n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://doi.org/10.1137/0603055,0,1,,0,,0,,0,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000000,,,,,,,,,1,,,Combinatorics,FALSE
38,Optimal Binary Search Trees,2,,Approximate OBST,353,,,1,0,$O(n)$,,,[https://www.sciencedirect.com/science/article/pii/0304397589901345 Levcopoulos; Lingas; Sack (1989)],Levcopoulos; Lingas; Sack,1989,https://www.sciencedirect.com/science/article/pii/0304397589901345,,"['Christos Levcopoulos', 'Andrzej Lingas', 'Jörg-R. Sack']",3,['Heuristics for optimum binary search trees and minimum weight triangulation problems'],,,,1,5->6,3,n: 3,$O(n)$,10,$n$: number of elements,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: Uses an auxiliary list of initial size $4n$,1,0,,0,,1,$1 + \epsilon$,1,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000,,,,,,,,,1,,,Combinatorics,FALSE
38,Optimal Binary Search Trees,2,,Approximate OBST,354,,,1,0,$O(n)$,,,[https://www.sciencedirect.com/science/article/pii/002001909390212R de Prisco (1993)],de Prisco,1993,https://www.sciencedirect.com/science/article/pii/002001909390212R,,"['Roberto De Prisco', 'Alfredo De Santis']",2,['On binary search trees'],,,,0,0,3,n: 3,$O(n)$,10,"$n$: number of elements
$H$: entropy of the given distribution
$p_0$: first element
$p_n$: last element
$p_{max}$: largest element",n,,,Word RAM,words,3,n: 3,$O(n)$,"Derived: Uses an auxiliary probability distribution, and three phases that alter a single tree that eventually is the result",1,0,,0,,1,Upper bound: $H + 1 - p_0 - p_n + p_{max}$,1,0,,0,0,,"an optimal binary search tree (Optimal BST); sometimes called a weight-balanced
 binary tree; is a binary search tree which provides the smallest possible search
 time (or expected search time) for a given sequence of accesses
 (or access probabilities). Optimal BSTs are generally divided
 into two types: static and dynamic.",,,,,,,,,,1000,,,,,,,,,1,,,Combinatorics,FALSE
39,Nash Equilibria,1,2-Player Nash Equilibria,2-player,355,,,1,1,$2^{O(n+m)}$,,,[https://epubs.siam.org/doi/abs/10.1137/0112033?journalCode=smjmap.1 Lemke–Howson algorithm (1964)],Lemke–Howson algorithm,1964,https://epubs.siam.org/doi/abs/10.1137/0112033?journalCode=smjmap.1,10.1137/0112033,"['C. E. Lemke', 'J. T. Howson, Jr.']",2,['Equilibrium Points of Bimatrix Games'],1,1,"https://web.stanford.edu/~saberi/lecture4.pdf
https://ieeexplore.ieee.org/document/4031395",1,0,8,"n: 8,
m: 8,
mn: 8",$2^{O(n+m)}$,960,"$n$, $m$: dimensions of payoff matrices",mn,,,Word RAM,words,3,"n: 3,
m: 3,
mn: 3",$O(mn)$?,,1,0,,0,,0,,0,0,,0,0,,"In game theory, the Nash equilibrium, named after the mathematician John Forbes Nash Jr., is a proposed solution of a non-cooperative game involving two or more players in which each player is assumed to know the equilibrium strategies of the other players, and no player has anything to gain by changing only his own strategy.",,,,,,,,,,1000000000000,1,,1E+24,1,,1E+36,1,,2,,,Robotics,FALSE
39,Nash Equilibria,1,2-Player Nash Equilibria,2-player,356,,0,1,1,$O(n^{O(\log n)}$,,,[https://dl.acm.org/doi/10.1145/779928.779933 Lipton; Mehta (2003)],Lipton; Mehta,2003,https://dl.acm.org/doi/10.1145/779928.779933,10.1145/779928.779933,"['Richard J. Lipton', 'Evangelos Markakis', 'Aranyak Mehta']",3,['Playing large games using simple strategies'],,,,1,0,8,"n: 8,
m: 8,
mn: 8",$O(n^{O(\log n/\epsilon^2)}$,,"$n$: dimension of payoff matrices
$\epsilon$: error; ""incentive to defect""",mn,https://dl.acm.org/doi/pdf/10.1145/779928.779933,1,Word RAM,words,2.01,"n: 2.01,
mn: 2.01",$O(\log^2(n)/\epsilon^2)$,,1,0,,0,,1,,0,0,,0,0,,"In game theory, the Nash equilibrium, named after the mathematician John Forbes Nash Jr., is a proposed solution of a non-cooperative game involving two or more players in which each player is assumed to know the equilibrium strategies of the other players, and no player has anything to gain by changing only his own strategy.",,,,,,,,,,9965784,100343.3348,,19931568569324,50171665944,,2.98974E+19,3.34478E+16,,2,,,Robotics,FALSE
40,Maximum-Weight Matching,1,Bipartite Maximum-Weight Matching,Bipartite Maximum-Weight Matching,357,,,1,1,$O(n^4)$,,,[https://web.eecs.umich.edu/~pettie/matching/Kuhn-hungarian-assignment.pdf Hungarian algorithm (1955)],Hungarian algorithm,1955,https://web.eecs.umich.edu/~pettie/matching/Kuhn-hungarian-assignment.pdf,,['H. W. Kuhn'],1,['THE HUNGARIAN METHOD FOR THE ASSIGNMENT PROBLEM'],2,1,https://web.eecs.umich.edu/~pettie/matching/Kuhn-hungarian-assignment.pdf,1,0,7,n: 7,$O(n^4)$,20,$n$: number of vertices,n,,,Word RAM,words,5,n: 5,$O(n^2)$,Either graph interpretation maintains $O(n^2)$ orientations and $O(n)$ potential or matrix interpretation manipulates an $O(n)\times O(n)$ auxiliary matrix,1,0,,0,,0,,0,0,,0,0,,"In computer science, the maximum weight matching problem is the problem of finding, in a weighted graph, a matching in which the sum of weights is maximized.",,,,,,,,,,1000000000000,1,,1E+24,1,,1E+36,1,,2,,,Combinatorics,FALSE
40,Maximum-Weight Matching,1,General Maximum-Weight Matching,Maximum-Weight Matching,358,,,1,1,$O(mn^2)$,,,[https://nvlpubs.nist.gov/nistpubs/jres/69B/jresv69Bn1-2p125_A1b.pdf Edmonds (1965)],Edmonds,1965,https://nvlpubs.nist.gov/nistpubs/jres/69B/jresv69Bn1-2p125_A1b.pdf,,['Jack Edmonds'],1,"['Maximum Matching and a Polyhedron With 0,1-Vertices']",1,1,,0,0,7,"n: 7,
m: 3",$O(mn^2)$,20,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,7,"n: 7,
m: 3",$O(mn^2)$??,"At worst, keeps track of the entire sequence of graphs created; it's possible this can be improved?",1,0,,0,,0,,0,0,,0,0,,"In computer science, the maximum weight matching problem is the problem of finding, in a weighted graph, a matching in which the sum of weights is maximized.",,,,,,,,,,1000000000,1000,,1E+18,1000000,,1E+27,1000000000,,2,,,Combinatorics,FALSE
28,Maximum Cardinality Matching,1,General Graph MCM,General Graph MCM,359,,,1,1,$O(E \sqrt{V})$,,,[https://ieeexplore.ieee.org/document/4567800 Micali; Vazirani (1980)],Micali; Vazirani,1980,https://ieeexplore.ieee.org/document/4567800,,"['S. Micali', 'V. Vazirani']",2,['An $O(\sqrt{|v|}\cdot |E|$ algorithm for finding maximum matching in general graphs'],,,,0,0,5.5,V: 5.5,$O(E \sqrt{V})$,26.5,"$V$: number of vertices
$E$: number of edges",V,,,,,5,V: 5,$O(E)$?,"At worst, keeps track of a copy of the graph at each phase",1,0,,0,,0,,0,0,,0,0,,"In computer science, the maximum weight matching problem is the problem of finding, in a weighted graph, a matching in which the sum of weights is maximized.",,,,,,,,,,,,,,,,,,,2,,,Combinatorics,FALSE
41,Constructing Eulerian Trails in a Graph,1,Constructing Eulerian Trails in a Graph,Constructing Eulerian Trails in a Graph,362,,,1,1,$O(E^2)$,,,[https://collaborate.princeton.edu/en/publications/a-note-on-finding-the-bridges-of-a-graph Fleury's algorithm + Tarjan (1974)],Fleury's algorithm + Tarjan,1974,https://collaborate.princeton.edu/en/publications/a-note-on-finding-the-bridges-of-a-graph,10.1016/0020-0190(74)90003-9,['R.Endre Tarjan'],1,['A note on finding the bridges of a graph'],,,,0,0,7,"V: 7,
E: 5",$O(E^2)$,20,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",$O(E)$,Keep track of current path + remaining edges needed to be traversed,1,0,,0,,0,,0,0,,0,0,,"In graph theory, an Eulerian trail (or Eulerian path) is a trail in a finite graph that visits every edge exactly once (allowing for revisiting vertices). Similarly, an Eulerian circuit or Eulerian cycle is an Eulerian trail that starts and ends on the same vertex.",,,,,,,,,,,,,,,,,,,6,,,Combinatorics,FALSE
41,Constructing Eulerian Trails in a Graph,2,Constructing Eulerian Trails in a Graph,Constructing Eulerian Trails in a Graph,363,,,1,1,$O(E)$,Any distribution of values,(need to read entire input),[- Hierholzer's algorithm (1873)],Hierholzer's algorithm,1873,-,,[],0,,3,1,https://www.geeksforgeeks.org/hierholzers-algorithm-directed-graph/,1,0,5,"V: 5,
E: 3",$O(E)$,10,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",$O(E)$,Keep track of current path + remaining edges needed to be traversed,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Eulerian_path#Fleury's_algorithm,"In graph theory, an Eulerian trail (or Eulerian path) is a trail in a finite graph that visits every edge exactly once (allowing for revisiting vertices). Similarly, an Eulerian circuit or Eulerian cycle is an Eulerian trail that starts and ends on the same vertex.",,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Combinatorics,FALSE
41,Constructing Eulerian Trails in a Graph,1,Constructing Eulerian Trails in a Graph,Constructing Eulerian Trails in a Graph,364,,,1,1,$O(E \log^3(E) \log\log E)$,,,[https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf Fleury's algorithm + Thorup (2000)],Fleury's algorithm + Thorup,2000,https://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf,,['Mikkel Thorup'],1,['Near-optimal fully-dynamic graph connectivity'],,,,0,0,5.03,"V: 5.03,
E: 4.01",$O(E \log^3(E) \log\log E)$,13.1,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,5,"E: 3,
V: 5",$O(E)$,Keep track of current path + remaining edges needed to be traversed,1,0,,0,,0,,0,0,,0,0,,"In graph theory, an Eulerian trail (or Eulerian path) is a trail in a finite graph that visits every edge exactly once (allowing for revisiting vertices). Similarly, an Eulerian circuit or Eulerian cycle is an Eulerian trail that starts and ends on the same vertex.",,,,,,,,,,,,,,,,,,,6,,,Combinatorics,FALSE
42,Discrete Fourier Transform,2,Discrete Fourier Transform,Discrete Fourier Transform,365,,,1,1,$O(n^2)$,Any distribution of values,(same general behavior for all inputs),[- Naive algorithm (1965)],Naive algorithm,1965,-,,[],0,,1,1,https://ccrma.stanford.edu/~jos/mdft/,1,0,5,n: 5,$O(n^2)$,20,$n$: length of the input data set,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,Derived: You only need a constant number of variables that are of $O(1)$ size at any given time,1,0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Signal Processing,FALSE
42,Discrete Fourier Transform,2,Discrete Fourier Transform,Discrete Fourier Transform,366,,,1,1,$O(n \log n)$,Any distribution of values,(same general behavior for all inputs),[https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/S0025-5718-1965-0178586-1.pdf Cooley–Tukey algorithm (1965)],Cooley–Tukey algorithm,1965,https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/S0025-5718-1965-0178586-1.pdf,,"['James W. Cooley', 'John W. Tukey']",2,['An Algorithm for the Machine Calculation of Complex Fourier Series'],3,0,https://www.ams.org/journals/mcom/1965-19-090/S0025-5718-1965-0178586-1/S0025-5718-1965-0178586-1.pdf,1,4->5,4,n: 4,$O(n \log n)$,11,$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,$O(n)$?,Computes and keeps track of DFTs for recursive subcases,1,0,,0,,0,,0,0,,0,0,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=1055938,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965,100.3512293,0.2024330587,19931568.57,50171.66594,0.5417655625,29897352854,33447777.3,0.9997453266,4,,,Signal Processing,FALSE
42,Discrete Fourier Transform,2,Discrete Fourier Transform,Discrete Fourier Transform,367,,,1,1,$O(n \log n)$,Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1162805 Rader–Brenner algorithm (1976)],Rader–Brenner algorithm,1976,https://ieeexplore.ieee.org/document/1162805,,"['C. Rader', 'N. Brenner']",2,['A new principle for fast Fourier transformation'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,$O(n)$?,Computes and keeps track of DFTs for recursive subcases,1,0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965,,,,,,,,,4,,,Signal Processing,FALSE
42,Discrete Fourier Transform,2,Discrete Fourier Transform,Discrete Fourier Transform,368,,,1,1,$O(n \log n)$,Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1163036/ Bruun's FFT algorithm (1978)],Bruun's FFT algorithm,1978,https://ieeexplore.ieee.org/document/1163036/,,['G. Bruun'],1,['z-transform DFT filters and FFTs'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,$O(n)$?,Computes $O(n)$ remainders per stage; storage space can be reused across stages,1,0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965,,,,,,,,,4,,,Signal Processing,FALSE
42,Discrete Fourier Transform,2,Discrete Fourier Transform,Discrete Fourier Transform,369,,,1,1,$O(n \log n)$,Any distribution of values,(same general behavior for all inputs),[https://dl.acm.org/citation.cfm?id=1476610 Yavne Split Radix FFT algorithm (1968)],Yavne Split Radix FFT algorithm,1968,https://dl.acm.org/citation.cfm?id=1476610,,['R. Yavne'],1,['An economical method for calculating the discrete Fourier transform'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,$O(n)$?,Computes and keeps track of DFTs for recursive subcases,1,0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965,,,,,,,,,4,,,Signal Processing,FALSE
42,Discrete Fourier Transform,2,Discrete Fourier Transform,Discrete Fourier Transform,370,,,1,1,$O(n \log n)$,Any distribution of values,(same general behavior for all inputs),[http://cis.rit.edu/class/simg716/FFT_Fun_Profit.pdf Gentleman; Morven and Gordon Sande radix-4 algorithm (1966)],Gentleman; Morven and Gordon Sande radix-4 algorithm,1966,http://cis.rit.edu/class/simg716/FFT_Fun_Profit.pdf,,"['W. M. Gentleman', 'G. Sande']",2,['FAST FOURIER TRANSFORMS-FOR FUN AND PROFIT'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,$O(n)$?,Computes and keeps track of DFTs for recursive subcases,1,0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965,,,,,,,,,4,,,Signal Processing,FALSE
42,Discrete Fourier Transform,2,Discrete Fourier Transform,Discrete Fourier Transform,371,,,1,1,$O(n \log n)$,Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1162043 Bergland; Glenn radix-8 algorithm (1969)],Bergland; Glenn radix-8 algorithm,1969,https://ieeexplore.ieee.org/document/1162043,,['G. Bergland'],1,['A radix-eight fast Fourier transform subroutine for real-valued series'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,$O(n)$,https://ieeexplore.ieee.org/document/1162043,0,1,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965,,,,,,,,,4,,,Signal Processing,FALSE
42,Discrete Fourier Transform,2,Discrete Fourier Transform,Discrete Fourier Transform,372,,,1,1,$O(n \log n)$,Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/917698 Extended Split Radix FFT algorithm (2001)],Extended Split Radix FFT algorithm,2001,https://ieeexplore.ieee.org/document/917698,10.1109/97.917698,['D. Takahashi'],1,['An extended split-radix FFT algorithm'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,$O(n)$?,Computes and keeps track of DFTs for recursive subcases,1,0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,9965,,,,,,,,,4,,,Signal Processing,FALSE
42,Discrete Fourier Transform,2,Discrete Fourier Transform,Discrete Fourier Transform,373,,,1,1,$O(n (\log n)^2)$,Any distribution of values,(same general behavior for all inputs),[https://dl.acm.org/doi/10.1145/236869.236882  Von zur Gathen-Gerhard additive FFT (1996)], Von zur Gathen-Gerhard additive FFT,1996,https://dl.acm.org/doi/10.1145/236869.236882,10.1145/236869.236882,"['Joachim von zur Gathen', 'J√ºrgen Gerhard']",2,['Arithmetic and factorization of polynomial over F_2 (extended abstract)'],,,,0,0,4.01,n: 4.01,$O(n (\log n)^2)$,12,$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,$O(n)$,https://dl.acm.org/doi/10.1145/236869.236882,0,1,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,,,,,,,,,,4,,,Signal Processing,FALSE
42,Discrete Fourier Transform,2,Discrete Fourier Transform,Discrete Fourier Transform,374,,,1,1,$O(n(\log n)^{1.585})$,Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/document/1926/ Wang-Zhu-Cantor additive FFT (1988)],Wang-Zhu-Cantor additive FFT,1988,https://ieeexplore.ieee.org/document/1926/,10.1109/49.1926,"['Y. Wang', 'X. Zhu']",2,['A fast algorithm for the Fourier transform over finite fields and its VLSI implementation'],,,,0,0,4.00585,n: 4.00585,$O(n(\log n)^{1.585})$,11.585,$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,$O(n)$?,Computes $O(n)$ remainders per stage; storage space can be reused across stages,1,0,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,,,,,,,,,,4,,,Signal Processing,FALSE
42,Discrete Fourier Transform,2,Discrete Fourier Transform,Discrete Fourier Transform,375,,,1,1,$O(n \log n \log \log n)$,Any distribution of values,(same general behavior for all inputs),[https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5625613 Gao’s additive FFT (2010)],Gao’s additive FFT,2010,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5625613,,"['Shuhong Gao', 'Todd Mateer']",2,['Additive Fast Fourier Transforms Over Finite Fields'],,,,0,0,4.001,n: 4.001,$O(n \log n \log \log n)$,11.1,$n$: length of the input data set,n,,,Word/Real RAM,words,3,n: 3,$O(n)$,https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=5625613,0,1,,0,,0,,0,0,,0,0,,"In mathematics, the discrete Fourier transform (DFT) converts a finite sequence of equally-spaced samples of a function into a same-length sequence of equally-spaced samples of the discrete-time Fourier transform (DTFT), which is a complex-valued function of frequency.",,,,,,,,,,,,,,,,,,,4,,,Signal Processing,FALSE
43,Line Drawing,2,Line Drawing,Line Drawing,376,,,1,1,$O(n)$,not well-defined,(none),[- Naive algorithm (1940)],Naive algorithm,1940,-,,[],0,,1,1,,1,0,3,n: 3,$O(n)$,10,$n$: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,$O(1)$,Constant number of $O(1)$-word-sized variables (for determining which pixels to shade) is sufficient,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Line_drawing_algorithm,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Image Processing,FALSE
43,Line Drawing,2,Line Drawing,Line Drawing,377,,,1,1,$O(n)$,not well-defined,(none),[- Digital Differential Analyzer (1940)],Digital Differential Analyzer,1940,-,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,$n$: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,$O(1)$,Constant number of $O(1)$-word-sized variables (for determining which pixels to shade) is sufficient,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Digital_differential_analyzer_(graphics_algorithm),,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing,FALSE
43,Line Drawing,2,Line Drawing,Line Drawing,378,,,1,1,$O(n)$,not well-defined,(none),[https://web.archive.org/web/20080528040104/http://www.research.ibm.com/journal/sj/041/ibmsjIVRIC.pdf Bresenham's line algorithm (1965)],Bresenham's line algorithm,1965,https://web.archive.org/web/20080528040104/http://www.research.ibm.com/journal/sj/041/ibmsjIVRIC.pdf,,['J. E. Bresenham'],1,['Algorithm for computer control of a digital plotter'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,$O(1)$,Constant number of $O(1)$-word-sized variables (for determining which pixels to shade) is sufficient,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing,FALSE
43,Line Drawing,2,Line Drawing,Line Drawing,379,,,1,1,$O(n)$,not well-defined,(none),[https://dl.acm.org/doi/10.1145/122718.122734 Xiaolin Wu's line algorithm (1991)],Xiaolin Wu's line algorithm,1991,https://dl.acm.org/doi/10.1145/122718.122734,,['Xiaolin Wu'],1,['An Efficient Antialiasing Technique'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,$O(1)$,Constant number of $O(1)$-word-sized variables (for determining which pixels to shade and what shading to use) is sufficient,1,0,,0,,0,,0,0,,0,0,http://www-users.mat.umk.pl/~gruby/teaching/lgim/1_wu.pdf (broken?),,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing,FALSE
43,Line Drawing,2,Line Drawing,Line Drawing,380,,,1,1,$O(n)$,not well-defined,(none),[https://dl.acm.org/doi/abs/10.1145/965161.806783 Gupta-Sproull algorithm (1981)],Gupta-Sproull algorithm,1981,https://dl.acm.org/doi/abs/10.1145/965161.806783,,"['Satish Gupta', 'Robert F. Sproull']",2,['Filtering edges for gray-scale displays'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of pixels the line goes through,n,,,Word RAM?,words?,1,n: 1,$O(1)$,Constant number of $O(1)$-word-sized variables (for determining which pixels to shade and what shading to use) is sufficient,1,0,,0,,0,,0,0,,0,0,http://www.cs.gettysburg.edu/~ilinkin/courses/Fall-2014/cs373/handouts/papers/gs-fegsd-81.pdf (broken?),,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing,FALSE
44,Polygon Clipping,1,Polygon Clipping with Arbitrary Clipping Polygon,Polygon Clipping with Arbitrary Clipping Polygon,381,,,1,1,$O(n \log n)$,,,[http://davis.wpi.edu/~matt/courses/clipping/ Greiner–Hormann clipping algorithm (1998)],Greiner–Hormann clipping algorithm,1998,http://davis.wpi.edu/~matt/courses/clipping/,,"['Gunther Greiner', 'Kai Hormann']",2,['Efficient Clipping of Arbitrary Polygons'],2,1,https://www.inf.usi.ch/hormann/papers/Greiner.1998.ECO.pdf,1,4->5,5,n: 5,$O(n^2)$?,20,$n$: maximum number of sides of either input polygon or clipping polygon,n,,,Word/Real RAM,words,5,n: 5,$O(n^2)$?,Needs to keep track of (possibly) $O(n^2)$ intersection points,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,100.3512293,,19931568.57,50171.66594,,29897352854,33447777.3,,4,,,Image Processing,FALSE
44,Polygon Clipping,1,,Polygon Clipping with Convex Clipping Polygon,382,,,1,1,$O(n^2)$,,,[https://dl.acm.org/doi/10.1145/360767.360802 Sutherland–Hodgman algorithm (1974)],Sutherland–Hodgman algorithm,1974,https://dl.acm.org/doi/10.1145/360767.360802,10.1145/360767.360802,"['Ivan E. Sutherland', 'Gary W. Hodgman']",2,['Reentrant polygon clipping'],1,1,https://dl.acm.org/doi/pdf/10.1145/360767.360802,1,0,5,n: 5,$O(n^2)$,20,$n$: maximum number of sides of either input polygon or clipping polygon,n,,,Word/Real RAM,words,3,n: 3,$O(n)$,"Each iteration, keeps track of updated polygon after clipping by a side. Note that there can be at most $O(n)$ intersection points due to the clipping polygon being convex",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Image Processing,FALSE
44,Polygon Clipping,1,Polygon Clipping with Arbitrary Clipping Polygon,Polygon Clipping with Arbitrary Clipping Polygon,383,,,1,1,$O(n \log n)$,,,[https://dl.acm.org/doi/10.1145/129902.129906 Vatti clipping algorithm (1992)],Vatti clipping algorithm,1992,https://dl.acm.org/doi/10.1145/129902.129906,10.1145/129902.129906,['Bala R. Vatti'],1,['A generic solution to polygon clipping'],,,,0,0,5,n: 5,$O(n^2)$?,20,$n$: maximum number of sides of either input polygon or clipping polygon,n,,,Word/Real RAM,words,5,n: 5,$O(n^2)$?,Needs to keep track of (possibly) $O(n^2)$ intersection points,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Image Processing,FALSE
44,Polygon Clipping,1,Polygon Clipping with Arbitrary Clipping Polygon,Polygon Clipping with Arbitrary Clipping Polygon,384,,,1,1,$O(n^2)$,,,[https://www.cs.drexel.edu/~david/Classes/CS430/HWs/p214-weiler.pdf Weiler–Atherton clipping algorithm (1977)],Weiler–Atherton clipping algorithm,1977,https://www.cs.drexel.edu/~david/Classes/CS430/HWs/p214-weiler.pdf,,"['Kevin Weiler', 'Peter Atherton']",2,['HIDDEN SURFACE REMOVAL USING POLYGON AREA SORTING'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: maximum number of sides of either input polygon or clipping polygon,n,,,Word/Real RAM,words,5,n: 5,$O(n^2)$?,Needs to keep track of (possibly) $O(n^2)$ intersection points,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
47,Eigenvalues (Iterative Methods),2,,Eigenpair closest to mu; Any eigenpair; Any eigenvalue,398,,0,1,1,$O(n^2)$,,,[https://onlinelibrary.wiley.com/doi/abs/10.1002/zamm.19210010104 Inverse iteration (1921)],Inverse iteration,1921,https://onlinelibrary.wiley.com/doi/abs/10.1002/zamm.19210010104,10.1002/zamm.19210010104,['E. Pohlhausen'],1,['Berechnung der Eigenschwingungen statisch-bestimmter Fachwerke'],,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,20,$n$: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Need to compute and store $(A-mu*I)^{(-1)}$,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis,FALSE
47,Eigenvalues (Iterative Methods),2,,Any eigenpair; Any eigenvalue,399,,0,1,1,$O(n^2)$,,,[- Rayleigh quotient iteration (1940)],Rayleigh quotient iteration,1940,-,,[],0,,,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,20,$n$: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Need to compute and store $(A-mu_i*I)^{(-1)}$,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Rayleigh_quotient_iteration#Algorithm,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis,FALSE
47,Eigenvalues (Iterative Methods),1,,Eigenpair closest to mu; Any eigenpair; Any eigenvalue,400,,0,1,1,$O(n^2)$,,,[- LOBPCG algorithm (1948)],LOBPCG algorithm,1948,-,,[],0,,,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,20,$n$: dimension of matrix,n^2,,,Word/Real RAM,words,2.5,"n: 3,
n^2: 2.5",$O(n)$?,Requires only a constant number of $O(n)$-sized vectors per iteration,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/LOBPCG,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis,FALSE
47,Eigenvalues (Iterative Methods),1,,Any eigenvalue,401,,0,1,1,$O(n^2)$,,,[- Bisection method (1985)],Bisection method,1985,-,,[],0,,,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,20,$n$: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$?,Computing characteristic polynomial takes $O(n^2)$ space (via e.g. Faddeev–LeVerrier algorithm); rest of algo can be done in $O(n)$ space (related to root computation),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis,FALSE
47,Eigenvalues (Iterative Methods),1,,Any eigenvalue,402,,0,1,1,$O(n^2)$,,,[- Laguerre iteration (1940)],Laguerre iteration,1940,-,,[],0,,,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,20,$n$: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$?,Computing characteristic polynomial takes $O(n^2)$ space (via e.g. Faddeev–LeVerrier algorithm); rest of algo can be done in $O(n)$ space (related to root computation),1,0,,0,,0,,0,0,,0,0,https://archive.org/details/numericalmethods00form,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis,FALSE
47,Eigenvalues (Iterative Methods),2,,All eigenvalues; Any eigenvalue,403,,0,1,1,$O(n^2)$,,,[https://academic.oup.com/comjnl/article/4/4/332/432033 QR algorithm (1962)],QR algorithm,1962,https://academic.oup.com/comjnl/article/4/4/332/432033,10.1093/comjnl/4.4.332,['J. G. F. Francis'],1,['The QR Transformation--Part 2'],,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,20,$n$: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Computes and stores QR factorization at each iteration,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis,FALSE
47,Eigenvalues (Iterative Methods),1,,All eigenvalues; Any eigenvalue,404,,0,1,1,$O(n^2)$,,,[https://gdz.sub.uni-goettingen.de/id/PPN243919689_0030 Jacobi eigenvalue algorithm (1846)],Jacobi eigenvalue algorithm,1846,https://gdz.sub.uni-goettingen.de/id/PPN243919689_0030,,['C. G. J. Jacobi'],1,['Journal für die reine und angewandte Mathematik'],,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,20,$n$: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$?,Computes and stores results of $GSG^T$ iterations,1,0,,0,,0,,0,0,,0,0,,,,,,1000000,,1000000000000,,1E+18,,1000000,,,,,,,,,4,,,Numerical Analysis,FALSE
47,Eigenvalues (Iterative Methods),2,,All eigenvalues; Any eigenvalue,405,,0,1,1,$O(n \log n)$,,,[https://link.springer.com/content/pdf/10.1007/BF01389480.pdf Divide-and-conquer (1986)],Divide-and-conquer,1986,https://link.springer.com/content/pdf/10.1007/BF01389480.pdf,,"['A. S. Krishnakumar', 'Martin Morf']",2,['Eigenvalues of a symmetric tridiagonal matrix: A divide-and-conquer approach'],,,,1,4->5,2.51,"n: 4,
n^2: 2.51",$O(n \log n)$,11,$n$: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Stores reduction to tridiagonal form; recursion ($S(n)=2S(n/2)+O(n^2)$) should work out to $O(n^2)$,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm,,,,,,,,,,,9965,100.3512293,0.1053793904,19931568.57,50171.66594,0.2652719521,29897352854,33447777.3,0.4573813291,4,,,Numerical Analysis,FALSE
47,Eigenvalues (Iterative Methods),1,,All eigenpairs; Eigenpair closest to mu; Any eigenpair; Any eigenvalue; All eigenvalues,406,,0,1,1,$O(n^2)$,,,[https://www.scirp.org/reference/ReferencesPapers?ReferenceID=530065 Homotopy method (1992)],Homotopy method,1992,https://www.scirp.org/reference/ReferencesPapers?ReferenceID=530065,,['S. J. Liao'],3,['The Proposed Homotopy Analysis Technique for the Solution of Nonlinear Problems'],,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,20,$n$: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$??,Conservative bound on space used per iteration,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis,FALSE
47,Eigenvalues (Iterative Methods),1,,Eigenpair closest to mu; Any eigenpair; Any eigenvalue,407,,0,1,1,$O(n^2)$,,,[https://journals.aps.org/pr/abstract/10.1103/PhysRev.46.828 Folded spectrum method (1934)],Folded spectrum method,1934,https://journals.aps.org/pr/abstract/10.1103/PhysRev.46.828,10.1103/PhysRev.46.828,['J. K. L. MacDonald'],1,['On the Modified Ritz Variation Method'],,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,20,$n$: dimension of matrix,n^2,,,Word/Real RAM,words,2.5,"n: 3,
n^2: 2.5",$O(n)$?,Requires only a constant number of $O(n)$-sized vectors per iteration; matrix-to-vector multiplication only requires $O(n)$ aux space,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Numerical Analysis,FALSE
47,Eigenvalues (Iterative Methods),2,,Any eigenpair; Any eigenvalue,408,,0,1,1,$O(n)$,,,[https://www.cs.utexas.edu/users/inderjit/public_papers/DesignMRRR_toms06.pdf MRRR algorithm (1999)],MRRR algorithm,1999,https://www.cs.utexas.edu/users/inderjit/public_papers/DesignMRRR_toms06.pdf,,"['INDERJIT S. DHILLON', 'BERESFORD N. PARLETT', 'CHRISTOF VOMEL']",3,['The Design and Implementation of the MRRR Algorithm'],2,1,http://www.cs.utexas.edu/~inderjit/public_papers/DesignMRRR_toms06.pdf,1,5->6,2.5,"n: 3,
n^2: 2.5",$O(n)$,10,$n$: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Need to compute and store some matrix of the form $(A-mu*I)^{(-1)}$ (for inverse iteration-like uses),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1000,0.1242100351,1000000,1000000,0.2638482029,1000000000,1000000000,0.4208308325,4,,,Numerical Analysis,FALSE
48,Root Computation,1,General Root Computation,General Root Computation,409,,0,1,1,$O(\log((b-a)/\epsilon))$,,,[- Bisection method (1820)],Bisection method,1820,-,,[],0,,,,,0,0,3,n_max: 3,$O(n_{max})$,10,"$\epsilon$: (additive) tolerance error
$a$, $b$: endpoint values, with $b>a$
$n_{max}$: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",$O(1)$,"Store current endpoint values; iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1,0,,0,,1,$\epsilon$ additive,0,0,,0,0,https://en.wikipedia.org/wiki/Bisection_method,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis,FALSE
48,Root Computation,1,General Root Computation,General Root Computation,410,,0,1,1,$O(n)$,,,[- False position method (1690)],False position method,1690,-,,[],0,,1,1,https://www.geeksforgeeks.org/program-for-method-of-false-position/,1,0,3,n_max: 3,$O(n_{max})$,10,"$\epsilon$: (additive) tolerance error
$a$, $b$: endpoint values, with $b>a$
$n_{max}$: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",$O(1)$,"Store current endpoint values; iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1,0,,0,,1,$\epsilon$ additive,0,0,,0,0,https://archive.org/details/historyofmathema031897mbp,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis,FALSE
48,Root Computation,1,,Root Computation with continuous first derivative,411,,0,1,1,(order of convergence = 2),,,[ Newton's method (1940)],Newton's method,1940,,,[],0,,,,,0,0,3,n_max: 3,$O(n_{max})$,10,"$\epsilon$: (additive) tolerance error
$n_{max}$: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",$O(1)$,"Store current estimate $x_i$ and the derivative $f'$ (assuming this takes $O(1)$ space); iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1,0,,0,,1,$\epsilon$ additive,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis,FALSE
48,Root Computation,1,,Root Computation with continuous second derivative,412,,0,1,1,(order of convergence = 3),,,[- Halley's method (1940)],Halley's method,1940,-,,[],0,,,,,0,0,3,n_max: 3,$O(n_{max})$,10,"$\epsilon$: (additive) tolerance error
$n_{max}$: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",$O(1)$,"Store current estimate $x_i$ and the derivatives $f'$ and $f''$ (assuming this takes $O(1)$ space); iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1,0,,0,,1,$\epsilon$ additive,0,0,,0,0,https://en.wikipedia.org/wiki/Halley%27s_method,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis,FALSE
48,Root Computation,1,General Root Computation,General Root Computation,413,,0,1,1,(order of convergence = $\phi$~1.618),,,[- Secant method (1940)],Secant method,1940,-,,[],0,,,,,0,0,3,n_max: 3,$O(n_{max})$,10,"$\epsilon$: (additive) tolerance error
$n_{max}$: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",$O(1)$,"Store previous 2 estimates $x_i$ and $x_{i-1}$; iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1,0,,0,,1,$\epsilon$ additive,0,0,,0,0,https://en.wikipedia.org/wiki/Secant_method,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis,FALSE
48,Root Computation,1,General Root Computation,General Root Computation,414,,0,1,1,(order of convergence = $\sqrt{2}$),,,[https://ieeexplore.ieee.org/document/1084580/ Ridder's method (1979)],Ridder's method,1979,https://ieeexplore.ieee.org/document/1084580/,,['C. Ridders'],1,['A new algorithm for computing a single root of a real continuous function'],,,,0,0,3,n_max: 3,$O(n_{max})$,10,"$\epsilon$: (additive) tolerance error
$n_{max}$: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",$O(1)$,"Store previous 2 estimates $x_i$ and $x_{i-1}$; iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1,0,,0,,1,$\epsilon$ additive,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis,FALSE
48,Root Computation,1,General Root Computation,General Root Computation,415,,0,1,1,(order of convergence ~ 1.84),,,[https://www.jstor.org/stable/2001916 Muller's method (1956)],Muller's method,1956,https://www.jstor.org/stable/2001916,,['David E. Muller'],1,['A Method for Solving Algebraic Equations Using an Automatic Computer'],,,,0,0,3,n_max: 3,$O(n_{max})$,10,"$\epsilon$: (additive) tolerance error
$n_{max}$: maximum number of iterations",n_max,,,Word/Real RAM,words,1,"a: 1,
b: 1,
n_max: 1",$O(1)$,"Store previous 3 estimates $x_i$, $x_{i-1}$, and $x_{i-2}$; iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1,0,,0,,1,$\epsilon$ additive,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,6,,,Numerical Analysis,FALSE
50,Coset Enumeration,1,Coset Enumeration,Coset Enumeration,423,,,1,1,$O(2^n)$,,,[https://www.cambridge.org/core/journals/proceedings-of-the-edinburgh-mathematical-society/article/practical-method-for-enumerating-cosets-of-a-finite-abstract-group/0306574AD958F694A0A8339338348AA1 Todd–Coxeter algorithm (1936)],Todd–Coxeter algorithm,1936,https://www.cambridge.org/core/journals/proceedings-of-the-edinburgh-mathematical-society/article/practical-method-for-enumerating-cosets-of-a-finite-abstract-group/0306574AD958F694A0A8339338348AA1,,"['J. A. Todd', 'H. S. M. Coxeter']",2,['A practical method for enumerating cosets of a finite abstract group'],1,1,https://www.cambridge.org/core/services/aop-cambridge-core/content/view/0306574AD958F694A0A8339338348AA1/S0013091500008221a.pdf/practical_method_for_enumerating_cosets_of_a_finite_abstract_group.pdf,1,0,8,n: 8,$O(2^n)$,1000,"$n$: number of generators
$g$: order of group (possibly exponential in $n$)
$k$: number of relations
$c$: maximum number of generators multiplied together in a relation",n,,,Word RAM?,words,8,"g: 3,
k: 3,
c: 3,
n: 8",$O(gkc)$,"Defines $O(k)$ tables, each with $O(g)$ columns and $O(c)$ rows",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,TRUE
50,Coset Enumeration,1,Coset Enumeration,Coset Enumeration,424,,,1,1,$O(2^n)$,,,[ Haselgrove-Leech-Trotter (HLT) algorithm (1940)],Haselgrove-Leech-Trotter (HLT) algorithm,1940,,,[],0,,,,,0,0,8,n: 8,$O(2^n)$,1000,"$n$: number of generators
$g$: order of group (possibly exponential in $n$)
$k$: number of relations
$c$: maximum number of generators multiplied together in a relation",n,,,Word RAM?,words,8,"n: 8,
g: 3",$O(ng)$?,Implementation stores a table whose number of required registers is the product of the number of generators ($n$) and the number of cosets ($O(g)$),1,0,,0,,0,,0,0,,0,0,https://www.cambridge.org/core/journals/mathematical-proceedings-of-the-cambridge-philosophical-society/article/coset-enumeration-on-digital-computers/047323FB9415ACF3466E627590ABB790,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,TRUE
50,Coset Enumeration,1,Coset Enumeration,Coset Enumeration,425,,,1,1,$O(1.5^n n^2 \log n)$,,,[https://www.cs.tufts.edu/~nr/cs257/archive/don-knuth/knuth-bendix.pdf Knuth–Bendix algorithm (1970)],Knuth–Bendix algorithm,1970,https://www.cs.tufts.edu/~nr/cs257/archive/don-knuth/knuth-bendix.pdf,,"['DONALD E. KNUTH', 'PETER B. BENDIX']",2,['Simple Word Problems in Universal Algebras'],1,1,,1,0,8,n: 8,$O(1.5^n n^2 \log n)$,,"$n$: number of generators
$g$: order of group (possibly exponential in $n$)
$k$: number of relations
$c$: maximum number of generators multiplied together in a relation",n,,,Word RAM?,words,8,"n: 8,
g: 3",$O(ng)$??,Can store a table whose number of required registers is the product of the number of generators ($n$) and the number of cosets ($O(g)$),1,0,,0,,0,,0,0,,0,0,https://www.win.tue.nl/~mvdbrand/courses/seminar/0809/papers/ag-genesis.pdf,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,TRUE
51,Maximum Likelihood Parameters,1,Maximum Likelihood Parameters,,426,,0,1,1,$O(n^3)$,,,[https://www.jstor.org/stable/2984875 Expectation–maximization (EM) algorithm (1977)],Expectation–maximization (EM) algorithm,1977,https://www.jstor.org/stable/2984875,,"['A. P. Dempster', 'N. M. Laird', 'D. B. Rubin']",3,['Maximum Likelihood from Incomplete Data via the EM Algorithm'],,,,0,0,6,n: 6,$O(n^3)$,30,"$n$: number of observations in sample
$r$: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",$O(n+r)$?,"Stores current $\theta$ and $Z$ guesses, which is updated each iteration. Also assumes description of log-likelihood takes $O(n+r)$ auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis,FALSE
51,Maximum Likelihood Parameters,1,Maximum Likelihood Parameters,,427,,0,1,1,$O(n^3)$,,,[- Newton–Raphson algorithm (1685)],Newton–Raphson algorithm,1685,-,,[],0,,,,,1,0,6,n: 6,$O(n^3)$,30,"$n$: number of observations in sample
$r$: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 5",$O(n+r^2)$?,"Stores current theta guess, which is updated each iteration, and requires computation of the (inverse of the) Hessian matrix. Also assumes description of log-likelihood takes $O(n+r)$ auxiliary space.",1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/Newton%27s_method

https://web.mit.edu/10.001/Web/Course_Notes/NLAE/node6.html",,,,,,,,,,,1000000000,1,,1E+18,1,,1E+27,1,,3,,,Numerical Analysis,FALSE
51,Maximum Likelihood Parameters,1,Maximum Likelihood Parameters,,428,,0,1,1,$O(n^3)$,,,[https://www.jstor.org/stable/2337481 Parameter-expanded expectation maximization (PX-EM) algorithm (1998)],Parameter-expanded expectation maximization (PX-EM) algorithm,1998,https://www.jstor.org/stable/2337481,,"['Chuanhai Liu', 'Donald B. Rubin', 'Ying Nian Wu']",3,['Parameter Expansion to Accelerate EM: The PX-EM Algorithm'],,,,0,0,6,n: 6,$O(n^3)$,30,"$n$: number of observations in sample
$r$: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",$O(n+r)$?,"Stores current $\theta$ (+ $\alpha$) and $Z$ guesses, which is updated each iteration. Also assumes description of log-likelihood takes $O(n+r)$ auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis,FALSE
51,Maximum Likelihood Parameters,1,Maximum Likelihood Parameters,,429,,0,1,1,$O(n^2 \log n)$,,,[https://arxiv.org/abs/1709.06970 Expectation conditional maximization (ECM) (2017)],Expectation conditional maximization (ECM),2017,https://arxiv.org/abs/1709.06970,,"['Zehang Richard Li', 'Tyler H. McCormick']",2,['An Expectation Conditional Maximization approach for Gaussian graphical models'],,,,1,0,5.01,n: 5.01,$O(n^2 \log n)$,21,"$n$: number of observations in sample
$r$: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",$O(n+r)$?,"Stores current $\theta$ and $Z$ guesses, which is updated each iteration. Also assumes description of log-likelihood takes $O(n+r)$ auxiliary space.",1,0,,0,,0,,0,0,,0,0,https://academic.oup.com/biomet/article-abstract/80/2/267/251605,,,,,,,,,,,9965784.285,100.3433319,0.06167931846,19931568569324,50171.66594,0.1509194139,2.98974E+19,33447777.3,0.2523307814,3,,,Numerical Analysis,FALSE
51,Maximum Likelihood Parameters,1,Maximum Likelihood Parameters,,430,,0,1,1,$O(n^4 \log^{1.5} n)$?,,,[https://web.eecs.umich.edu/~fessler/papers/files/jour/94/web/fessler-94-sag.pdf Generalized expectation maximization (GEM) algorithm (1994)],Generalized expectation maximization (GEM) algorithm,1994,https://web.eecs.umich.edu/~fessler/papers/files/jour/94/web/fessler-94-sag.pdf,,"['Jeffrey A. Fessler', 'Alfred O. Hero']",2,['Space-Alternating Generalized Expectation-Maximization Algorithm'],,,,0,0,7,n: 7,$O(n^4 \log^{1.5} n)$?,,"$n$: number of observations in sample
$r$: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",$O(n+r)$?,"Stores current $\theta$ and $Z$ guesses, which is updated each iteration. Also assumes description of log-likelihood takes $O(n+r)$ auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis,FALSE
51,Maximum Likelihood Parameters,1,Maximum Likelihood Parameters,,431,,0,1,1,$O(n^3)$,,,[https://dl.acm.org/doi/10.1109/TIT.2002.808105 α-EM algorithm (2003)],α-EM algorithm,2003,https://dl.acm.org/doi/10.1109/TIT.2002.808105,10.1109/TIT.2002.808105,['Y. Matsuyama'],1,['The Œ±-EM algorithm: surrogate likelihood maximization using Œ±-logarithmic information measures'],,,,0,0,6,n: 6,$O(n^3)$,30,"$n$: number of observations in sample
$r$: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",$O(n+r)$?,"Stores current $\theta$ and $Z$ guesses, which is updated each iteration. Also assumes description of $\alpha$-log-likelihood takes $O(n+r)$ auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis,FALSE
52,Cardinality Estimation,2,,,432,,0,1,1,$O(N)$,,,[- Naive solution (1940)],Naive solution,1940,-,,[],0,,,,,1,0,3,N: 3,$O(N)$,10,"$N$: number of values in multiset
$n$: cardinality of multiset (not known)",N,,,Word RAM,words,3,N: 3,$O(n)$,"keep track of exact histogram, may require storing all values",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis,FALSE
52,Cardinality Estimation,2,,,433,,0,1,1,$O(N)$,Any distribution of values?,(need to read entire input),[http://algo.inria.fr/flajolet/Publications/src/FlMa85.pdf  Flajolet–Martin algorithm (1984)], Flajolet–Martin algorithm,1984,http://algo.inria.fr/flajolet/Publications/src/FlMa85.pdf,,"['PHILIPPE FLAJOLET', 'G. NIGEL MARTIN']",2,['Probabilistic Counting Algorithms for Data Base Applications'],,,,0,0,3,N: 3,$O(N)$,,"$N$: number of values in multiset
$n$: cardinality of multiset (not known)",N,,,Word RAM,words,2,N: 2,$O(\log n)$,https://www.sciencedirect.com/science/article/pii/S0022000097915452,0,0,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis,FALSE
52,Cardinality Estimation,2,,,434,,0,1,1,$O(N)$,Any distribution of values?,(need to read entire input),[http://algo.inria.fr/flajolet/Publications/DuFl03-LNCS.pdf LogLog algorithm (2003)],LogLog algorithm,2003,http://algo.inria.fr/flajolet/Publications/DuFl03-LNCS.pdf,,"['Marianne Durand', 'Philippe Flajolet']",2,['Loglog Counting of Large Cardinalities'],,,,0,0,3,N: 3,$O(N)$,,"$N$: number of values in multiset
$n$: cardinality of multiset (not known)",N,,,Word RAM,words,1.99,N: 1.99,$O(\log \log n)$,http://algo.inria.fr/flajolet/Publications/DuFl03-LNCS.pdf,0,1,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis,FALSE
52,Cardinality Estimation,2,,,435,,0,1,1,$O(N)$,Any distribution of values?,(need to read entire input),[http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf HyperLogLog algorithm (2007)],HyperLogLog algorithm,2007,http://algo.inria.fr/flajolet/Publications/FlFuGaMe07.pdf,,"['Philippe Flajolet', 'Éric Fusy', 'Olivier Gandouet', 'Frédéric Meunier']",4,['HyperLogLog: the analysis of a near-optimal cardinality estimation algorithm'],,,,0,0,3,N: 3,$O(N)$,,"$N$: number of values in multiset
$n$: cardinality of multiset (not known)
$\epsilon$: approximation parameter",N,,,Word RAM,words,2,N: 2,$O(\epsilon^{-2}\log(\log n))+\log n)$,https://oertl.github.io/hyperloglog-sketch-estimation-paper/paper/paper.pdf,0,0,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis,FALSE
52,Cardinality Estimation,2,,,436,,0,1,1,$O(N)$,Any distribution of values?,(need to read entire input),[https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/40671.pdf HyperLogLog++ (2014)],HyperLogLog++,2014,https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/40671.pdf,,"['Stefan Heule', 'Marc Nunkesser', 'Alexander Hall']",3,['HyperLogLog in Practice: Algorithmic Engineering of a State of The Art Cardinality Estimation Algorithm'],,,,1,0,3,N: 3,$O(N)$,,"$N$: number of values in multiset
$n$: cardinality of multiset (not known)
$\epsilon$: approximation parameter",N,,,Word RAM,words,2,N: 2,$O(\epsilon^{-2}\log(\log n))+\log n)$,(see hyperloglog),0,0,,1,,1,,0,0,,0,0,,,,,,,,,,,,5.623413252,177.827941,,31.6227766,31622.7766,,177.827941,5623413.252,,6,,,Numerical Analysis,FALSE
52,Cardinality Estimation,2,,streaming,437,,0,1,1,$O(N)$,Any distribution of values?,(need to read entire input),[ Min/max sketches streaming algorithm (1980)],Min/max sketches streaming algorithm,1980,,,[],0,,,,,0,0,3,N: 3,$O(N)$,,"$N$: number of values in multiset
$n$: cardinality of multiset (not known)",N,,,Word RAM,words,1,N: 1,$O(1)$,only keep track of minimum value. also assuming hash function requires $O(1)$ space,1,0,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis,FALSE
52,Cardinality Estimation,2,,streaming,438,,0,1,1,$O(N)$,Any distribution of values?,(need to read entire input),[ Bottom-m sketches streaming algorithm (1980)],Bottom-m sketches streaming algorithm,1980,,,[],0,,,,,0,0,3,N: 3,$O(N)$,,"$N$: number of values in multiset
$n$: cardinality of multiset (not known)
$m$: size of sketch",N,,,Word RAM,words,3,"m: 3,
N: 3",$O(m)$,only keep track of $m$ minimum values. also assuming hash function requires $O(1)$ space,1,0,,1,,1,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Numerical Analysis,FALSE
53,Register Allocation,1,,Global Register Allocation,439,RIG coloring,,1,1,$O(n^2)$,,,[https://dl.acm.org/doi/10.1145/872726.806984 Chaitin's Algorithm (1981)],Chaitin's Algorithm,1981,https://dl.acm.org/doi/10.1145/872726.806984,10.1145/872726.806984,['G. J. Chaitin'],1,['Register allocation & spilling via graph coloring'],,,,1,0,5,n: 5,$O(n^2)$,20,$n$: number of live ranges (the number of candidates to reside in registers),n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: this algorithm uses both an adjacency matrix (called the bit matrix) and adjacency lists (called the adjacency vectors),1,0,,0,,0,,0,0,,0,0,,,,,,1000000,,1000000000000,,1E+18,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Operating Systems,FALSE
53,Register Allocation,1,,Global Register Allocation,440,"Assumes all variables allocated in main memory (i.e. assumes no spill handling required).

Priority-based RIG coloring",,1,1,$O(n^2)$,,,[https://dl.acm.org/doi/10.1145/502874.502896 Chow's Algorithm (1984)],Chow's Algorithm,1984,https://dl.acm.org/doi/10.1145/502874.502896,10.1145/502874.502896,"['Frederick Chow', 'John Hennessy']",2,['Register allocation by priority-based coloring'],,,,0,0,5,n: 5,$O(n^2)$,20,"$n$: number of live ranges (the number of candidates to reside in registers)
$r$: number of registers available",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: this algorithm also uses a register interference graph (RIG),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems,FALSE
53,Register Allocation,2,,Global Register Allocation,441,Greedy assignment,,1,1,$O(n)$,,,"[http://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf Linear Scan, Poletto & Sarkar (1999)]","Linear Scan, Poletto & Sarkar",1999,http://web.cs.ucla.edu/~palsberg/course/cs132/linearscan.pdf,,"['MASSIMILIANO POLETTO', 'VIVEK SARKAR']",2,['Linear Scan Register Allocation'],,,,1,4->6,3,n: 3,$O(n)$,10,"$n$: number of live ranges (the number of candidates to reside in registers)
$r$: number of registers available",n,,,Word RAM,words,1,"r: 3,
n: 1",$O(r)$,"Derived: given the live ranges, the only auxiliary data structure is an ""active"" list that contains the active live ranges and this has length at most $r$",1,0,,0,,0,,1,0,,0,0,,,,,,1,1.15443469,1,3.641588834,1,9,1000,1000,0.4677992676,1000000,1000000,1.15443469,1000000000,1000000000,2.16227766,4,,,Operating Systems,FALSE
53,Register Allocation,0.001,,,442,,,1,1,$O(n^2)$,,,[https://ieeexplore.ieee.org/document/1611528 Cooper and Dasgupta algorithm (2006)],Cooper and Dasgupta algorithm,2006,https://ieeexplore.ieee.org/document/1611528,,"['K.D. Cooper', 'A. Dasgupta']",2,['Tailoring graph-coloring register allocation for runtime compilation'],,,,0,0,5,n: 5,$O(n^2)$,20,"$n$: number of live ranges (the number of candidates to reside in registers)
$r$: number of registers available",n,,,Word RAM,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems,FALSE
53,Register Allocation,1,,Global Register Allocation,443,0-1 integer linear programming problem,,1,1,$O(n^3)$,,,"[https://onlinelibrary.wiley.com/doi/10.1002/(SICI)1097-024X(199608)26:8%3C929::AID-SPE40%3E3.0.CO;2-T Optimal Register Allocation (ORA), Goodwin & Wilken Algorithm (1996)]","Optimal Register Allocation (ORA), Goodwin & Wilken Algorithm",1996,https://onlinelibrary.wiley.com/doi/10.1002/(SICI)1097-024X(199608)26:8%3C929::AID-SPE40%3E3.0.CO;2-T,10.1002/(SICI)1097-024X(199608)26:8%3C929::AID-SPE40%3E3.0.CO;2-T,"['DAVID W. GOODWIN', 'KENT D. WILKEN']",2,['Optimal and Near-optimal Global Register Allocation Using 0-1 Integer Programming'],,,,0,0,6,n: 6,$O(n^3)$,30,$n$: number of live ranges (the number of candidates to reside in registers),n,,,,,#VALUE!,,Depends on the choice of 0-1 ILP solver,"""Memory usage is dominated by the usage of the integer program solver.""",0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,4,,,Operating Systems,FALSE
53,Register Allocation,1,,Global Register Allocation,444,Integer programming for irregular register architectures,,1,1,$O(n^{2.5})$,Experimental results,https://dl.acm.org/doi/10.5555/290940.291002,[https://dl.acm.org/doi/10.5555/290940.291002 Kong and Wilken Algorithm (1998)],Kong and Wilken Algorithm,1998,https://dl.acm.org/doi/10.5555/290940.291002,,"['Timothy Kong', 'Kent D. Wilken']",2,['Precise register allocation for irregular architectures'],,,,0,0,6,n: 6,$O(n^3)$,30,$n$: number of live ranges (the number of candidates to reside in registers),n,,,,,#VALUE!,,Probably dependent on the choice of ILP solver,,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,4,,,Operating Systems,FALSE
54,Voronoi Diagrams,1,Constuct Voronoi Diagram,Voronoi Diagrams,445,,,1,1,$O(n \log n)$,,,[http://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf Fortune's algorithm (1986)],Fortune's algorithm,1986,http://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf,,['Steven Fortune'],1,['A Sweepline Algorithm for Voronoi Diagrams'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of points,n,,,Word/Real RAM,words,3,n: 3,$O(n)$,https://www.wias-berlin.de/people/si/course/files/Fortune87-SweepLine-Voronoi.pdf,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,5,,,Combinatorics,FALSE
54,Voronoi Diagrams,1,Constuct Voronoi Diagram,Voronoi Diagrams,447,,,1,1,$O(n \log n)$,,,[https://academic.oup.com/comjnl/article/24/2/167/338200 Bowyer–Watson algorithm (1981)],Bowyer–Watson algorithm,1981,https://academic.oup.com/comjnl/article/24/2/167/338200,10.1093/comjnl/24.2.167,['D. F. Watson'],1,['Computing the n-dimensional Delaunay tessellation with application to Voronoi polytopes'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of points,n,,,Word/Real RAM,words,3,n: 3,$O(n)$,"Computes the Delaunay triangulation first ($O(n)$ space), then uses that to generate the Voronoi diagram",1,0,,0,,0,,0,0,,0,0,https://academic.oup.com/comjnl/article/24/2/162/338193,,,,,,,,,,,9965,,,,,,,,,5,,,Combinatorics,FALSE
55,Variance Calculations,2,Variance Calculations,Variance Calculations,448,,0,1,1,$O(n)$,Any distribution of values?,(need to read entire input),[- Naïve algorithm (1940)],Naïve algorithm,1940,-,,[],0,,1,1,,1,0,3,n: 3,$O(n)$,10,$n$: number of values,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,"Maintain number of values, sum of values, and sum of squares of values",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis,FALSE
55,Variance Calculations,2,Variance Calculations,Variance Calculations,449,,0,1,1,$O(n)$,Any distribution of values?,(need to read entire input),[- Two-pass algorithm (1940)],Two-pass algorithm,1940,-,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,$n$: number of values,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,"Maintain number of values, sum of values, and sum of squares of (value minus mean) terms",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis,FALSE
55,Variance Calculations,2,Variance Calculations,Variance Calculations,450,,0,1,1,$O(n)$,Any distribution of values?,(need to read entire input),[https://citeseerx.ist.psu.edu/pdf/946c0b839e5dcca3fcf5a39d07d9f6f7d67887e3 Welford's Online algorithm (1962)],Welford's Online algorithm,1962,https://citeseerx.ist.psu.edu/pdf/946c0b839e5dcca3fcf5a39d07d9f6f7d67887e3,,['B. P. Welford'],1,['Note on a Method for Calculating Corrected Sums of Squares and Products'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of values,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,"Maintains $O(1)$ information (count, mean, $M_2$) that is constantly updated as values are read",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis,FALSE
55,Variance Calculations,2,Variance Calculations,Variance Calculations,451,,0,1,1,$O(n)$,Any distribution of values?,(need to read entire input),[https://dl.acm.org/doi/10.1145/359146.359153 Weighted incremental algorithm (1979)],Weighted incremental algorithm,1979,https://dl.acm.org/doi/10.1145/359146.359153,10.1145/359146.359153,['D. H. D. West'],1,['Updating mean and variance estimates: an improved method'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of values,n,,,Word/Real RAM,words,1,n: 1,$O(1)$,"Maintains $O(1)$ information (sum of weights, sum of squared weights, weighted sum of values, weighted sum of values squared) that is constantly updated as values are read",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis,FALSE
55,Variance Calculations,2,Variance Calculations,Variance Calculations,452,,0,1,1,$O(\log n)$,Any distribution of values?,(need to read entire input),[http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf Chan's algorithm Parallel Implementation (1979)],Chan's algorithm Parallel Implementation,1979,http://i.stanford.edu/pub/cstr/reports/cs/tr/79/773/CS-TR-79-773.pdf,,"['Tony F. Chan', 'Gene H. Golub', 'Randall J. LeVeque']",3,['UPDATING FORMULAE AND A PAIRWISE ALGORITHM FOR COMPUTING SAMPLE VARIANCES'],,,,0,0,2,n: 2,$O(\log n)$,1,$n$: number of values,n,,,EREW(??) PRAM,words,3,n: 3,$O(1)$ per processor,"Each processor maintains $O(1)$ information related to count, mean, $M_2$",1,0,,0,,0,,0,1,$O(n)$,0,0,https://dbs.ifi.uni-heidelberg.de/files/Team/eschubert/publications/SSDBM18-covariance-authorcopy.pdf,,,,,,,,,,,1,,,,,,,,,6,,,Numerical Analysis,FALSE
56,Topological Sorting,2,Topological Sorting,Topological Sorting,453,,,1,1,$O(V+E)$,Any distribution of values?,(need to read entire input),[https://dl.acm.org/doi/10.1145/368996.369025 Kahn's algorithm (1962)],Kahn's algorithm,1962,https://dl.acm.org/doi/10.1145/368996.369025,10.1145/368996.369025,['A. B. Kahn'],1,['Topological sorting of large networks'],1,1,,1,0,5,"V: 5,
E: 3",$O(V+E)$,10,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,3,V: 3,$O(V)$,maintain stack of nodes with no incoming edges,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Combinatorics,FALSE
56,Topological Sorting,2,Topological Sorting,Topological Sorting,454,,,1,1,$O(V+E)$,Any distribution of values?,(need to read entire input),[https://link.springer.com/article/10.1007/BF00268499 Tarjan's DFS based algorithm (1976)],Tarjan's DFS based algorithm,1976,https://link.springer.com/article/10.1007/BF00268499,10.1007/BF00268499,['Robert Endre Tarjan'],1,['Edge-disjoint spanning trees and depth-first search'],,,,0,0,5,"V: 5,
E: 3",$O(V+E)$,10,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,3,V: 3,$O(V)$?,"maintain $O(V)$-sized recursion stack, along with $O(V)$ marks",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Combinatorics,FALSE
56,Topological Sorting,1,Topological Sorting,Topological Sorting,455,,,1,1,$O(\log^2 V)$,,,[https://www.proquest.com/docview/920003939?pq-origsite=gscholar&fromopenview=true Dekel; Nassimi & Sahni Parallel Implementation  (1981)],Dekel; Nassimi & Sahni Parallel Implementation ,1981,https://www.proquest.com/docview/920003939?pq-origsite=gscholar&fromopenview=true,,"['Eliezer Dekel', 'David Nassimi', 'Sartaj Sahni']",3,['Parallel Matrix and Graph Algorithms'],,,,0,0,2,V: 2,$O(\log^2 V)$,2,"$V$: number of vertices
$E$: number of edges",V,,,"PRAM (not sure what type), SIMD computers?",words,5,V: 5,$O(V^2)$??,"Their $n\times n\times n$ cube setup seems to only require each processor to keep track of one entry $A[i, j]$, $B[i, j]$ and propagates the results across the structure, only requiring $O(1)$ auxiliary space per processor. Comparison sorting can be done easily with $O(1)$ auxiliary space per processor.",1,0,,0,,0,,0,1,$O(V^3)$?,0,0,,,,,,,,,,,,,,,,,,,,,6,,,Combinatorics,FALSE
57,DFA Minimization,2,DFA Minimization,DFA Minimization,456,,,1,1,$O(n \log \log n)$,"Uniform distribution over all complete automota with $n$ states, using a specific strategy for Hopcroft's algorithm",https://arxiv.org/pdf/1010.5318.pdf,[https://www.sciencedirect.com/science/article/abs/pii/B9780124177505500221 Hopcroft's algorithm (1971)],Hopcroft's algorithm,1971,https://www.sciencedirect.com/science/article/abs/pii/B9780124177505500221,,['John Hopcroft'],1,['An n log n algorithm for minimizing states in a finite automaton'],,,,1,0,4,"n: 4,
k: 3",$O(kn \log n)$,11,"$n$: number of states
$k$: size of alphabet",n,,,Word RAM,words,3,"k: 3,
n: 3",$O(kn)$,https://link.springer.com/content/pdf/10.1007/3-540-54430-5_107.pdf,0,0,,0,,0,,0,0,,0,0,http://infolab.stanford.edu/pub/cstr/reports/cs/tr/71/190/CS-TR-71-190.pdf,,,,,,,,,,,996578.4285,1003.433319,0.5852553754,1993156857,50171.66594,1.057613978,2989735285399,33447777.3,2.174128351,1,,,Combinatorics,FALSE
57,DFA Minimization,2,DFA Minimization,DFA Minimization,457,,,1,1,$O(n \log \log n)$,Uniform distribution over all complete automota with $n$ states,https://doi.org/10.1007/978-3-642-15155-2_29,[https://doi.org/10.2307/2964500 Moore's algorithm (1956)],Moore's algorithm,1956,https://doi.org/10.2307/2964500,10.2307/2964500,['Alonzo Church'],1,"['Edward F. Moore. Gedanken-experiments on sequential machines. Automata studies, edited by C. E. Shannon and J. McCarthy, Annals of Mathematics studies no. 34, litho-printed, Princeton University Press, Princeton1956, pp. 129‚Äì153.']",,,,1,0,5,"n: 5,
k: 3",$O(n^2 k)$,20,"$n$: number of states
$k$: size of alphabet",n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: Auxiliary data structure that keeps track of a 'block' binary variable for each state,1,0,,0,,0,,0,0,,0,0,,,,,k=100,,,,,,,1000000000,1,,100000000000000,1,,1E+20,1,,1,,,Combinatorics,FALSE
57,DFA Minimization,2,DFA Minimization,DFA Minimization,458,,,1,1,$O(2^n)$,,,[https://www.semanticscholar.org/paper/Canonical-regular-expressions-and-minimal-state-for-Brzozowski/94def4233e1e8f15bab72e82708a03fd37233b14 Brzozowski's algorithm (1963)],Brzozowski's algorithm,1963,https://www.semanticscholar.org/paper/Canonical-regular-expressions-and-minimal-state-for-Brzozowski/94def4233e1e8f15bab72e82708a03fd37233b14,,['J. Brzozowski'],1,['Canonical regular expressions and minimal state graphs for definite events'],,,,0,0,8,n: 8,$O(2^n)$,1000,"$n$: number of states
$k$: size of alphabet",n,,,Word RAM,words,8,n: 8,$O(2^n)$,http://www.cs.ru.nl/bachelors-theses/2017/Erin_van_der_Veen___4431200___The_Practical_Performance_of_Automata_Minimization_Algorithms.pdf,0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,FALSE
57,DFA Minimization,2,,Acyclic DFA Minimization,459,,,1,1,$O(n)$,,,[https://www.sciencedirect.com/science/article/pii/0304397592901423 Revuz's algorithm (1992)],Revuz's algorithm,1992,https://www.sciencedirect.com/science/article/pii/0304397592901423,,['Dominique Revuz'],1,['Minimisation of acyclic deterministic automata in linear time'],,,,1,3->6,3,n: 3,$O(n)$,10,"$n$: number of states
$d$: number of transitions
$k$: size of alphabet",n,,,Word RAM,words,3,n: 3,$O(n)$,https://www.labri.fr/perso/zeitoun/research/pdf/Almeida-Zeitoun-IPL2008.pdf,0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1000000,0.4677992676,1000000,100000000,0.6681005372,1000000000,100000000000,1.020949938,1,,,Combinatorics,FALSE
57,DFA Minimization,2,,Cyclic Nontrivial SCCs DFA Minimization,460,,,1,1,$O(n)$,,,[https://www.labri.fr/perso/zeitoun/research/pdf/Almeida-Zeitoun-IPL2008.pdf Almeida & Zeitoun (2008)],Almeida & Zeitoun,2008,https://www.labri.fr/perso/zeitoun/research/pdf/Almeida-Zeitoun-IPL2008.pdf,,"['JORGE ALMEIDA', 'MARC ZEITOUN']",2,['DESCRIPTION AND ANALYSIS OF A BOTTOM-UP DFA MINIMIZATION ALGORITHM'],,,,0,0,3,n: 3,$O(n)$,10,"$n$: number of states
$d$: number of transitions
$k$: size of alphabet",n,,,Word RAM,words,3,n: 3,$O(n)$,https://www.labri.fr/perso/zeitoun/research/pdf/Almeida-Zeitoun-IPL2008.pdf,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,1,,,Combinatorics,FALSE
58,Lowest Common Ancestor,2,Lowest Common Ancestor,Off-Line Lowest Common Ancestor,461,,,1,1,$O(n+m)$,Any distribution of values?,(need to read entire input + all queries),[https://www.semanticscholar.org/paper/Fast-Algorithms-for-Finding-Nearest-Common-Harel-Tarjan/8867d059dda279b1aed4a0301e4e46f9daf65174 Tarjan's off-line lowest common ancestors algorithm (1984)],Tarjan's off-line lowest common ancestors algorithm,1984,https://www.semanticscholar.org/paper/Fast-Algorithms-for-Finding-Nearest-Common-Harel-Tarjan/8867d059dda279b1aed4a0301e4e46f9daf65174,10.1137/0213024,"['Dov Harel', 'Robert Endre Tarjan']",2,['Fast Algorithms for Finding Nearest Common Ancestors'],2,1,,1,0,3,"n: 3,
m: 3",$O(n+m)$,10,"$n$: number of vertices
$m$: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,$O(n)$,https://www.semanticscholar.org/paper/Fast-Algorithms-for-Finding-Nearest-Common-Harel-Tarjan/8867d059dda279b1aed4a0301e4e46f9daf65174,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Combinatorics,FALSE
58,Lowest Common Ancestor,2,Lowest Common Ancestor,Lowest Common Ancestor with Static Trees,462,,,1,1,$O(n+m)$,Any distribution of values?,(need to read entire input + all queries),[https://epubs.siam.org/doi/abs/10.1137/0217079?journalCode=smjcat Schieber; Vishkin (1988)],Schieber; Vishkin,1988,https://epubs.siam.org/doi/abs/10.1137/0217079?journalCode=smjcat,10.1137/0217079,"['Baruch Schieber', 'Uzi Vishkin']",2,['On Finding Lowest Common Ancestors: Simplification and Parallelization'],,,,0,0,3,"n: 3,
m: 3",$O(n+m)$,10,"$n$: number of vertices
$m$: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,$O(n)$,https://epubs.siam.org/doi/abs/10.1137/0217079?journalCode=smjcat,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Combinatorics,FALSE
58,Lowest Common Ancestor,1,Lowest Common Ancestor,Lowest Common Ancestor with Static Trees,463,,,1,1,$O(n+m)$?,Any distribution of values?,(need to read entire input + all queries),[https://epubs.siam.org/doi/10.1137/0222017 Berkman; Vishkin (1993)],Berkman; Vishkin,1993,https://epubs.siam.org/doi/10.1137/0222017,,"['Omer Berkman', 'Uzi Vishkin']",2,['Recursive Star-Tree Parallel Data Structure'],,,,0,0,3,"n: 3,
m: 3",$O(n+m)$?,10,"$n$: number of vertices
$m$: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,$O(n)$,space bounded by pre-processing time,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Combinatorics,FALSE
58,Lowest Common Ancestor,2,Lowest Common Ancestor,Lowest Common Ancestor with Static Trees,464,,,1,1,$O(n+m)$,Any distribution of values?,(need to read entire input + all queries),[https://www.ics.uci.edu/~eppstein/261/BenFar-LCA-00.pdf Bender; Colton [LCA <=> RMQ] (2000)],Bender; Colton [LCA <=> RMQ],2000,https://www.ics.uci.edu/~eppstein/261/BenFar-LCA-00.pdf,,"['Michael A. Bender', 'Martin Farach-Colton']",2,['The LCA Problem Revisited'],,,,0,0,3,"n: 3,
m: 3",$O(n+m)$,10,"$n$: number of vertices
$m$: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,$O(n)$,space bounded by pre-processing time,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Combinatorics,FALSE
58,Lowest Common Ancestor,2,Lowest Common Ancestor,Lowest Common Ancestor with Static Trees,465,,,1,1,$O(n+m)$,Any distribution of values?,(need to read entire input + all queries),"[https://link.springer.com/article/10.1007/s00224-004-1155-5 Stephen Alstrup, Cyril Gavoille, Haim Kaplan & Theis Rauhe  (2004)]","Stephen Alstrup, Cyril Gavoille, Haim Kaplan & Theis Rauhe ",2004,https://link.springer.com/article/10.1007/s00224-004-1155-5,10.1007/s00224-004-1155-5,"['Stephen Alstrup', 'Cyril Gavoille', 'Haim Kaplan', 'Theis Rauhe']",4,['Nearest Common Ancestors: A Survey and a New Algorithm for a Distributed Environment'],,,,0,0,3,"n: 3,
m: 3",$O(n+m)$,10,"$n$: number of vertices
$m$: number of total number of operations (queries, links, and cuts)",n,,,Word RAM,words,3,n: 3,$O(n)$,"(see original reference, noting that a word is $O(\log n)$ bits)",0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Combinatorics,FALSE
59,Graph Edit Distance Computation,2,Exact GED,Exact GED,466,Beam Stack Search,,1,1,$O(VS)$,,,[https://doi.org/10.1016/j.knosys.2018.10.002  X Chen (2019)], X Chen,2019,https://doi.org/10.1016/j.knosys.2018.10.002,10.1016/j.knosys.2018.10.002,"['Xiaoyang Chen', 'Hongwei Huo', 'Jun Huan', 'Jeffrey Scott Vitter']",4,['An efficient algorithm for graph edit distance computation'],,,,0,0,8,"V: 8,
S: 3",$O(VS)$,,"$V$: number of vertices in the larger of the two graphs
$S$: size of the search tree ($\exp(V)$)
$w$: the beam width; parameter for how many of the best nodes are kept at each layer of the beam search ($O(V)$)",V,,,Word RAM,words,6,"V: 6,
w: 3",$O(wV^2)$,"Theorem 5, https://doi.org/10.1016/j.knosys.2018.10.002",0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,TRUE
59,Graph Edit Distance Computation,1,,Inexact GED,467,SimGNN,,1,0,$O(V^2)$,,,[https://arxiv.org/abs/1808.05689 Y Bai (2018)],Y Bai,2018,https://arxiv.org/abs/1808.05689,,"['Yunsheng Bai', 'Hao Ding', 'Song Bian', 'Ting Chen', 'Yizhou Sun', 'Wei Wang']",6,['SimGNN: A Neural Network Approach to Fast Graph Similarity Computation'],,,,0,0,5,V: 5,$O(V^2)$,,$V$: number of vertices in the larger of the two graphs,V,,,Word RAM,words,5,V: 5,$O(V^2)$,Derived: Auxiliary matrices for the neural network of size $V\times V$,1,0,,0,,1,none stated,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,TRUE
59,Graph Edit Distance Computation,2,,Inexact GED,468,AStar+,,1,0,$O(V E^2 \log V)$,,,[https://doi.org/10.48550/arXiv.1709.06810 L Chang (2017)],L Chang,2017,https://doi.org/10.48550/arXiv.1709.06810,10.48550/arXiv.1709.06810,"['Lijun Chang', 'Xing Feng', 'Xuemin Lin', 'Lu Qin', 'Wenjie Zhang']",5,['Efficient Graph Edit Distance Computation and Verification via Anchor-aware Lower Bound Estimation'],,,,0,0,7,"V: 7,
E: 5",$O(V E^2 \log V)$,16.1,"$V$: number of vertices in the larger of the two graphs
$E$: number of edges in the larger of the two graphs",V,,,Word RAM,words,3,V: 3,$O(V)$,"Theorem 5.1, and the bound on $T_{\leq \delta ...}$ is $V\log V$
https://doi.org/10.48550/arXiv.1709.06810",0,1,,0,,0,,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,TRUE
59,Graph Edit Distance Computation,2,,Inexact GED,469,A* with bipartite heuristic,,1,0,$O(V^2)$,,,[https://doi.org/10.1007/978-3-642-38221-5_15 K Riesen (2013)],K Riesen,2013,https://doi.org/10.1007/978-3-642-38221-5_15,10.1007/978-3-642-38221-5_15,"['Kaspar Riesen', 'Sandro Emmenegger', 'Horst Bunke']",3,['A Novel Software Toolkit for Graph Edit Distance Computation'],,,,0,0,5,V: 5,$O(V^2)$,,$V$: number of vertices in the larger of the two graphs,V,,,Word RAM,words,3,V: 3,$O(V)$,Space complexity of A*,0,0,,0,,0,,1,0,,0,0,,,,,,428.5714286,0.4978496225,428571.4286,1.37393167,428571428.6,2.762428143,,,,,,,,,,2,,,Combinatorics,TRUE
59,Graph Edit Distance Computation,0.001,Exact GED,,470,,,1,1,$O(V^3 E^2)$,,,[https://doi.org/10.1109/TSMC.1983.6313167 Alberto Sanfeliu and King-Sun Fu (1983)],Alberto Sanfeliu and King-Sun Fu,1983,https://doi.org/10.1109/TSMC.1983.6313167,10.1109/TSMC.1983.6313167,"['Alberto Sanfeliu', 'King-Sun Fu']",2,['A distance measure between attributed relational graphs for pattern recognition'],,,,1,0,7,"V: 7,
E: 5",$O(V^3 E^2)$,26.5,"$V$: number of vertices in the larger of the two graphs
$E$: number of edges in the larger of the two graphs",V,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,"V:E
3:4",,,,,,,25703575890998,1,,2.57036E+28,1,,2.57036E+43,1,,2,,,Combinatorics,TRUE
59,Graph Edit Distance Computation,2,,Inexact GED,471,A*-Beamsearch,,1,0,$O(V^2)$,,,"[https://link.springer.com/chapter/10.1007/11815921_17 Neuhaus, Riesen, Bunke (2006)]","Neuhaus, Riesen, Bunke",2006,https://link.springer.com/chapter/10.1007/11815921_17,10.1007/11815921_17,"['Michel Neuhaus', 'Kaspar Riesen', 'Horst Bunke']",3,['Fast Suboptimal Algorithms for the Computation of Graph Edit Distance'],,,,0,0,5,V: 5,$O(V^2)$,,"$V$: number of vertices in the larger of the two graphs
$w$: the beam width; parameter for how many of the best nodes are kept at each layer of the beam search ($O(V)$)",V,,,Word RAM,words,5,V: 5,$O(wV)$,Derived: number of nodes under consideration at once,1,0,,0,,0,,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,TRUE
59,Graph Edit Distance Computation,0.001,Exact GED,,472,Genetics-based,,1,1,$O(V E^2 \log \log E)$,,,[https://doi.org/10.1109/3477.604100 Wang Y-K; Fan K-C; Horng J-T (1997)],Wang Y-K; Fan K-C; Horng J-T,1997,https://doi.org/10.1109/3477.604100,10.1109/3477.604100,"['Yuan-Kai Wang', 'Kuo-Chin Fan', 'Jorng-Tzong Horng']",3,['Genetic-based search for error-correcting graph isomorphism'],,,,1,0,7,"V: 7,
E: 5.001",$O(V E^2 \log \log E)$,,"$V$: number of vertices in the larger of the two graphs
$E$: number of edges in the larger of the two graphs",V,,,,,#VALUE!,,,,,,,0,,0,,1,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,Genetics-based,,Combinatorics,TRUE
59,Graph Edit Distance Computation,1,,Inexact GED,474,energy-based,,1,0,$O(V^2 E)$,,,[https://direct.mit.edu/neco/article-pdf/10/7/1873/813998/089976698300017188.pdf?casa_token=nCYv9xO_Cc4AAAAA:EHiG4v8QmQju6u9RE6w4X6EGRtk5O5W6hIGy-_0A3HSit43f__4oSd4wjAtFIGJuopGMZzU Finch (1998)],Finch,1998,https://direct.mit.edu/neco/article-pdf/10/7/1873/813998/089976698300017188.pdf?casa_token=nCYv9xO_Cc4AAAAA:EHiG4v8QmQju6u9RE6w4X6EGRtk5O5W6hIGy-_0A3HSit43f__4oSd4wjAtFIGJuopGMZzU,,"['Andrew M. Finch', 'Richard C. Wilson', 'Edwin R. Hancock']",3,['An Energy Function and Continuous Edit Process for Graph Matching'],,,,1,2->3,7,"V: 7,
E: 3",$O(V^2 E)$,,"$V$: number of vertices in the larger of the two graphs
$E$: number of edges in the larger of the two graphs",V,,,Word RAM,words,5,V: 5,$O(V^2)$?,Seems to store/update a constant number of values per pair of nodes (one from each graph),1,0,,0,,0,,1,0,,0,0,click pdf at: https://scholar.google.com/scholar?hl=en&as_sdt=0%2C22&q=An+Energy+Function+and+Continuous+Edit+Process+for+Graph+Matching&btnG=,,,,,183673.4694,,183673469388,,1.83673E+17,,,,,,,,,,,2,,,Combinatorics,TRUE
60,Clique Problems,1,Enumerating Maximal Cliques,"Enumerating Maximal Cliques, arbitrary graph",475,,,1,1,$O(3^{n/3})$,,,[https://dl.acm.org/doi/10.1145/362342.362367 Bron–Kerbosch algorithm (1973)],Bron–Kerbosch algorithm,1973,https://dl.acm.org/doi/10.1145/362342.362367,10.1145/362342.362367,"['Coen Bron', 'Joep Kerbosch']",2,['Algorithm 457: finding all cliques of an undirected graph'],,,,1,-,8,n: 8,$O(3^{n/3})$,938,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$?,Keep track of an $O(n)$-sized recursive stack with $O(n)$-sized lists as elements?,1,0,,0,,0,,0,0,,0,0,,,,,,250000,,250000000000,,2.5E+17,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
60,Clique Problems,1,Enumerating Maximal Cliques,"Enumerating Maximal Cliques, arbitrary graph",476,,,1,1,$O(3^{n/3})$,,,[http://www.dcs.gla.ac.uk/~pat/jchoco/clique/enumeration/papers/SMJ000001%5B1%5D.pdf Akkoyunlu; E. A.  (1973)],Akkoyunlu; E. A. ,1973,http://www.dcs.gla.ac.uk/~pat/jchoco/clique/enumeration/papers/SMJ000001%5B1%5D.pdf,,['E. A. AKKOYUNLU'],1,['THE ENUMERATION OF MAXIMAL CLIQUES OF LARGE GRAPHS'],,,,0,-,8,n: 8,$O(3^{n/3})$,938,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$?,See Bron-Kerbosch (seems like a similar approach?),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,TRUE
60,Clique Problems,1,Enumerating Maximal Cliques,"Enumerating Maximal Cliques, arbitrary graph",477,,,1,1,$O(3^{n/3})$,,,[https://snap.stanford.edu/class/cs224w-readings/tomita06cliques.pdf Tomita; Tanaka & Takahashi (2006)],Tomita; Tanaka & Takahashi,2006,https://snap.stanford.edu/class/cs224w-readings/tomita06cliques.pdf,,"['Etsuji Tomita', 'Akira Tanaka', 'Haruhisa Takahashi']",3,['The worst-case time complexity for generating all maximal cliques and computational experiments'],,,,0,-,8,n: 8,$O(3^{n/3})$,938,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$?,See Bron-Kerbosch (seems like a similar approach?),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,TRUE
60,Clique Problems,1,Enumerating Maximal Cliques,"Enumerating Maximal Cliques, arbitrary graph",478,,,1,1,$O(3^{n/3})$?,,,[https://arxiv.org/pdf/1801.00202.pdf Segundo; Artieda;  Strash Parallel (2011)],Segundo; Artieda;  Strash Parallel,2011,https://arxiv.org/pdf/1801.00202.pdf,10.1016/j.cor.2017.12.006,"['Pablo San Segundo', 'Jorge Artieda', 'Darren Strash']",3,['Efficiently enumerating all maximal cliques with bit-parallelism'],,,,0,-,8,n: 8,$O(3^{n/3})$?,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$??,Keep track of an $O(n)$-sized recursive stack with $O(n)$-sized lists as elements? (this algo builds off of Bron-Kerbosch),1,0,,0,,0,,0,1,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
60,Clique Problems,1,Enumerating Maximal Cliques,"Enumerating Maximal Cliques, arbitrary graph",479,,,1,1,$O(dn 3^{d/3})$,,,"[https://arxiv.org/abs/1006.5440 David Eppstein, Maarten Löffler, Darren Strash (2010)]","David Eppstein, Maarten Löffler, Darren Strash",2010,https://arxiv.org/abs/1006.5440,,"['David Eppstein', 'Maarten Löffler', 'Darren Strash']",3,['Listing All Maximal Cliques in Sparse Graphs in Near-optimal Time'],,,,0,-,8,"n: 8,
d: 8",$O(dn 3^{d/3})$,938.1,"$n$: number of vertices
$m$: number of edges
$d$: degeneracy of graph (worst case, $d=O(n)$)",n,,,Word RAM,words,5,n: 5,$O(n^2)$?,"See Bron-Kerbosch, but also keeps track of $O(n)$-sized degeneracy ordering",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
60,Clique Problems,1,Enumerating Maximal Cliques,"Enumerating Maximal Cliques, arbitrary graph",480,,,1,1,$O(a(G)m)$ per clique,,,[https://pdfs.semanticscholar.org/0d19/245a27bc65a87a8014d5b8a66fb514c8ff0b.pdf Chiba and Nishizeki  (1985)],Chiba and Nishizeki ,1985,https://pdfs.semanticscholar.org/0d19/245a27bc65a87a8014d5b8a66fb514c8ff0b.pdf,,"['Norishige Chiba', 'Takao Nishizeki']",2,['Arboricity and Subgraph Listing Algorithms'],,,,0,-,6,"n: 6,
m: 3,
a(G): 3",$O(a(G)m)$ per clique,,"$n$: number of vertices
$m$: number of edges
$a(G)$: arboricity of graph ($O(n)$ worst case)",n,,,Word RAM,words,5,"m: 3,
n: 5",$O(m)$,https://pdfs.semanticscholar.org/0d19/245a27bc65a87a8014d5b8a66fb514c8ff0b.pdf,0,1,,0,,0,,0,0,,0,0,https://arxiv.org/pdf/1006.5440.pdf,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
60,Clique Problems,1,Enumerating Maximal Cliques,"Enumerating Maximal Cliques, arbitrary graph",481,,,1,1,$O(n d^2 2^d)$,,,[https://www.ics.uci.edu/~eppstein/pubs/ChrEpp-TCS-91.pdf M. Chrobak and D. Eppstein (1989)],M. Chrobak and D. Eppstein,1989,https://www.ics.uci.edu/~eppstein/pubs/ChrEpp-TCS-91.pdf,,"['Marek Chrobak', 'David Eppstein']",2,['Planar Orientations with Low Out-Degree and Compaction of Adjacency Matrices'],,,,0,-,8,n: 8,$O(n d^2 2^d)$,941.5,"$n$: number of vertices
$m$: number of edges
$d$: degeneracy of graph (worst case, $d=O(n)$)",n,,,Word RAM,words,3,n: 3,$O(n)$?,Keeps track of degeneracy ordering along with vertex and subset being tested (here the subset size is bounded by $O(d)=O(n)$),1,0,,0,,0,,0,0,,0,0,https://arxiv.org/pdf/1006.5440.pdf,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
60,Clique Problems,1,Enumerating Maximal Cliques,"Enumerating Maximal Cliques, arbitrary graph",482,,,1,1,$O(nm)$ per clique,,,"[https://www.proquest.com/docview/918487776?pq-origsite=gscholar&fromopenview=true Shuji Tsukiyama, Mikio Ide, Hiromu Ariyoshi, and Isao Shirakawa (1977)]","Shuji Tsukiyama, Mikio Ide, Hiromu Ariyoshi, and Isao Shirakawa",1977,https://www.proquest.com/docview/918487776?pq-origsite=gscholar&fromopenview=true,,"['Shuji Tsukiyama', 'Mikio Ide', 'Hiromu Ariyoshi', 'Isao Shirakawa']",4,['A New Algorithm for Generating All the Maximal Independent Sets'],,,,1,-,6,"n: 6,
m: 3",$O(nm)$ per clique,,"$n$: number of vertices
$m$: number of edges
$d$: degeneracy of graph (worst case, $d=O(n)$)",n,,,Word RAM,words,5,"m: 3,
n: 5",$O(m)$,"See original reference, but also note that we'd have to construct and store the complementary graph (as this is originally an algo for MISs)",0,1,,0,,0,,0,0,,0,0,,,,,"V:E
1:1",500,3.728708045,500000,25.59147948,500000000,148.5348781,250000,Inf,Inf,250000000000,Inf,Inf,2.5E+17,Inf,Inf,1,,,Combinatorics,TRUE
60,Clique Problems,1,Enumerating Maximal Cliques,"Enumerating Maximal Cliques, arbitrary graph",483,,,1,1,$O(n^{\omega})$ per clique,,,"[https://link.springer.com/chapter/10.1007/978-3-540-27810-8_23 Kazuhisa Makino, Takeaki Uno; Section 5 (2004)]","Kazuhisa Makino, Takeaki Uno; Section 5",2004,https://link.springer.com/chapter/10.1007/978-3-540-27810-8_23,10.1007/978-3-540-27810-8_23,"['Kazuhisa Makino', 'Takeaki Uno']",2,['New Algorithms for Enumerating All Maximal Cliques'],,,,0,-,5.3728596,n: 5.3728596,$O(n^{\omega})$ per clique,,"$n$: number of vertices
$m$: number of edges
$\omega$: exponent on matrix multiplication",n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://link.springer.com/chapter/10.1007/978-3-540-27810-8_23,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
61,The Traveling-Salesman Problem,1,,Minimum TSP,484,,,1,1,$O(V^2 2^V)$,,,[https://www.jstor.org/stable/2098806 Held–Karp algorithm (1962)],Held–Karp algorithm,1962,https://www.jstor.org/stable/2098806,,"['Michael Held', 'Richard M. Karp']",2,['A Dynamic Programming Approach to Sequencing Problems'],,,,1,0,8,V: 8,$O(V^2 2^V)$,1020,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,8,V: 8,$O(V 2^V)$,"Need to store all $C(S, l)$ for all subsets $S \subseteq V$ and all vertices $l$",1,0,,0,,0,,1,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
61,The Traveling-Salesman Problem,2,,Approximate TSP,485,,,1,0,$O(V^3)$,,,[https://web.archive.org/web/20190721172134/https://apps.dtic.mil/dtic/tr/fulltext/u2/a025602.pdf Christofides algorithm (1976)],Christofides algorithm,1976,https://web.archive.org/web/20190721172134/https://apps.dtic.mil/dtic/tr/fulltext/u2/a025602.pdf,,['Nicos Christofides'],1,['Worst-Case Analysis of a New Heuristic For the Travelling Salesman Problem'],,,,1,0,6,V: 6,$O(V^3)$,16,"$V$: number of vertices
$E$: number of edges",V,,,Word RAM,words,5,V: 5,$O(V^2)$??,Depends on best space complexity for $O(V^3)$ min-weight matching (the rest of the algorithm requires $O(V)$ auxiliary space),1,0,,0,,1,$1.5$,1,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
62,Poisson Problem,1,2-Dimensional Poisson Problem,2-Dimensional Poisson Problem,496,,,1,1,$O(4^{n^2})$,,,[ 5-point star Cramer's rule (1945)],5-point star Cramer's rule,1945,,,[],0,,,,,1,0,8,n: 8,$O(4^{n^2})$,9200,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,8,n: 8,"$O(4^{(n^2)})$ for sure, $O(n^2)$ possibly??? (if super conservative)","For expansion by minors, each ""level"" of expansion requires computing and storing $O(1)$ smaller determinants, and there are $O(n^2)$ levels overall",1,0,,0,,0,,0,0,,0,0,,,,,,Inf,,Inf,,Inf,,Inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,FALSE
62,Poisson Problem,1,2-Dimensional Poisson Problem,2-Dimensional Poisson Problem,497,,,1,1,$O(n^4)$,,,[ 5-point Gauss elimination (1945)],5-point Gauss elimination,1945,,,[],0,,,,,1,1->2,7,n: 7,$O(n^4)$,40,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,7,n: 7,$O(n^4)$,"See Gauss-Jordan elimination, but matrix is of size $n^2\times n^2$",1,0,,0,,0,,0,0,,0,0,,,,,,1000000000000,Inf,1E+24,Inf,1E+36,Inf,1000000000000,Inf,Inf,1E+24,Inf,Inf,1E+36,Inf,Inf,1,,,Numerical Analysis,FALSE
62,Poisson Problem,1,2-Dimensional Poisson Problem,2-Dimensional Poisson Problem,498,,,1,1,$O(n^4 \log n)$,,,[ 5-point Gauss Seidel iteration (1945)],5-point Gauss Seidel iteration,1945,,,[],0,,,,,0,0,7.01,n: 7.01,$O(n^4 \log n)$,41,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,$O(n^2)$?,Generally uses a constant number of $n^2\times n^2$ matrices where $O(n^2)$ entries are nonempty,1,0,,0,,0,,0,0,,0,0,,,,,,1000000,999999,1000000000000,999999999999,1E+18,1E+18,,,,,,,,,,1,,,Numerical Analysis,FALSE
62,Poisson Problem,1,2-Dimensional Poisson Problem,2-Dimensional Poisson Problem,499,,,1,1,$O(n^3 \log n)$,,,[ 5-point SOR iteration (1954)],5-point SOR iteration,1954,,,[],0,,,,,1,0,6.01,n: 6.01,$O(n^3 \log n)$,31,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,$O(n^2)$?,"Need one auxiliary $O(n^2)$-sized vector to store guess, and the scalar $\sigma$",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Successive_over-relaxation,,,,,,,,,,,9965784285,Inf,,1.99316E+19,Inf,,2.98974E+28,Inf,,1,,,Numerical Analysis,FALSE
62,Poisson Problem,1,2-Dimensional Poisson Problem,2-Dimensional Poisson Problem,500,,,1,1,$O(n^2 \log^2 n)$,,,[ 5-point ADI iteration (1955)],5-point ADI iteration,1955,,,[],0,,,,,1,2->3,5.02,n: 5.02,$O(n^2 \log^2 n)$,22,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,$O(n^2)$?,Generally uses a constant number of $n^2\times n^2$ matrices where $O(n^2)$ entries are nonempty,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Alternating-direction_implicit_method,,,,,,,,,,,99316856.41,Inf,,397267425633671,Inf,,8.93852E+20,Inf,,1,,,Numerical Analysis,FALSE
62,Poisson Problem,1,2-Dimensional Poisson Problem,2-Dimensional Poisson Problem,501,,,1,1,$O(n^3)$,,,[ 9-point SOR iteration (1956)],9-point SOR iteration,1956,,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,$O(n^2)$?,"Need one auxiliary $O(n^2)$-sized vector to store guess, and the scalar $\sigma$",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Successive_over-relaxation,,,,,,,,,,,1000000000,,,,,,,,,1,,,Numerical Analysis,FALSE
62,Poisson Problem,1,2-Dimensional Poisson Problem,2-Dimensional Poisson Problem,502,,,1,1,$O(n^3)$,,,[https://epubs.siam.org/doi/pdf/10.1137/0113067 9-point Tensor product (1964)],9-point Tensor product,1964,https://epubs.siam.org/doi/pdf/10.1137/0113067,10.1137/0113067,"['Robert E. Lynch', 'John R. Rice', 'Donald H. Thomas']",3,['Tensor Product Analysis of Alternating Direction Implicit Methods'],,,,1,0,6,n: 6,$O(n^3)$,30,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,$O(n^2)$?,Generally uses a constant number of $n^2\times n^2$ matrices where $O(n^2)$ entries are nonempty,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784,Inf,,19931568569324,Inf,,2.98974E+19,Inf,,1,,,Numerical Analysis,FALSE
62,Poisson Problem,1,2-Dimensional Poisson Problem,2-Dimensional Poisson Problem,503,,,1,1,$O(n^2 \log n)$,,,[ 9-point ADI iteration (1965)],9-point ADI iteration,1965,,,[],0,,,,,0,0,5.01,n: 5.01,$O(n^2 \log n)$,21,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,$O(n^2)$?,Generally uses a constant number of $n^2\times n^2$ matrices where $O(n^2)$ entries are nonempty,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784,,,,,,,,,1,,,Numerical Analysis,FALSE
62,Poisson Problem,1,2-Dimensional Poisson Problem,2-Dimensional Poisson Problem,504,,,1,1,$O(n^2 \log n)$,,,[ 5-point FFT (1965)],5-point FFT,1965,,,[],0,,,,,0,0,5.01,n: 5.01,$O(n^2 \log n)$,21,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,$O(n^2)$?,FFT generally requires aux. space equal to dimension of vector?,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,99301225,,,,,,,,,1,,,Numerical Analysis,FALSE
62,Poisson Problem,1,2-Dimensional Poisson Problem,2-Dimensional Poisson Problem,505,,,1,1,$O(n^2 \log n)$,,,[ 5-point FFT (1965)],5-point FFT,1965,,,[],0,,,,,0,0,5.02,n: 5.02,$O(n^2 \log n)$,21,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,$O(n^2)$?,Generally uses a constant number of $n^2\times n^2$ matrices where $O(n^2)$ entries are nonempty,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784,,,,,,,,,1,,,Numerical Analysis,FALSE
62,Poisson Problem,1,2-Dimensional Poisson Problem,2-Dimensional Poisson Problem,506,,,1,1,$O(n^2 \log n)$,,,[ 5-point FFT (1965)],5-point FFT,1965,,,[],0,,,,,0,0,5.03,n: 5.03,$O(n^2 \log n)$,21,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,$O(n^2)$?,Generally uses a constant number of $n^2\times n^2$ matrices where $O(n^2)$ entries are nonempty,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784,,,,,,,,,1,,,Numerical Analysis,FALSE
62,Poisson Problem,1,2-Dimensional Poisson Problem,2-Dimensional Poisson Problem,507,,,1,1,$O(n^2 \log n)$,,,[ 5-point FFT (1965)],5-point FFT,1965,,,[],0,,,,,0,0,5.04,n: 5.04,$O(n^2 \log n)$,21,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,5,n: 5,$O(n^2)$?,FFT generally requires aux. space equal to dimension of vector?,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784,,,,,,,,,1,,,Numerical Analysis,FALSE
63,Poisson Problem,1,3-Dimensional Poisson Problem,3-Dimensional Poisson Problem,508,,,1,1,$O(5^{n^3})$,,,[ 5-point star Cramer's rule (1945)],5-point star Cramer's rule,1945,,,[],0,,,,,1,0,8,n: 8,$O(5^{n^3})$,9305,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,8,n: 8,"$O(5^{(n^3)})$ for sure, $O(n^3)$ possibly??? (if super conservative)","For expansion by minors, each ""level"" of expansion requires computing and storing $O(1)$ smaller determinants, and there are $O(n^3)$ levels overall",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,FALSE
63,Poisson Problem,1,3-Dimensional Poisson Problem,3-Dimensional Poisson Problem,509,,,1,1,$O(n^7)$,,,[ 5-point Gauss elimination (1945)],5-point Gauss elimination,1945,,,[],0,,,,,1,1->2,7,n: 7,$O(n^7)$,70,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,7,n: 7,$O(n^6)$,"See Gauss-Jordan elimination, but matrix is of size $n^3\times n^3$",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000000,Inf,,1E+24,Inf,,1E+36,Inf,,1,,,Numerical Analysis,FALSE
63,Poisson Problem,1,3-Dimensional Poisson Problem,3-Dimensional Poisson Problem,510,,,1,1,$O(n^5 \log n)$,,,[ 5-point Gauss Seidel iteration (1945)],5-point Gauss Seidel iteration,1945,,,[],0,,,,,0,0,7,n: 7,$O(n^5 \log n)$,51,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,$O(n^3)$?,Generally uses a constant number of $n^3\times n^3$ matrices where $O(n^3)$ entries are nonempty,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784284660,,,,,,,,,1,,,Numerical Analysis,FALSE
63,Poisson Problem,1,3-Dimensional Poisson Problem,3-Dimensional Poisson Problem,511,,,1,1,$O(n^4 \log n)$,,,[ 5-point SOR iteration (1954)],5-point SOR iteration,1954,,,[],0,,,,,1,0,7,n: 7,$O(n^4 \log n)$,41,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,$O(n^3)$?,"Need one auxiliary $O(n^3)$-sized vector to store guess, and the scalar $\sigma$",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Successive_over-relaxation,,,,,,,,,,,9965784285,Inf,,1.99316E+19,Inf,,2.98974E+28,Inf,,1,,,Numerical Analysis,FALSE
63,Poisson Problem,1,3-Dimensional Poisson Problem,3-Dimensional Poisson Problem,512,,,1,1,$O(n^3 \log^2 n)$,,,[ 5-point ADI iteration (1955)],5-point ADI iteration,1955,,,[],0,,,,,1,2->3,6.02,n: 6.02,$O(n^3 \log^2 n)$,32,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,$O(n^3)$?,Generally uses a constant number of $n^3\times n^3$ matrices where $O(n^3)$ entries are nonempty,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Alternating-direction_implicit_method,,,,,,,,,,,99316856.41,Inf,,397267425633671,Inf,,8.93852E+20,Inf,,1,,,Numerical Analysis,FALSE
63,Poisson Problem,1,3-Dimensional Poisson Problem,3-Dimensional Poisson Problem,513,,,1,1,$O(n^4)$,,,[ 9-point SOR iteration (1956)],9-point SOR iteration,1956,,,[],0,,,,,0,0,7,n: 7,$O(n^4)$,40,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,$O(n^3)$?,"Need one auxiliary $O(n^3)$-sized vector to store guess, and the scalar $\sigma$",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Successive_over-relaxation,,,,,,,,,,,1000000000,,,,,,,,,1,,,Numerical Analysis,FALSE
63,Poisson Problem,1,3-Dimensional Poisson Problem,3-Dimensional Poisson Problem,514,,,1,1,$O(n^4)$,,,[https://epubs.siam.org/doi/pdf/10.1137/0113067 9-point Tensor product (1964)],9-point Tensor product,1964,https://epubs.siam.org/doi/pdf/10.1137/0113067,10.1137/0113067,"['Robert E. Lynch', 'John R. Rice', 'Donald H. Thomas']",3,['Tensor Product Analysis of Alternating Direction Implicit Methods'],,,,1,0,7,n: 7,$O(n^4)$,40,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,$O(n^3)$?,Generally uses a constant number of $n^3\times n^3$ matrices where $O(n^3)$ entries are nonempty,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784,Inf,,19931568569324,Inf,,2.98974E+19,Inf,,1,,,Numerical Analysis,FALSE
63,Poisson Problem,1,3-Dimensional Poisson Problem,3-Dimensional Poisson Problem,515,,,1,1,$O(n^3 \log n)$,,,[ 9-point ADI iteration (1965)],9-point ADI iteration,1965,,,[],0,,,,,0,0,6.01,n: 6.01,$O(n^3 \log n)$,31,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,$O(n^3)$?,Generally uses a constant number of $n^3\times n^3$ matrices where $O(n^3)$ entries are nonempty,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784,,,,,,,,,1,,,Numerical Analysis,FALSE
63,Poisson Problem,1,3-Dimensional Poisson Problem,3-Dimensional Poisson Problem,516,,,1,1,$O(n^3 \log n)$,,,[ 5-point FFT (1965)],5-point FFT,1965,,,[],0,,,,,0,0,6.01,n: 6.01,$O(n^3 \log n)$,31,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,$O(n^3)$?,FFT generally requires aux. space equal to dimension of vector?,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,99301225,,,,,,,,,1,,,Numerical Analysis,FALSE
63,Poisson Problem,1,3-Dimensional Poisson Problem,3-Dimensional Poisson Problem,517,,,1,1,$O(n^3 \log n)$,,,[ 9-point ADI iteration + smooth guess (1969)],9-point ADI iteration + smooth guess,1969,,,[],0,,,,,0,0,6.01,n: 6.01,$O(n^3 \log n)$,31,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,$O(n^3)$?,Generally uses a constant number of $n^3\times n^3$ matrices where $O(n^3)$ entries are nonempty,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784,,,,,,,,,1,,,Numerical Analysis,FALSE
63,Poisson Problem,1,3-Dimensional Poisson Problem,3-Dimensional Poisson Problem,518,,,1,1,$O(n^3 \log n)$,,,[ 5-point cyclic reduction (1970)],5-point cyclic reduction,1970,,,[],0,,,,,0,0,6.01,n: 6.01,$O(n^3 \log n)$,31,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,$O(n^3)$?,Generally uses a constant number of $n^3\times n^3$ matrices where $O(n^3)$ entries are nonempty,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784,,,,,,,,,1,,,Numerical Analysis,FALSE
63,Poisson Problem,1,3-Dimensional Poisson Problem,3-Dimensional Poisson Problem,519,,,1,1,$O(n^3 \log n)$,,,[ 9-point FFT (1978)],9-point FFT,1978,,,[],0,,,,,0,0,6.01,n: 6.01,$O(n^3 \log n)$,31,$n$: dimension of grid (where grid is discretized),n,,,Real RAM?,words,6,n: 6,$O(n^3)$?,FFT generally requires aux. space equal to dimension of vector?,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965784,,,,,,,,,1,,,Numerical Analysis,FALSE
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,2-Dimensional Delaunay Triangulation,520,,,1,1,$O(n^4)$?,,,[- Naive algorithm (1934)],Naive algorithm,1934,-,,[],0,,1,1,,1,0,7,n: 7,$O(n^4)$?,,$n$: number of points,n,,,Real RAM?,words,3,n: 3,$O(n)$,"Keep track of triangles in triangulation, and current triangle being tested",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Combinatorics,FALSE
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,2-Dimensional Delaunay Triangulation,521,,,1,1,$O(n^2)$,,,[https://link.springer.com/article/10.1007/PL00009464 Flipping algorithm (1999)],Flipping algorithm,1999,https://link.springer.com/article/10.1007/PL00009464,10.1007/PL00009464,"['F. Hurtado', 'M. Noy', 'J. Urrutia']",3,['Flipping Edges in Triangulations'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of points,n,,,Real RAM?,words,3,n: 3,$O(n)$,Keep track of edges in current triangulation,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Combinatorics,FALSE
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,2-Dimensional Delaunay Triangulation,522,,,1,1,$O(n \log n)$,,,[https://link.springer.com/chapter/10.1007/978-3-662-03427-9_9 de Berg; Cheong (2008)],de Berg; Cheong,2008,https://link.springer.com/chapter/10.1007/978-3-662-03427-9_9,,"['Mark de Berg', 'Marc van Kreveld', 'Mark Overmars', 'Otfried Schwarzkopf']",4,['Delaunay Triangulations'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of points,n,,,Real RAM?,words,3,n: 3,$O(n)$,"Keep track of triangles in current triangulation, based on which points have been added so far",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics,FALSE
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,2-Dimensional Delaunay Triangulation,523,,,1,1,$O(n \log n)$,,,[https://academic.oup.com/comjnl/article/24/2/167/338200 Bowyer–Watson algorithm (1981)],Bowyer–Watson algorithm,1981,https://academic.oup.com/comjnl/article/24/2/167/338200,10.1093/comjnl/24.2.167,['D. F. Watson'],1,['Computing the n-dimensional Delaunay tessellation with application to Voronoi polytopes'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of points,n,,,Real RAM?,words,3,n: 3,$O(n)$,"Keep track of triangles in current triangulation, based on which points have been added so far and which triangles to remove",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics,FALSE
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,2-Dimensional Delaunay Triangulation,524,,,1,1,$O(n \log n)$,,,[https://web.archive.org/web/20180425231851/https://www.cs.cmu.edu/~ygu1/paper/SPAA16/Incremental.pdf Belloch (2006)],Belloch,2006,https://web.archive.org/web/20180425231851/https://www.cs.cmu.edu/~ygu1/paper/SPAA16/Incremental.pdf,,"['Guy E. Blelloch', 'Yan Gu', 'Julian Shun', 'Yihan Sun']",4,['Parallelism in Randomized Incremental Algorithms'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of points,n,,,Real RAM?,words,3,n: 3,$O(n)$,"Keep track of triangles in current triangulation, based on which points have been added so far and which triangles to remove (see other incremental algos)",1,0,,0,,0,,0,1,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics,FALSE
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,2-Dimensional Delaunay Triangulation,525,,,1,1,$O(n \log n)$,,,[https://dl.acm.org/doi/10.1145/282918.282923 Guibas; Stofli (1985)],Guibas; Stofli,1985,https://dl.acm.org/doi/10.1145/282918.282923,,"['Leonidas Guibas', 'Jorge Stolfi']",1,['Primitives for the manipulation of general subdivisions and the computation of Voronoi'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of points,n,,,Real RAM?,words,3,n: 3,$O(n)$,"Space recursion is $S(n)=\max(2S(n/2), O(n))$ as triangulations from recursive calls are modified in the merge step",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics,FALSE
64,Delaunay Triangulation,1,#N/A,Approximate 2-Dimensional Delaunay Triangulation,526,,,1,0,$O(n^2)$,,,[https://dl.acm.org/doi/10.1145/142675.142695 Fortune (1992)],Fortune,1992,https://dl.acm.org/doi/10.1145/142675.142695,10.1145/142675.142695,['Steven Fortune'],1,['Numerical stability of algorithms for 2D Delaunay triangulations'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of points,n,,,Real RAM?,words,3,n: 3,$O(n)$,See incremental/flipping algorithm space complexities,1,0,,0,,1,$O(1/(n\epsilon))$,0,0,,0,0,,"Given a set of points on a surface, find a triangulation such that for every triangule there is a circumscribing pseudocircle that is $\alpha$-empty. A circumscribing $\alpha$-pseudocircle are circular arcs with endpoints at the vertices of the polygon which all lie inside the circumscribing circle of the polygon and make an angle at most $\alpha$ with the circumscribing polygon at the verticies. A pseudocircle is $\alpha$-empty if it is an $\alpha$-pseudocircle and it contains no verticies in its interior.",,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics,FALSE
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,2-Dimensional Delaunay Triangulation,528,,,1,1,$O(n \log n)$,,,[http://www.s-hull.org/paper/s_hull.pdf S-hull (Sinclair) (2010)],S-hull (Sinclair),2010,http://www.s-hull.org/paper/s_hull.pdf,,['D. A. Sinclair'],1,['S-hull: a fast radial sweep-hull routine for Delaunay triangulation'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of points,n,,,Real RAM?,words,3,n: 3,$O(n)$,"Keep track of triangles in current triangulation, based on which points have been added so far and which triangles to remove",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics,FALSE
64,Delaunay Triangulation,2,2-Dimensional Delaunay Triangulation,2-Dimensional Delaunay Triangulation,529,,,1,1,$O(n \log \log n)$,uniform distribution in the unit square,https://link.springer.com/article/10.1007/BF01840356,[https://link.springer.com/article/10.1007/BF01840356 Dwyer (1987)],Dwyer,1987,https://link.springer.com/article/10.1007/BF01840356,10.1007/BF01840356,['Rex A. Dwyer'],1,['A faster divide-and-conquer algorithm for constructing delaunay triangulations'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of points,n,,,Real RAM?,words,3,n: 3,$O(n)$?,"Space recursion is $S(n)=\max(2S(n/2), O(n))$ as triangulations from recursive calls are modified in the merge step",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Combinatorics,FALSE
64,Delaunay Triangulation,0.001,,,530,Cell technique and divide-and-conquer,,1,1,$O(n)$,,https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6313167,[https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6313167  Katajainen and M. Koppinen (1988)], Katajainen and M. Koppinen,1988,https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=6313167,,"['ALBERTO SANFELIU', 'KING-SUN FU']",2,['A Distance Measure Between Attributed Relational Graphs for Pattern Recognition'],,,,1,4->5,4,n: 4,$O(n \log n)$,11,$n$: number of points,n,,,Real RAM?,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,3316.983346,301.4787521,0.1262924722,4316983.346,231643.2378,0.2935019136,4901945847,204000621.6,0.4897634763,4,,,Combinatorics,FALSE
64,Delaunay Triangulation,1,2-Dimensional Delaunay Triangulation,2-Dimensional Delaunay Triangulation,531,,,1,1,$O(n)$,uniform distribution in the unit square,https://web.archive.org/web/20120308043808/http://www.cs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf,[https://web.archive.org/web/20120308043808/http://www.cs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf Drysdale; Su (1996)],Drysdale; Su,1996,https://web.archive.org/web/20120308043808/http://www.cs.berkeley.edu/~jrs/meshpapers/SuDrysdale.pdf,,"['Peter Su', 'Robert L. Scot Drysdale']",2,['A Comparison of Sequential Delaunay Triangulation Algorithms'],1,1,,1,5->6,3,n: 3,$O(n)$,10,$n$: number of points,n,,,Real RAM?,words,3,n: 3,$O(n)$?,See other incremental algorithms,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1000,0.1312834366,1000000,1000000,0.279802214,1000000000,1000000000,0.4478190469,4,,,Combinatorics,FALSE
64,Delaunay Triangulation,1,,General Delaunay Triangulation (d-dimensions),532,,,1,1,$O(n)$,random points from a d-ball,https://link.springer.com/article/10.1007/BF02574694,[https://link.springer.com/article/10.1007/BF02574694 Dwyer (higher dimensions) (1987)],Dwyer (higher dimensions),1987,https://link.springer.com/article/10.1007/BF02574694,10.1007/BF02574694,['Rex A. Dwyer'],1,['Higher-dimensional voronoi diagrams in linear expected time'],,,,0,0,3.99,n: 3.99,$O(n \log \log n)$,10.1,$n$: number of points,n,,,Real RAM?,words,3,n: 3,$O(n)$?,Keep track of $O(1)$ information per triangle related to triangulation??,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,3316.983346,301.4787521,0.1291461101,4316983.346,231643.2378,0.3006040392,4901945847,204000621.6,0.5024522209,4,,,Combinatorics,FALSE
65,De Novo Genome Assembly,1,De Novo Genome Assembly,De Novo Genome Assembly,533,,,1,1,$O(n^2)$,,,"[https://www.ncbi.nlm.nih.gov/pubmed/7497130 de Bruijn Graph (Idury, Waterman) (1994)]","de Bruijn Graph (Idury, Waterman)",1994,https://www.ncbi.nlm.nih.gov/pubmed/7497130,10.1089/cmb.1995.2.291,"['RAMANA M. IDURY', 'MICHAEL S. WATERMAN']",2,['A New Algorithm for DNA Sequence Assembly'],,,,1,0,5,n: 5,$O(n^2)$,20,"$n$: sum of lengths of reads
$f$: number of input sequences?",n,,,Word RAM,words,3,n: 3,$O(n)$?,Requires computing $O(n)$ overlaps for graph; data structures are otherwise linear in space usage,1,0,,0,,0,,0,0,,0,0,"https://academic.oup.com/bioinformatics/article/32/9/1301/1744507

https://ieeexplore.ieee.org/document/9684373",,,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Bioinformatics,FALSE
65,De Novo Genome Assembly,1,De Novo Genome Assembly,De Novo Genome Assembly,535,,,1,1,$O(n \log n)$,,,[https://www.ncbi.nlm.nih.gov/pubmed/7497129 String Graph (Myers) (1994)],String Graph (Myers),1994,https://www.ncbi.nlm.nih.gov/pubmed/7497129,10.1089/cmb.1995.2.275,['EUGENE W. MYERS'],1,['Toward Simplifying and Accurately Formulating Fragment Assembly'],,,,1,4->5,4,n: 4,$O(n \log n)$,11,"$n$: sum of lengths of reads
$f$: number of input sequences?",n,,,Word RAM,words,3,n: 3,$O(n)$?,Requires computing $O(n)$ overlaps for graph; data structures are otherwise linear in space usage,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,100.3512293,,19931568.57,50171.66594,,29897352854,33447777.3,,4,,,Bioinformatics,FALSE
65,De Novo Genome Assembly,1,De Novo Genome Assembly,De Novo Genome Assembly,536,,,1,1,$O(n)$,,,"[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2881401/pdf/btq217.pdf String Graph with Ferragina–Manzini Index (Simpson, Durbin) (2010)]","String Graph with Ferragina–Manzini Index (Simpson, Durbin)",2010,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2881401/pdf/btq217.pdf,,"['Jared T. Simpson', 'Richard Durbin']",2,['Efficient construction of an assembly string graph using the FM-index'],,,,1,5->6,3,n: 3,$O(n)$,10,"$n$: sum of lengths of reads
$f$: number of input sequences?",n,,,Word RAM,words,3,n: 3,$O(n)$?,Requires computing $O(n)$ overlaps for graph; data structures are otherwise linear in space usage,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,9.965,0.1545289608,1000000,19.93156857,0.2056502551,1000000000,29.89735285,0.2365937469,4,,,Bioinformatics,FALSE
65,De Novo Genome Assembly,0.001,De Novo Genome Assembly,De Novo Genome Assembly,538,,,1,1,$O(n^2)$,,,[https://pubmed.ncbi.nlm.nih.gov/22750884/ Hybrid Algorithm (2012)],Hybrid Algorithm,2012,https://pubmed.ncbi.nlm.nih.gov/22750884/,,"['Sergey Koren', 'Michael C Schatz', 'Brian P Walenz', 'Jeffrey Martin', 'Jason T Howard', 'Ganeshkumar Ganapathy', 'Zhong Wang', 'David A Rasko', 'W Richard McCombie', 'Erich D Jarvis', 'Adam M Phillippy']",11,['Hybrid error correction and de novo assembly of single-molecule sequencing reads'],,,,0,0,5,n: 5,$O(n^2)$,20,"$n$: sum of lengths of reads
$f$: number of input sequences?",n,,,Word RAM,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC5826002/#bibr6-1176934318758650:~:text=Hybrid%20assembling%20algorithm,,,,,,,,,,,1000000,,,,,,,,,4,,,Bioinformatics,FALSE
66,The Subset-Sum Problem,1,Subset Sum,Subset Sum,539,,,1,1,$O(n 2^n)$,,,[ Naive algorithm (1940)],Naive algorithm,1940,,,[],0,,,,,1,0,8,n: 8,$O(n 2^n)$,1010,$n$: the number of integers in the set,n,,,Word RAM,words,3,n: 3,$O(n)$,https://dl.acm.org/doi/10.1145/321812.321823,0,0,,0,,0,,0,0,,0,0,,,,,,1000,,1000000,,1000000000,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
67,Dependency Inference Problem,1,,Functional Dependency Inference Problem,554,,,1,1,$O(n^2 2^n p \log p)$,,,[https://www.sciencedirect.com/science/article/pii/0166218X92900315 Brute force algorithm (1967)],Brute force algorithm,1967,https://www.sciencedirect.com/science/article/pii/0166218X92900315,,"['Heikki Mannila', 'Kari-Jouko Räihä']",2,['On the complexity of inferring functional dependencies'],,,,1,0,8,"n: 8,
p: 4",$O(n^2 2^n p \log p)$,,"$n$: number of attributes
$p$: number of tuples/rows/data points",n,,,Word RAM,words,8,"n: 8,
p: 1",$O(n2^n)$?,"bound on size of output ($2^n$ domains, $O(n)$ possible attributes per domain); can probably be improved",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Databases,TRUE
67,Dependency Inference Problem,1,,Functional Dependency Inference Problem,555,,,1,1,$O(n 2^n p)$,,,[https://dl.acm.org/doi/abs/10.5555/3000767.3000786 Schlimmer (1993)],Schlimmer,1993,https://dl.acm.org/doi/abs/10.5555/3000767.3000786,,['Jeffrey C. Schlimmer'],1,['Using learned dependencies to automatically construct sufficient and sensible editing views'],,,,1,0,8,"n: 8,
p: 3",$O(n 2^n p)$,,"$n$: number of attributes
$p$: number of tuples/rows/data points",n,,,Word RAM,words,8,"n: 8,
p: 1",$O(2^n)$,"(original source, but without user-supplied bound",0,1,,0,,0,,0,0,,0,0,https://www.aaai.org/Papers/Workshops/1993/WS-93-02/WS93-02-017.pdf,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Databases,TRUE
68,BCNF Decomposition,2,#N/A,Decisional Perfect BCNF,556,,,1,1,$O(kn^2)$,,,[https://doi.org/10.1016/0950-5849(92)90028-N Liu (1992)],Liu,1992,https://doi.org/10.1016/0950-5849(92)90028-N,10.1016/0950-5849(92)90028-N,['W.-Y. Liu'],1,['Method to determine existence of perfect BCNF decomposition'],,,,1,0,6,"n: 6,
k: 3",$O(kn^2)$,,"$n$: size of database?
$k$: number of functional dependencies (assume $O(n)$)",n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: Creates an auxiliary database,1,0,,0,,0,,0,0,,0,0,,,,,"k:n
1:1",,,,,,,125000000,1,,1.25E+17,1,,1.25E+26,1,,3,,,Databases,TRUE
69,4NF Decomposition,0.001,,,557,,,1,1,$O(2^n)$,,,[ Tradu; Mirc (1967)],Tradu; Mirc,1967,,,[],0,,,,,0,0,8,n: 8,$O(2^n)$,,$n$: number of attributes?,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Databases,TRUE
69,4NF Decomposition,0.001,,,558,,,1,1,$O(2^n)$,,,[ Xu; Renio (1972)],Xu; Renio,1972,,,[],0,,,,,0,0,8,n: 8,$O(2^n)$,,$n$: number of attributes?,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Databases,TRUE
69,4NF Decomposition,0.001,,,559,,,1,1,$O(2^n)$,,,[ Xu; Renio (1972)],Xu; Renio,1972,,,[],0,,,,,0,0,9,n: 9,$O(2^n)$,,$n$: number of attributes?,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Databases,TRUE
69,4NF Decomposition,0.001,,,560,,,1,1,$O(2^n)$,,,[ Xu; Renio (1972)],Xu; Renio,1972,,,[],0,,,,,0,0,10,n: 10,$O(2^n)$,,$n$: number of attributes?,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Databases,TRUE
69,4NF Decomposition,0.001,,,561,,,1,1,$O(2^n)$,,,[ Xu; Renio (1972)],Xu; Renio,1972,,,[],0,,,,,0,0,11,n: 11,$O(2^n)$,,$n$: number of attributes?,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Databases,TRUE
69,4NF Decomposition,0.001,,,562,,,1,1,$O(2^n)$,,,[ Xu; Renio (1972)],Xu; Renio,1972,,,[],0,,,,,0,0,12,n: 12,$O(2^n)$,,$n$: number of attributes?,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Databases,TRUE
69,4NF Decomposition,0.001,,,563,,,1,1,$O(2^n)$,,,[ Xu; Renio (1972)],Xu; Renio,1972,,,[],0,,,,,0,0,13,n: 13,$O(2^n)$,,$n$: number of attributes?,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Databases,TRUE
69,4NF Decomposition,0.001,,,564,,,1,1,$O(2^n)$,,,[ Xu; Renio (1972)],Xu; Renio,1972,,,[],0,,,,,0,0,14,n: 14,$O(2^n)$,,$n$: number of attributes?,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Databases,TRUE
70,Dependency Inference Problem,1,,Multivalued Dependency Inference Problem,566,,,1,1,$O(n^2 2^n p \log p)$,,,[https://www.sciencedirect.com/science/article/pii/0166218X92900315 Räihä; Manilla (1992)],Räihä; Manilla,1992,https://www.sciencedirect.com/science/article/pii/0166218X92900315,,"['Heikki Mannila', 'Kari-Jouko Räihä']",2,['On the complexity of inferring functional dependencies'],,,,0,0,8,n: 8,$O(n^2 2^n p \log p)$,,"$n$: number of attributes
$p$: number of tuples/rows/data points",n,,,Word RAM,words,8,"n: 8,
p: 1",$O(n2^n)$?,"bound on size of output ($2^n$ domains, $O(n)$ possible attributes per domain); can probably be improved",1,0,,0,,0,,0,0,,0,0,,,,,L=100,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Databases,TRUE
70,Dependency Inference Problem,0.001,,Multivalued Dependency Inference Problem,567,,,1,1,$O(4^n)$,,,[https://dl.acm.org/doi/10.1145/509404.509414 Catriel Beeri Ronald Fagin John H. Howard (1977)],Catriel Beeri Ronald Fagin John H. Howard,1977,https://dl.acm.org/doi/10.1145/509404.509414,10.1145/509404.509414,"['Catriel Beeri', 'Ronald Fagin', 'John H. Howard']",3,['A complete axiomatization for functional and multivalued dependencies in database relations'],,,,1,0,8,n: 8,$O(4^n)$,,"$n$: number of attributes
$p$: number of tuples/rows/data points",n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Databases,TRUE
71,Disk Scheduling,2,Disk Scheduling,Disk Scheduling,568,,,1,1,$O(n)$,Any distribution of inputs,Same behavior regardless of input,[- FCFS (1979)],FCFS,1979,-,,[],0,,,,,1,0,3,n: 3,$O(n)$,10,$n$: number of requests,n,,,Word RAM,words,1,n: 1,$O(1)$,Needs to keep track of seek distance but FCFS is fairly straightforward/no extra info needed,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/FIFO_(computing_and_electronics),,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Operating Systems,FALSE
71,Disk Scheduling,2,Disk Scheduling,Disk Scheduling,569,,,1,1,$O(n \log n)$ with binary tree,Any distribution of inputs,Same behavior regardless of input,[- SSTF (1979)],SSTF,1979,-,,[],0,,,,,0,0,4,n: 4,$O(n \log n)$ with binary tree,11,$n$: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,https://www.geeksforgeeks.org/program-for-sstf-disk-scheduling-algorithm/?ref=lbp,0,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Shortest_seek_first,,,,,,,,,,,1000,,,,,,,,,6,,,Operating Systems,FALSE
71,Disk Scheduling,2,Disk Scheduling,Disk Scheduling,570,,,1,1,$O(n \log n)$,Any distribution of inputs,Same behavior regardless of input,[- SCAN (1979)],SCAN,1979,-,,[],0,,,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,https://www.geeksforgeeks.org/scan-elevator-disk-scheduling-algorithms/?ref=lbp,0,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Elevator_algorithm,,,,,,,,,,,1000,,,,,,,,,6,,,Operating Systems,FALSE
71,Disk Scheduling,2,Disk Scheduling,Disk Scheduling,571,,,1,1,$O(n \log n)$,Any distribution of inputs,Same behavior regardless of input,[- LOOK (1979)],LOOK,1979,-,,[],0,,,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,Needs sorted array of requests and seek distance but not much else,1,0,,0,,0,,0,0,,0,0,http://courses.teresco.org/cs432_f02/lectures/17-files/17-files.html,,,,,,,,,,,1000,,,,,,,,,6,,,Operating Systems,FALSE
71,Disk Scheduling,2,Disk Scheduling,Disk Scheduling,572,,,1,1,$O(n \log n)$,Any distribution of inputs,Same behavior regardless of input,[- C-SCAN (1979)],C-SCAN,1979,-,,[],0,,,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,See SCAN,1,0,,0,,0,,0,0,,0,0,http://courses.teresco.org/cs432_f02/lectures/17-files/17-files.html,,,,,,,,,,,1000,,,,,,,,,6,,,Operating Systems,FALSE
71,Disk Scheduling,2,Disk Scheduling,Disk Scheduling,573,,,1,1,$O(n \log n)$,Any distribution of inputs,Same behavior regardless of input,[- C-LOOK (1979)],C-LOOK,1979,-,,[],0,,,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of requests,n,,,Word RAM,words,3,n: 3,$O(n)$,See LOOK,1,0,,0,,0,,0,0,,0,0,http://www.cs.nuim.ie/~dkelly/CS240-05/Disk%20Scheduling.htm,,,,,,,,,,,1000,,,,,,,,,6,,,Operating Systems,FALSE
72,The Vertex Cover Problem,1,The Vertex Cover Problem,The Vertex Cover Problem,574,,,1,1,$O(2^k n^{O(1)})$,,,[ Brute force (backtracking search) (1940)],Brute force (backtracking search),1940,,,[],0,,,,,1,0,8,"n: 8,
k: 8",$O(2^k n^{O(1)})$,944,"$n$: number of vertices
$m$: number of edges
$k$: size of vertex cover (worst case $O(n)$)",n,,,Word RAM,words,3,"k: 3,
n: 3",$O(k)$,Just need to keep track of current subset being checked,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
72,The Vertex Cover Problem,1,The Vertex Cover Problem,The Vertex Cover Problem,575,,,1,1,$O(kn + 2^k k^{2k + 2})$,,,[http://bud.cs.uky.edu/~goldsmit/papers/NondetWithinP.pdf Sam Buss  (1993)],Sam Buss ,1993,http://bud.cs.uky.edu/~goldsmit/papers/NondetWithinP.pdf,,"['Jonathan F. Buss', 'Judy Goldsmith']",2,['Nondeterminism Within P'],,,,1,0,8,"n: 8,
k: 8",$O(kn + 2^k k^{2k + 2})$,9122,"$n$: number of vertices
$m$: number of edges
$k$: size of vertex cover (worst case $O(n)$)",n,,,Word RAM,words,5,"k: 5,
n: 5",$O(k^2)$?,Auxiliary graph contains $O(k^2)$ edges unless the instance is rejected; rest of steps take $O(k^2)$ auxiliary space at most,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
72,The Vertex Cover Problem,1,The Vertex Cover Problem,The Vertex Cover Problem,576,,,1,1,$O(kn + 1.2852^k)$,,,[https://citeseerx.ist.psu.edu/pdf/4d4cb1dfd502ac279527a9a29cad6a3e2419f9eb Chen; I. Kanj; and W. Jia. (2001)],Chen; I. Kanj; and W. Jia.,2001,https://citeseerx.ist.psu.edu/pdf/4d4cb1dfd502ac279527a9a29cad6a3e2419f9eb,,"['Jianer Chen', 'Iyad A. Kanj', 'Weijia Jia']",3,['Vertex Cover: Further Observations and Further Improvements'],,,,0,0,8,"n: 8,
k: 8",$O(kn + 1.2852^k)$,986,"$n$: number of vertices
$m$: number of edges
$k$: size of vertex cover (worst case $O(n)$)",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),"First auxiliary graph contains $O(k^2)$ edges; algorithm subsequently branches to a depth of $O(k)$ (each fork being degree $O(1)$), with a new $O(k^2)$-sized graph at each depth. Interleaving shouldn't increase space usage asymptotically. (Could possibly be reduced to $O(k)$ by just keeping track of graph deltas?) (but also a different source claims exponential?)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,FALSE
72,The Vertex Cover Problem,1,The Vertex Cover Problem,The Vertex Cover Problem,577,,,1,1,"$O(\min(1.2759^k k^{1.5}, 1.2745^k k^4) + kn)$",,,[https://citeseerx.ist.psu.edu/pdf/a7963a4d2e9a12227812323a0bec54c36958aa42 Chandran and F. Grandoni (2004)],Chandran and F. Grandoni,2004,https://citeseerx.ist.psu.edu/pdf/a7963a4d2e9a12227812323a0bec54c36958aa42,,"['L. Sunil Chandran', 'Fabrizio Grandoni']",2,['Refined Memorisation for Vertex Cover'],,,,0,0,8,"n: 8,
k: 8","$O(\min(1.2759^k k^{1.5}, 1.2745^k k^4) + kn)$",986,"$n$: number of vertices
$m$: number of edges
$k$: size of vertex cover (worst case $O(n)$)",n,,,Word RAM,words,8,"k: 8,
n: 8","$O(\min(1.2759^k k^{1.5}, 1.2745^k k^4) + kn)$ but exponential",https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.136.4409&rep=rep1&type=pdf,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,FALSE
72,The Vertex Cover Problem,1,The Vertex Cover Problem,The Vertex Cover Problem,578,,,1,1,$O(1.2738^k+ kn)$,,,[https://www.cs.lafayette.edu/~gexia/research/mfcs06.pdf Chen; I. Kanj; and W. Jia. (2006)],Chen; I. Kanj; and W. Jia.,2006,https://www.cs.lafayette.edu/~gexia/research/mfcs06.pdf,,"['Jianer Chen', 'Iyad A. Kanj', 'Ge Xia']",3,['Improved Parameterized Upper Bounds for Vertex Cover'],,,,0,0,8,"n: 8,
k: 8",$O(1.2738^k+ kn)$,986,"$n$: number of vertices
$m$: number of edges
$k$: size of vertex cover (worst case $O(n)$)",n,,,Word RAM,words,7,n: 7,$O(\text{poly}(n))$,https://www.cs.lafayette.edu/~gexia/research/mfcs06.pdf,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,FALSE
72,The Vertex Cover Problem,1,,"The Vertex Cover Problem, Degrees Bounded By 3",579,,,1,1,$O(k 1.2192^k)$,,,[https://onlinelibrary.wiley.com/doi/abs/10.1002/1097-0037(200007)35:4%3C253::AID-NET3%3E3.0.CO;2-K J. Chen; L. Liu; and W. Jia. (2000)],J. Chen; L. Liu; and W. Jia.,2000,https://onlinelibrary.wiley.com/doi/abs/10.1002/1097-0037(200007)35:4%3C253::AID-NET3%3E3.0.CO;2-K,10.1002/1097-0037(200007)35:4%3C253::AID-NET3%3E3.0.CO;2-K,"['Jianer Chen', 'Lihua Liu', 'Weijia Jia']",3,['Improvement on vertex cover for low-degree graphs'],,,,1,0,8,"n: 8,
k: 8",$O(k 1.2192^k)$,986,"$n$: number of vertices
$m$: number of edges
$k$: size of vertex cover (worst case $O(n)$)",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),"First auxiliary graph contains $O(k^2)$ edges; algorithm subsequently branches to a depth of $O(k)$ (each fork being degree $O(1)$), with a new $O(k^2)$-sized graph at each depth. Interleaving shouldn't increase space usage asymptotically. (Could possibly be reduced to $O(k)$ by just keeping track of graph deltas?)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
72,The Vertex Cover Problem,1,The Vertex Cover Problem,The Vertex Cover Problem,580,,,1,1,$O(kn + 1.324718^k k^2)$,,,[https://citeseerx.ist.psu.edu/pdf/3c5a4c3ecf51bbb467c9c38220b95fc643499c98 Balasubramanian; Fellows (1996)],Balasubramanian; Fellows,1996,https://citeseerx.ist.psu.edu/pdf/3c5a4c3ecf51bbb467c9c38220b95fc643499c98,,"['R. Balasubramanian', 'Michael R. Fellows', 'Venkatesh Raman']",3,['An improved fixed-parameter algorithm for vertex cover'],,,,1,0,8,"n: 8,
k: 8",$O(kn + 1.324718^k k^2)$,986,"$n$: number of vertices
$m$: number of edges
$k$: size of vertex cover (worst case $O(n)$)",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),"First auxiliary graph contains $O(k^2)$ edges; algorithm subsequently branches to a depth of $O(k)$ (each fork being degree $O(1)$), with a new $O(k^2)$-sized graph at each depth. Interleaving shouldn't increase space usage asymptotically. (Could possibly be reduced to $O(k)$ by just keeping track of graph deltas?)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
72,The Vertex Cover Problem,1,The Vertex Cover Problem,The Vertex Cover Problem,581,,,1,1,$O(3^k n)$,,,[https://www.sciencedirect.com/science/article/pii/S0022000096900586 Papadimitriou and M Yannakakis (1996)],Papadimitriou and M Yannakakis,1996,https://www.sciencedirect.com/science/article/pii/S0022000096900586,,"['Christos H. Papadimitriou', 'Mihalis Yannakakis']",2,['On Limited Nondeterminism and the Complexity of the V-C Dimension'],,,,0,0,8,"n: 8,
k: 8",$O(3^k n)$,1000,"$n$: number of vertices
$m$: number of edges
$k$: size of vertex cover (worst case $O(n)$)",n,,,Word RAM,words,3,"k: 3,
n: 3",$O(k)$ auxiliary?,"keep track of maximal matching, and subsequent vertices in cover; note that max size is $O(k)$ else we can reject immediately",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,FALSE
72,The Vertex Cover Problem,1,The Vertex Cover Problem,The Vertex Cover Problem,582,,,1,1,$O(kn + 1.29175^k k^2)$,,,"[https://link.springer.com/chapter/10.1007/3-540-49116-3_53 Niedermeier, Rossmanith (1999)]","Niedermeier, Rossmanith",1999,https://link.springer.com/chapter/10.1007/3-540-49116-3_53,,"['Rolf Niedermeier', 'Peter Rossmanith']",2,['Upper Bounds for Vertex Cover Further Improved'],,,,1,0,8,"n: 8,
k: 8",$O(kn + 1.29175^k k^2)$,986,"$n$: number of vertices
$m$: number of edges
$k$: size of vertex cover (worst case $O(n)$)",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),"First auxiliary graph contains $O(k^2)$ edges; algorithm subsequently branches to a depth of $O(k)$ (each fork being degree $O(1)$), with a new $O(k^2)$-sized graph at each depth. Interleaving shouldn't increase space usage asymptotically. (Could possibly be reduced to $O(k)$ by just keeping track of graph deltas?)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,FALSE
72,The Vertex Cover Problem,1,The Vertex Cover Problem,The Vertex Cover Problem,583,,,1,1,$O(kn + 1.31951^k k^2)$,,,[https://citeseerx.ist.psu.edu/pdf/e7068e5c4d55bf8103affe7ccce18da191331bdf Downey (1998)],Downey,1998,https://citeseerx.ist.psu.edu/pdf/e7068e5c4d55bf8103affe7ccce18da191331bdf,,"['Rodney G. Downey', 'Michael R. Fellows', 'Ulrike Stege']",3,['Parameterized Complexity: A Framework for Systematically Confronting Computational Intractability'],,,,1,0,8,"n: 8,
k: 8",$O(kn + 1.31951^k k^2)$,986,"$n$: number of vertices
$m$: number of edges
$k$: size of vertex cover (worst case $O(n)$)",n,,,Word RAM,words,6,"k: 6,
n: 6",$O(k^3)$ auxiliary? (potentially $O(k^2)$??),"First auxiliary graph contains $O(k^2)$ edges; algorithm subsequently branches to a depth of $O(k)$ (each fork being degree $O(1)$), with a new $O(k^2)$-sized graph at each depth. Interleaving shouldn't increase space usage asymptotically. (Could possibly be reduced to $O(k)$ by just keeping track of graph deltas?)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
73,CFG Problems,1,CFG Recognition,CFG Recognition,584,,,1,1,$O(n^3 |G|)$,,,[https://core.ac.uk/download/pdf/158319955.pdf Cocke–Younger–Kasami algorithm (1968)],Cocke–Younger–Kasami algorithm,1968,https://core.ac.uk/download/pdf/158319955.pdf,,['Tadao Kasami'],1,['AN EFFICIENT RECOGNITION AND SYNTAX-ANALYSIS ALGORITHM FOR CONTEXT-FREE LANGUAGES'],,,,1,0,6,"n: 6,
|G|: 3",$O(n^3 |G|)$,30,"$n$: input string length
$|G|$: size of grammar",n,,,Double-tape TM,cells,5,n: 5,$O(n^2)$,https://core.ac.uk/download/pdf/158319955.pdf,0,1,,0,,0,,0,0,,0,0,,,,,G=100,,,,,,,100000000000,1,,1E+20,1,,1E+29,1,,3,,,Combinatorics,FALSE
73,CFG Problems,1,CFG Recognition,CFG Recognition,585,,,1,1,$O(n^{\omega} |G|)$,,,[https://linkinghub.elsevier.com/retrieve/pii/S0022000075800468 Valiant (1975)],Valiant,1975,https://linkinghub.elsevier.com/retrieve/pii/S0022000075800468,,['Leslie G. Valiant'],1,['General context-free recognition in less than cubic time'],,,,1,0,5.3728596,"n: 5.3728596,
|G|: 3",$O(n^{\omega} |G|)$,,"$n$: input string length
$|G|$: size of grammar
$\omega$: exponent for matrix multiplication",n,,,Word RAM and multitape TM,words/cells,5,n: 5,$O(n^2)$?,See matrix multiplication space complexity,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1380384265,72.44359601,0.8438020169,1.90546E+16,5248.074602,2.399605878,2.63027E+23,380189.3963,5.268200174,3,,,Combinatorics,FALSE
73,CFG Problems,2,CFG Parsing,CFG Parsing,586,,,1,1,$O(n^3)$,,,[https://web.archive.org/web/20040708052627/http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-55/lti/Courses/711/Class-notes/p94-earley.pdf Earley parser (1968)],Earley parser,1968,https://web.archive.org/web/20040708052627/http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-55/lti/Courses/711/Class-notes/p94-earley.pdf,,['Jay Earley'],1,['An Efficient Context-Free Parsing Algorithm'],,,,1,0,6,n: 6,$O(n^3)$,30,$n$: input string length,n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://web.archive.org/web/20040708052627/http://www-2.cs.cmu.edu/afs/cs.cmu.edu/project/cmt-55/lti/Courses/711/Class-notes/p94-earley.pdf,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,100,,1E+18,100,,1E+27,100,,3,,,Combinatorics,FALSE
73,CFG Problems,2,CFG Parsing,CFG Parsing,587,,,1,1,$O(n^3)$,,,[https://link.springer.com/chapter/10.1007%2F978-3-662-21545-6_18 GLR parser (1974)],GLR parser,1974,https://link.springer.com/chapter/10.1007%2F978-3-662-21545-6_18,10.1007%2F978-3-662-21545-6_18,['Bernard Lang'],1,['Deterministic Techniques for Efficient Non-Deterministic Parsers'],,,,0,0,6,n: 6,$O(n^3)$,30,$n$: input string length,n,,,Word RAM? (implemented on ALGOL),words,6,n: 6,$O(n^3)$,https://link.springer.com/chapter/10.1007%2F978-3-662-21545-6_18,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Combinatorics,FALSE
74,Finding Frequent Itemsets,2,Finding Frequent Itemsets,Finding Frequent Itemsets,588,,,1,1,$O(n^2)$,,,[http://www.vldb.org/conf/1994/P487.PDF A-Priori algorithm (1994)],A-Priori algorithm,1994,http://www.vldb.org/conf/1994/P487.PDF,,"['Rakesh Agrawal', 'Ramakrishnan Srikant']",2,['Fast Algorithms for Mining Association Rules'],,,,1,0,5,n: 5,$O(n^2)$,20,$n$: total number of transactions (size of database),n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://dl.acm.org/doi/pdf/10.1145/1014052.1014091,0,0,,0,,0,,0,0,,0,0,https://www-users.cse.umn.edu/~kumar001/dmbook/ch6.pdf,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
74,Finding Frequent Itemsets,1,Finding Frequent Itemsets,Finding Frequent Itemsets,589,,,1,1,$O(n^2)$,,,[https://dl.acm.org/doi/abs/10.1145/568271.223813 The Algorithm of Park; Chen; and Yu (PCY) (1995)],The Algorithm of Park; Chen; and Yu (PCY),1995,https://dl.acm.org/doi/abs/10.1145/568271.223813,10.1145/568271.223813,"['Jong Soo Park', 'Ming-Syan Chen', 'Philip S. Yu']",3,['An effective hash-based algorithm for mining association rules'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: total number of transactions (size of database),n,,,Word RAM,words,5,n: 5,$O(n^2)$,"Derived: modification of the Apriori algorithm, with same asymptotic complexities.",1,0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1007/3-540-44418-1_1.pdf,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,TRUE
74,Finding Frequent Itemsets,1,Finding Frequent Itemsets,Finding Frequent Itemsets,590,,,1,1,$O(n^2)$,,,[http://ilpubs.stanford.edu:8090/423/ The Multistage Algorithm (1999)],The Multistage Algorithm,1999,http://ilpubs.stanford.edu:8090/423/,,"['Min Fang', 'Narayanan Shivakumar', 'Hector Garcia-Molina', 'Rajeev Motwani', 'Jeffrey D. Ullman']",5,['Computing Iceberg Queries Efficiently'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: total number of transactions (size of database),n,,,Word RAM,words,5,n: 5,$O(n^2)$,"Derived: modification of the Apriori algorithm, with same asymptotic complexities.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,TRUE
74,Finding Frequent Itemsets,1,Finding Frequent Itemsets,Finding Frequent Itemsets,591,,,1,1,$O(n^2)$,,,[http://ilpubs.stanford.edu:8090/423/ The Multihash Algorithm (1999)],The Multihash Algorithm,1999,http://ilpubs.stanford.edu:8090/423/,,"['Min Fang', 'Narayanan Shivakumar', 'Hector Garcia-Molina', 'Rajeev Motwani', 'Jeffrey D. Ullman']",5,['Computing Iceberg Queries Efficiently'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: total number of transactions (size of database),n,,,Word RAM,words,5,n: 5,$O(n^2)$,"Derived: modification of the Apriori algorithm, with same asymptotic complexities.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,TRUE
75,Data Compression,1,,Lossy Compression,592,,,1,1,$O(n^2 \log^3 n)$,,,[https://doi.org/10.1109/TIT.2009.2016040 Gupta; Verdu (2009)],Gupta; Verdu,2009,https://doi.org/10.1109/TIT.2009.2016040,10.1109/TIT.2009.2016040,"['Ankit Gupta', 'Sergio Verdu']",2,['Nonlinear Sparse-Graph Codes for Lossy Compression'],,,,0,0,5.03,n: 5.03,$O(n^3 \log n)$?,-,$n$: input string length (bits),n,"Derived: same as average case complexity analysis in paper, but runtime per iteration would instead be O(kn) instead of O(k log^2 n)",1,Word RAM,bits,3,n: 3,$O(n)$,"Derived: Considering the codebook to be part of the input, this only requires storing a single codeword in memory, of size $O(n)$, along with some constants",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Image Processing,FALSE
75,Data Compression,2,,Lossy Compression,593,,,1,1,$O(n \log n)$,,,[https://doi.org/10.1109%2FT-C.1974.223784 Discrete Cosine Transform (1974)],Discrete Cosine Transform,1974,https://doi.org/10.1109%2FT-C.1974.223784,10.1109%2FT-C.1974.223784,"['N. Ahmed', 'T. Natarajan', 'K.R. Rao']",3,['Discrete Cosine Transform'],,,,1,1->3,4,n: 4,$O(n \log n)$,11,$n$: number of items in input series of data,n,Derived: Use FFT,1,Word RAM,words,3,n: 3,$O(n)$,Derived: store the DCT coefficient for each input term,1,0,,0,,0,,0,0,,0,0,,,,,,1000,Inf,1000000,Inf,1000000000,Inf,1000000000,Inf,Inf,1E+18,Inf,Inf,1E+27,Inf,Inf,1,,,Image Processing,FALSE
75,Data Compression,2,,Lossy Compression,594,Low Density Generator Matrix (LDGM) codes; for a Bernouli(1/2) source,,1,1,$O(n^2)$,,,[https://ieeexplore.ieee.org/document/1523592 Maneva and M. J. Wainwright (2005)],Maneva and M. J. Wainwright,2005,https://ieeexplore.ieee.org/document/1523592,,"['Martin J. Wainwright', 'Elitza Maneva']",2,['Lossy source encoding via message-passing and decimation over generalized codewords of LDGM codes'],,,,0,0,5,n: 5,$O(n^2)$,20,"$n$: length of input vector
$m$: length of compressed output vector",n,,,Word RAM,bits,5,n: 5,$O(n^2)$,"Derived: size of the factor graph representation of the generator matrix, or size of the generator matrix itself",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,1,,,Image Processing,FALSE
75,Data Compression,1,,Lossy Compression,595,Constraint Satisfaction Problem with Random Gates,,1,1,$O(n^2)$,,,[https://arxiv.org/abs/cond-mat/0504509  Ciliberti; Mézard (2005)], Ciliberti; Mézard,2005,https://arxiv.org/abs/cond-mat/0504509,,"['Stefano Ciliberti', 'Marc Mézard', 'Riccardo Zecchina']",3,['Lossy data compression with random gates'],,,,1,3->4,5,n: 5,$O(n^2)$,20,"$n$: length of input vector
$m$: length of compressed output vector",n,,,Word RAM,bits,5,n: 5,$O(n^2)$?,"Derived: size of the factor graph representation of the generator matrix, or size of the generator matrix itself",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,Inf,,1000000000000,Inf,,1E+18,Inf,,1,,,Image Processing,FALSE
75,Data Compression,1,,Lossy Compression,596,Brute Force,,1,1,$O(n 2^n)$,,,[ Brute force (1940)],Brute force,1940,,,[],0,,,,,1,0,8,n: 8,$O(n 2^n)$,,$n$: length of input data,n,,,Word RAM,words,8,n: 8,$O(n2^n)$?,Keep track of big codebook?,1,0,,0,,0,,0,0,,0,0,,,,,,Inf,,Inf,,Inf,,Inf,1,,Inf,1,,Inf,1,,1,,,Image Processing,FALSE
75,Data Compression,2,,Lossy Compression,597,Low Density Parity Check (LDPC),,1,1,$O(n 2^n)$,,,[https://doi.org/10.1109/TIT.2003.815805 Matsunaga; Yamamoto (2003)],Matsunaga; Yamamoto,2003,https://doi.org/10.1109/TIT.2003.815805,10.1109/TIT.2003.815805,"['Y. Matsunaga', 'H. Yamamoto']",2,['A coding theorem for lossy data compression by LDPC codes'],,,,0,0,8,n: 8,$O(n 2^n)$,,$n$: length of input data,n,,,Word RAM,words,8,n: 8,$\exp(n)$,https://doi.org/10.1109/TIT.2003.815805,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Image Processing,FALSE
75,Data Compression,1,,Lossy Compression,598,LDGM codes + multilevel quantization,,1,1,$O(kmn)$?,,,[https://ieeexplore.ieee.org/document/5474629/ Sun; M. Shao; J. Chen; K. Wong; and X. Wu (2010)],Sun; M. Shao; J. Chen; K. Wong; and X. Wu,2010,https://ieeexplore.ieee.org/document/5474629/,,"['Zhibin Sun', 'Mingkai Shao', 'Jun Chen', 'Kon Max Wong', 'Xiaolin Wu']",5,['Achieving the rate-distortion bound with low-density generator matrix codes'],,,,0,0,8,n: 8,$O(kmn)$?,,"$n$: length of input data
$m$: level parameter
$k$: rate parameter",n,,,Word RAM,words,3,"n: 3,
m: 3,
k: 3",$O(kmn)$?,Encoding scheme can be thought of as a factor graph with $O(k+mn) $nodes and $O(kmn)$ edges,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Image Processing,FALSE
75,Data Compression,1,,Lossy Compression,599,Low Density Parity Check (LDPC),,1,1,$O(n 2^n)$,,,[https://www.semanticscholar.org/paper/Lossy-Data-Compression-over-Zq-by-LDPC-Code-Miyake/652f0438118898b63126f7261ec4cd2002ff0e0b Miyake 2006 (2006)],Miyake 2006,2006,https://www.semanticscholar.org/paper/Lossy-Data-Compression-over-Zq-by-LDPC-Code-Miyake/652f0438118898b63126f7261ec4cd2002ff0e0b,,['Shigeki Miyake'],1,['Lossy Data Compression over Zq by LDPC Code'],,,,0,0,8,n: 8,$O(n 2^n)$,,$n$: length of input data,n,,,Word RAM,words,8,n: 8,$O(2^n)$,"Parity check matrix is size $\text{poly}(n)$, distortion dictionary is size $O(2^n)$",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Image Processing,FALSE
75,Data Compression,1,,Lossy Compression,600,LDGM + LDPC,,1,1,$O(n 2^n)$,,,[https://arxiv.org/abs/cs/0602046 Martinian and M. J. Wainwright (2006)],Martinian and M. J. Wainwright,2006,https://arxiv.org/abs/cs/0602046,,"['Emin Martinian', 'Martin J. Wainwright']",2,['Analysis of LDGM and compound codes for lossy compression and binning'],,,,0,0,8,n: 8,$O(n 2^n)$,,"$n$: length of input data
$m$: number of information bits
$k$: rate parameter (in LDPC)",n,,,Word RAM,words,3,"n: 3,
m: 3,
k: 3",$O(mn+mk)$?,"Consists of an LDGM portion ($O(n+m)$ nodes, $O(mn)$ edges) and an LDPC portion ($O(m+k)$ nodes, $O(mk)$ edges)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Image Processing,FALSE
75,Data Compression,1,,Lossy Compression,601,Gibbs sampler,,1,1,$O(n)$,,,[https://web.stanford.edu/~tsachy/pdf_files/Lossy%20Source%20Coding%20via%20Markov%20Chain%20Monte%20Carlo.pdf Jalali and T. Weissman (2008)],Jalali and T. Weissman,2008,https://web.stanford.edu/~tsachy/pdf_files/Lossy%20Source%20Coding%20via%20Markov%20Chain%20Monte%20Carlo.pdf,,"['Shirin Jalali', 'Tsachy Weissman']",2,['Near Optimal Lossy Source Coding and Compression-Based Denoising via Markov Chain Monte Carlo'],,,,1,4->6,3,n: 3,$O(n)$,10,$n$: length of input data,n,,,Word RAM,words,3,n: 3,$O(n)$?,"Derived: Auxiliary data structures are $H_k$ and $m_k$. $H_k$ is just a singular value and is constant space, but $m_k$ is a $O(n)$-size vector.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,Inf,,1000000,Inf,,1000000000,Inf,,1,,,Image Processing,FALSE
75,Data Compression,1,,Lossy Compression,602,Wyner-Ziv DUDE,,1,1,$O(n)$,,,[https://authors.library.caltech.edu/17983/1/Jalali2010p7459Ieee_T_Inform_Theory.pdf Jalali; A. Montanari; and T. Weissman (2010)],Jalali; A. Montanari; and T. Weissman,2010,https://authors.library.caltech.edu/17983/1/Jalali2010p7459Ieee_T_Inform_Theory.pdf,,"['Shirin Jalali', 'Sergio Verdú', 'Tsachy Weissman']",3,['A Universal Scheme for Wyner–Ziv Coding of Discrete Sources'],,,,0,0,3,n: 3,$O(n)$,10,$n$: length of input data,n,,,Word RAM,words,3,n: 3,$O(n)$?,Derived: Auxiliary data structures consist of a constant number of $O(n)$-sized vectors and function definitions,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,1,,,Image Processing,FALSE
75,Data Compression,2,,Lossy Compression,603,Polar codes,,1,1,$O(N \log N)$,,,[https://arxiv.org/abs/0903.0307 Korada and R. Urbanke; (2010)],Korada and R. Urbanke;,2010,https://arxiv.org/abs/0903.0307,,"['Satish B. Korada', 'Rudiger Urbanke']",2,['Polar Codes are Optimal for Lossy Source Coding'],,,,0,0,8,n: 8,$O(n 2^n)$,,"$n$: length of input data
$N$: code length/block length, typically $N=2^n$",n,https://arxiv.org/pdf/0903.0307.pdf,0,Word RAM,words,8,n: 8,$O(N)$,Derived: size of the polar codes that need to be stored,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,1,O(N log N) time w.r.t. codelength,,Image Processing,FALSE
76,Factorization of Polynomials Over Finite Fields,1,,Distinct-degree; Equal-degree,604,,,1,1,$O(n^4 + pn^2)$,,,[https://ieeexplore.ieee.org/document/6768643/ Berlekamp's algorithm (1967)],Berlekamp's algorithm,1967,https://ieeexplore.ieee.org/document/6768643/,10.1002/j.1538-7305.1967.tb03174.x,['E. R. Berlekamp'],1,['Factoring Polynomials Over Finite Fields'],,,,0,0,7,n: 7,$O(n^4 + pn^2)$,40,"$n$: degree of polynomial
$p$: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",$O(n)$,Computes the remainder of $g^{((p-1)/2)}-1 \pmod{f}$ (in order to find gcd of $g^{((p-1)/2)}-1$ and $f$),1,0,,1,Monte Carlo,0,,0,0,,0,0,https://codeforces.com/blog/entry/104318,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis,FALSE
76,Factorization of Polynomials Over Finite Fields,1,,,605,,,1,1,$O(p^{n/2 + O(\log n)})$,,,[- Schubert's algorithm/Kronecker's method (1940)],Schubert's algorithm/Kronecker's method,1940,-,,['FT Schubert'],1,['De Inventione Divisorum'],,,,1,0,6,n: 6,$O(p^{n/2 + O(\log n)})$,1000,"$n$: degree of polynomial
$p$: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",$O(n)$,,,,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Factorization_of_polynomials_over_finite_fields#Distinct-degree_factorization,,,,,,,,,,,1000000000,1,,1E+18,1,,1E+27,1,,3,,,Numerical Analysis,FALSE
76,Factorization of Polynomials Over Finite Fields,1,,Square-free,606,,,1,1,$O(n^3)$,,,[- Square-free factorization (1975)],Square-free factorization,1975,-,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,"$n$: degree of polynomial
$p$: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",$O(n)$,Computes and stores a constant number of polynomials of degree $O(n)$ per iteration,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Factorization_of_polynomials_over_finite_fields#Distinct-degree_factorization,,,,,,,,,,,1000000000,,,,,,,,,3,,,Numerical Analysis,FALSE
76,Factorization of Polynomials Over Finite Fields,1,,Distinct-degree,607,,,1,1,$O(n^3 + n \log n)$,,,[- Distinct-degree factorization (1944)],Distinct-degree factorization,1944,-,,[],0,,,,,0,0,6,n: 6,$O(n^3 + n \log n)$,30,"$n$: degree of polynomial
$p$: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",$O(n)$,"Computes and stores a constant number of polynomials of degree $O(n)$ per iteration. Note that computing $\gcd(f, x^{(q^i)}-x)$ can be cleverly done in $O(n)$ space.",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Factorization_of_polynomials_over_finite_fields#Distinct-degree_factorization,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis,FALSE
76,Factorization of Polynomials Over Finite Fields,1,,Equal-degree,608,,,1,1,$O(n^3 \log n)$,,,[https://www.ams.org/journals/mcom/1981-36-154/S0025-5718-1981-0606517-5/home.html Cantor–Zassenhaus algorithm (1981)],Cantor–Zassenhaus algorithm,1981,https://www.ams.org/journals/mcom/1981-36-154/S0025-5718-1981-0606517-5/home.html,,"['David G. Cantor', 'Hans Zassenhaus']",2,['A new algorithm for factoring polynomials over finite fields'],,,,0,0,6.01,n: 6.01,$O(n^3 \log n)$,31,"$n$: degree of polynomial
$p$: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",$O(n)$,"Keeps track of a set of factors, where sum of degrees of factors is $O(n)$ so the total number of terms to keep track of is $O(n)$. Also, computing $h^{((q^d-1)/2)}-1 \pmod{f}$ only requires $O(n)$ space",1,0,,1,Monte Carlo,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Numerical Analysis,FALSE
76,Factorization of Polynomials Over Finite Fields,1,,Equal-degree,609,,,1,1,$O(n^2)$,,,[https://www.sciencedirect.com/science/article/abs/pii/0020019090901954 Victor Shoup's algorithm (1990)],Victor Shoup's algorithm,1990,https://www.sciencedirect.com/science/article/abs/pii/0020019090901954,,['Victor Shoup'],1,['On the deterministic complexity of factoring polynomials over finite fields'],,,,1,3->4,5,n: 5,$O(n^2)$,20,"$n$: degree of polynomial
$p$: characteristic of finite field",n,,,Word RAM,words,3,"n: 3,
p: 1",$O(n)$,"Keeps track of a set of factors, where sum of degrees of factors is $O(n)$ so the total number of terms to keep track of is $O(n)$. Also, polynomials in the separating set can be computed in $O(n)$ space",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1000,0.1481536215,1000000000000,1000000,0.3182567386,1E+18,1000000000,0.5135612484,3,,,Numerical Analysis,FALSE
77,Cryptanalysis of Linear Feedback Shift Registers,1,,Cryptanalysis of Linear Feedback Shift Registers,610,,,1,1,$O(n^2)$,,,[https://ieeexplore.ieee.org/document/1054260 Berlekamp–Massey algorithm (1969)],Berlekamp–Massey algorithm,1969,https://ieeexplore.ieee.org/document/1054260,,['James L. Massey'],1,['Shift-register synthesis and BCH decoding'],2,1,https://www.semanticscholar.org/paper/Shift-register-synthesis-and-BCH-decoding-Massey/a0870e57fb5e59aae83f2a2a09b8df78257ef556,1,0,5,n: 5,$O(n^2)$,20,$n$: size of input stream,n,,,Word RAM,words,3,n: 3,$O(n)$?,Computes and stores constant number of polynomials of degree $O(n)$,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Cryptography,FALSE
78,Stable Matching Problem,1,Stable Marriage Problem,Stable Marriage Problem,611,,,1,1,$O(n^2)$,,,[http://www.eecs.harvard.edu/cs286r/courses/fall09/papers/galeshapley.pdf Gale–Shapley algorithm (1962)],Gale–Shapley algorithm,1962,http://www.eecs.harvard.edu/cs286r/courses/fall09/papers/galeshapley.pdf,,"['David Gale', 'Lloyd S. Shapley']",2,['College Admissions and the Stability of Marriage'],1,1,https://en.wikipedia.org/wiki/Gale–Shapley_algorithm,1,0,5,n: 5,$O(n^2)$,20,$n$: number of men and number of women,n,,,Word RAM,words,3,n: 3,$O(n)$,Only need to keep track of current (provisional) matchings,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Combinatorics,FALSE
78,Stable Matching Problem,1,,Stable Roommates Problem,612,,,1,1,$O(n^2)$,,,[http://www.dcs.gla.ac.uk/~pat/jchoco/roommates/papers/Comp_sdarticle.pdf Irving's Algorithm (1985)],Irving's Algorithm,1985,http://www.dcs.gla.ac.uk/~pat/jchoco/roommates/papers/Comp_sdarticle.pdf,,['Robert W. Irving'],1,['An Efficient Algorithm for the Stable Roommates Problem'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of pairs of roommates,n,,,Word RAM,words,5,n: 5,$O(n^2)$?,Manipulates the $O(n)$-many $O(n)$-size preference lists,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Combinatorics,FALSE
78,Stable Matching Problem,1,Stable Marriage Problem,Stable Marriage Problem,613,,,1,1,$O(n^2)$,,,[http://www.dcs.gla.ac.uk/~davidm/pubs/7981.pdf Manlove; Malley (2005)],Manlove; Malley,2005,http://www.dcs.gla.ac.uk/~davidm/pubs/7981.pdf,,"['David F. Manlove', 'Gregg O’Malley']",2,['Modelling and Solving the Stable Marriage Problem Using Constraint Programming'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of men and number of women,n,,,Word RAM,words,5,n: 5,$O(n^2)$?,"Constructs, preprocesses, and solves an $O(n^2)$-size CSP instance?",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Combinatorics,FALSE
78,Stable Matching Problem,1,Stable Marriage Problem,Stable Marriage Problem,614,,,1,1,$O(n^2)$,,,[http://www.dcs.gla.ac.uk/~pat/roommates/distribution/papers/SM2N.pdf Unsworth; C.; Prosser; P (2005)],Unsworth; C.; Prosser; P,2005,http://www.dcs.gla.ac.uk/~pat/roommates/distribution/papers/SM2N.pdf,,"['Chris Unsworth', 'Patrick Prosser']",2,['An n-ary Constraint for the Stable Marriage Problem'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of men and number of women,n,,,Word RAM,words,5,n: 5,$O(n^2)$?,"Constructs, preprocesses, and solves an $O(n^2)$-size CSP instance? (see original reference)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Combinatorics,FALSE
78,Stable Matching Problem,1,,Arc Consistency?,615,,,1,1,$O(n^3)$,,,[https://www.sciencedirect.com/science/article/abs/pii/000437029290020X Hentenryck et. al. (1992)],Hentenryck et. al.,1992,https://www.sciencedirect.com/science/article/abs/pii/000437029290020X,,"['Pascal Van Hentenryck', 'Yves Deville', 'Choh-Man Teng']",2,['A generic arc-consistency algorithm and its specializations'],,,,0,0,6,n: 6,$O(n^3)$,30,$n$: number of men and number of women,n,,,Word RAM,words,6,n: 6,$O(n^3)$?,https://www.sciencedirect.com/science/article/abs/pii/000437029290020X,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,4,,,Combinatorics,FALSE
78,Stable Matching Problem,1,Stable Marriage Problem,Stable Marriage Problem,616,,,1,1,$O(n^2)$,,,[https://link.springer.com/chapter/10.1007/3-540-45578-7_16 Gent; I.P.; Irving; R.W.; Manlove; D.F.; Prosser; P.; Smith; B.M. (2001)],Gent; I.P.; Irving; R.W.; Manlove; D.F.; Prosser; P.; Smith; B.M.,2001,https://link.springer.com/chapter/10.1007/3-540-45578-7_16,10.1007/3-540-45578-7_16,"['Ian P. Gent', 'Robert W. Irving', 'David F. Manlove', 'Patrick Prosser', 'Barbara M. Smith']",5,['A Constraint Programming Approach to the Stable Marriage Problem'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of men and number of women,n,,,Word RAM,words,5,n: 5,$O(n^2)$?,"Constructs, preprocesses, and solves an $O(n^2)$-size CSP instance?",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Combinatorics,FALSE
78,Stable Matching Problem,1,,Stable Roommates Problem,617,,,1,1,$O(n^3)$,,,[https://link.springer.com/chapter/10.1007%2F978-3-319-07046-9_2 Patrick Posser (2014)],Patrick Posser,2014,https://link.springer.com/chapter/10.1007%2F978-3-319-07046-9_2,10.1007%2F978-3-319-07046-9_2,['Patrick Prosser'],1,['Stable Roommates and Constraint Programming'],,,,0,0,6,n: 6,$O(n^3)$,30,$n$: number of pairs of roommates,n,,,Word RAM,words,3,n: 3,$O(n)$,https://link.springer.com/chapter/10.1007%2F978-3-319-07046-9_2,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,4,,,Combinatorics,FALSE
78,Stable Matching Problem,1,Stable Marriage Problem,Stable Marriage Problem,618,,,1,1,$O(n^2)$,,,[https://link.springer.com/content/pdf/10.1007/BF02136029.pdf S. S. TSENG and R. C. T. LEE (1984)],S. S. TSENG and R. C. T. LEE,1984,https://link.springer.com/content/pdf/10.1007/BF02136029.pdf,,"['S. S. Tseng', 'R. C. T. Lee']",2,['A PARALLEL ALGORITHM TO SOLVE THE STABLE MARRIAGE PROBLEM'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of men and number of women,n,,,Word RAM,words,3,n: 3,$O(n)$ per processor?,Only need to keep track of current (provisional) matchings,1,0,,0,,0,,0,1,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Combinatorics,FALSE
78,Stable Matching Problem,1,Stable Marriage Problem,Stable Marriage Problem,620,,,1,1,$O(n^{0.5})$,,,"[http://theory.stanford.edu/~megiddo/pdf/soda94.pdf Tomas Feder, Nimrod Megiddoy, Serge A Plotki (1994)]","Tomas Feder, Nimrod Megiddoy, Serge A Plotki",1994,http://theory.stanford.edu/~megiddo/pdf/soda94.pdf,,"['Tomás Feder', 'Nimrod Megiddoy', 'Serge A. Plotkin']",3,['A Sublinear Parallel Algorithm for Stable Matching'],,,,0,0,2.5,n: 2.5,$O(n^{0.5})$,6,$n$: number of men and number of women,n,,,Word RAM,words,2.5,n: 2.5,$O(n^{0.5})$ auxiliary per processor?,bounded by runtime,1,0,,0,,0,,0,1,$\text{poly}(n)$,0,0,,,,,,,,,,,,31.62,,,,,,,,,4,,,Combinatorics,FALSE
79,Longest Path Problem,1,Longest Path on Interval Graphs,Longest Path on Interval Graphs,621,,,1,1,$O(n^4)$,,,[https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf Ioannidou; Kyriaki; Mertzios; George B.; Nikolopoulos; Stavros D. (2011)],Ioannidou; Kyriaki; Mertzios; George B.; Nikolopoulos; Stavros D.,2011,https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf,,"['Kyriaki Ioannidou', 'George B. Mertzios', 'Stavros D. Nikolopoulos']",3,['The Longest Path Problem has a Polynomial Solution on Interval Graphs'],1,1,https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf,1,0,7,n: 7,$O(n^4)$,20,$n$: number of vertices,n,,,Word RAM,words,6,n: 6,$O(n^3)$,https://link.springer.com/content/pdf/10.1007/s00453-010-9411-3.pdf,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000000,1,,1E+24,1,,1E+36,1,,2,,,Combinatorics,FALSE
81,Constructing Suffix Trees,2,Constructing Suffix Trees,Constructing Suffix Trees,630,,,1,1,$O(n^2)$,Any distribution (runtime same regardless of input),Same general behavior regardless of input,[- Naive (1973)],Naive,1973,-,,[],0,,,,,1,0,5,n: 5,$O(n^2)$,20,$n$: length of string,n,,,Word RAM,words,3,n: 3,$O(n)$,"Needs to store the intermediate steps of constructing a suffix tree, which can reach size $O(n)$",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Combinatorics,FALSE
81,Constructing Suffix Trees,2,Constructing Suffix Trees,Constructing Suffix Trees,631,,,1,1,$O(n)$,Any distribution (runtime same regardless of input),Same general behavior regardless of input,[https://dl.acm.org/citation.cfm?id=1441766 Weiner's algorithm (1973)],Weiner's algorithm,1973,https://dl.acm.org/citation.cfm?id=1441766,,['Peter Weiner'],1,['Linear pattern matching algorithms'],,,,1,4->6,3,n: 3,$O(n)$,10,$n$: length of string,n,,,Word RAM,words,3,n: 3,$O(n)$,"Needs to store the intermediate steps of constructing a suffix tree, which can reach size $O(n)$",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1000,0.2328467394,1000000,1000000,0.519911083,1000000000,1000000000,0.8738174229,4,,,Combinatorics,FALSE
81,Constructing Suffix Trees,2,Constructing Suffix Trees,Constructing Suffix Trees,633,,,1,1,$O(n)$,Any distribution (runtime same regardless of input),Same general behavior regardless of input,[https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf Ukkonen (1995)],Ukkonen,1995,https://www.cs.helsinki.fi/u/ukkonen/SuffixT1withFigs.pdf,,['Esko Ukkonen'],1,['On–line construction of suffix trees'],,,,0,0,3,n: 3,$O(n)$,10,$n$: length of string,n,,,Word RAM,words,3,n: 3,$O(n)$,"Needs to store the intermediate steps of constructing a suffix tree, which can reach size $O(n)$",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Combinatorics,FALSE
81,Constructing Suffix Trees,2,Constructing Suffix Trees,Constructing Suffix Trees,634,,,1,1,$O(n^2)$,Any distribution (runtime same regardless of input),Same general behavior regardless of input,[https://link.springer.com/article/10.1007/BF01769703 Ukkonen and D. Wood (1993)],Ukkonen and D. Wood,1993,https://link.springer.com/article/10.1007/BF01769703,10.1007/BF01769703,"['Esko Ukkonen', 'Derick Wood']",2,['Approximate string matching with suffix automata'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: length of string,n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://link.springer.com/article/10.1007/BF01769703,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Combinatorics,FALSE
81,Constructing Suffix Trees,1,Constructing Suffix Trees,Constructing Suffix Trees,635,,,1,1,$O(\log^4 n)$,,,[https://www.sciencedirect.com/science/article/pii/S0022000097914963 Hariharan (1997)],Hariharan,1997,https://www.sciencedirect.com/science/article/pii/S0022000097914963,,['Ramesh Hariharan'],1,['Optimal Parallel Suffix Tree Construction'],,,,0,0,2.03,n: 2.03,$O(\log^4 n)$,4,$n$: length of string,n,,,CREW PRAM,words,3,n: 3,$O(n)$,https://www.sciencedirect.com/science/article/pii/S0022000097914963,0,1,,0,,0,,0,1,,0,0,,,,,,,,,,,,9860.7,,,,,,,,,4,,,Combinatorics,FALSE
81,Constructing Suffix Trees,1,Constructing Suffix Trees,Constructing Suffix Trees,636,,,1,1,$O(\log^2 n)$,,,[https://link.springer.com/content/pdf/10.1007/3-540-57811-0_3.pdf Süleyman Cenk Sahinalp ; Uzi Vishkin (1994)],Süleyman Cenk Sahinalp ; Uzi Vishkin,1994,https://link.springer.com/content/pdf/10.1007/3-540-57811-0_3.pdf,,"['Suleyman Cenk Sahinalp', 'Uzi Vishkin']",2,['On a parallel-algorithms method for string matching problems'],,,,1,0,2.01,n: 2.01,$O(\log^2 n)$,2,$n$: length of string,n,,,CRCW PRAM,words,4.01,n: 4.01,$O(n^{1+\epsilon})$ for any fixed $\epsilon>0$,https://link.springer.com/content/pdf/10.1007/3-540-57811-0_3.pdf,0,1,,0,,0,,0,1,,0,0,,,,,,,,,,,,99.3,10070.49345,,397.2674256,2517196064,,893.8517077,1.11875E+15,,4,,,Combinatorics,FALSE
81,Constructing Suffix Trees,1,Constructing Suffix Trees,Constructing Suffix Trees,637,,,1,1,$O(\log n)$,,,[https://users.cs.utah.edu/~pandey/courses/cs6968/spring23/papers/optsuffixtree.pdf Farach (1997)],Farach,1997,https://users.cs.utah.edu/~pandey/courses/cs6968/spring23/papers/optsuffixtree.pdf,,['Martin Farach-Colton'],2,['Optimal Suffix Tree Construction with Large Alphabets'],,,,0,0,2,n: 2,$O(\log n)$,1,$n$: length of string,n,,,CRCW PRAM,words,3,n: 3,$O(n)$,https://www.cs.rutgers.edu/~farach/pubs/PRAMSuffixICALP.pdf,0,1,,1,Las Vegas,0,,0,1,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Combinatorics,FALSE
81,Constructing Suffix Trees,1,Constructing Suffix Trees,Constructing Suffix Trees,638,,,1,1,$O(\log n)$,,,[https://www.researchgate.net/publication/228945502_On_parallel_transformations_of_suffix_arrays_into_suffix_trees Rytter (2004)],Rytter,2004,https://www.researchgate.net/publication/228945502_On_parallel_transformations_of_suffix_arrays_into_suffix_trees,,"['Costas Iliopoulos', 'Wojciech Rytter']",2,['On parallel transformations of suffix arrays into suffix trees'],,,,1,6->7,2,n: 2,$O(\log n)$,1,$n$: length of string,n,,,CREW PRAM,words,3,n: 3,$O(n)$,https://www.researchgate.net/publication/228945502_On_parallel_transformations_of_suffix_arrays_into_suffix_trees,0,1,,0,,0,,0,1,,0,0,,,,,,,,,,,,9.965,100351.2293,,19.93156857,50171665944,,29.89735285,3.34478E+16,,4,,,Combinatorics,FALSE
81,Constructing Suffix Trees,2,Constructing Suffix Trees,Constructing Suffix Trees,639,,,1,1,$O(n)$,Any distribution (runtime same regardless of input),Same general behavior regardless of input,[https://dl.acm.org/doi/10.1145/321941.321946 McCreight (1976)],McCreight,1976,https://dl.acm.org/doi/10.1145/321941.321946,,['Edward M. McCreight'],1,['A Space-Economical Suffix Tree Construction Algorithm'],,,,0,0,3,n: 3,$O(n)$,10,$n$: length of string,n,,,Word RAM,words,3,n: 3,$O(n)$,"Needs to store the intermediate steps of constructing a suffix tree, which can reach size $O(n)$",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Combinatorics,FALSE
83,Entity Resolution,1,Entity Resolution,Entity Resolution,645,,,1,1,$O(n^3 k)$,,,[https://courses.cs.washington.edu/courses/cse590q/04au/papers/Felligi69.pdf Fellegi & Sunter Model (1969)],Fellegi & Sunter Model,1969,https://courses.cs.washington.edu/courses/cse590q/04au/papers/Felligi69.pdf,,"['Ivan P. Fellegi', 'Alan B. Sunter']",2,['A THEORY FOR RECORD LINKAGE'],,,,1,0,6.5,"n: 6.5,
k: 3",$O(n^3 k)$,36.5,"$n$: number of records
$k$: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,2.5,"n: 2.5,
k: 3",$O(k)$,"Derived: A constant number of values per feature; Sums range over $n$ elements, but can be computed in the same memory; see Method 1",1,0,,0,,0,,0,0,,0,0,,,,,"r:c
1:1",,,,,,,62500000000,1,,6.25E+22,1,,6.25E+34,1,,2,,,Combinatorics,FALSE
83,Entity Resolution,1,Entity Resolution,Entity Resolution,646,"Bipartite method
to compute pairwise ER",,1,1,$O(n^3 k)$,,,[https://doi.org/10.14778/1687627.1687661 Gupta & Sarawagi CRF (2009)],Gupta & Sarawagi CRF,2009,https://doi.org/10.14778/1687627.1687661,10.14778/1687627.1687661,"['Rahul Gupta', 'Sunita Sarawagi']",2,['Answering table augmentation queries from unstructured lists on the web'],,,,0,0,6.5,"n: 6.5,
k: 3",$O(n^3 k)$,36.5,"$n$: number of records
$k$: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,4.5,"n: 4.5,
k: 3",$O(nk)$?,"Derived: Creates an intermediate ""consolidated"" table that it manipulates/reorders to get final output",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,FALSE
83,Entity Resolution,0.001,Entity Resolution,Entity Resolution,647,,,1,0,$O(n^2 \log n)$,,,[ Chen Ensembles of classifiers (1989)],Chen Ensembles of classifiers,1989,,,[],0,,,,,1,2->3,5.01,n: 5.01,$O(n^2 \log n)$,21,"$n$: number of records
$k$: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,2241446.071,27883.78485,0.6682747866,4732892142331,13205456224,2.206547447,7.22434E+18,8.65131E+15,5.264033871,2,,,Combinatorics,FALSE
83,Entity Resolution,2,Entity Resolution,Entity Resolution,648,,,1,1,$O(n^3 k)$,,,[https://courses.cs.washington.edu/courses/cse590q/04au/papers/WinklerEM.pdf EM Based Winkler (2000)],EM Based Winkler,2000,https://courses.cs.washington.edu/courses/cse590q/04au/papers/WinklerEM.pdf,,['William E. Winkler'],1,['Using the EM Algorithm for Weight Computation in the Fellegi-Sunter Model of Record Linkage'],,,,0,0,6.5,"n: 6.5,
k: 3",$O(n^3 k)$,36.5,"$n$: number of records
$k$: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,2.5,"n: 2.5,
k: 3",$O(k)$,Derived: One value per feature in the discretized vector,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,FALSE
83,Entity Resolution,2,Entity Resolution,Entity Resolution,649,,,1,1,$O(n^2 k)$,,,[https://arxiv.org/abs/1207.4180 Ravikumar & Cohen Generative Models (2004)],Ravikumar & Cohen Generative Models,2004,https://arxiv.org/abs/1207.4180,,"['Pradeep Ravikumar', 'William Cohen']",2,['A Hierarchical Graphical Model for Record Linkage'],,,,0,0,5.5,"n: 5.5,
k: 3",$O(n^2 k)$,26.5,"$n$: number of records
$k$: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,2.5,"n: 2.5,
k: 3",$O(k)$,Derived: One value per feature in the discretized vector,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,FALSE
83,Entity Resolution,1,Entity Resolution,Entity Resolution,650,Pairwise ER Active Learning,,1,0,$O(n^2 \log n c \log c)$,,,[https://dl.acm.org/doi/10.1145/2339530.2339707 Bellare Active Learning (2012)],Bellare Active Learning,2012,https://dl.acm.org/doi/10.1145/2339530.2339707,10.1145/2339530.2339707,"['Kedar Bellare', 'Suresh Iyengar', 'Aditya G. Parameswaran', 'Vibhor Rastogi']",4,['Active sampling for entity matching'],,,,0,0,5.01,n: 5.01,$O(n^2 \log n c \log c)$,21,"$n$: number of records
$k$: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,FALSE
83,Entity Resolution,2,Entity Resolution,Entity Resolution,651,Delphi algorithm,,1,1,$O(n^2 k)$,,,[https://doi.org/10.1016/B978-155860869-6/50058-5 Ananthakrishna (2002)],Ananthakrishna,2002,https://doi.org/10.1016/B978-155860869-6/50058-5,10.1016/B978-155860869-6/50058-5,"['Rohit Ananthakrishna', 'Surajit Chaudhuri', 'Venkatesh Ganti']",3,['Eliminating Fuzzy Duplicates in Data Warehouses'],,,,0,0,5.5,"n: 5.5,
k: 3",$O(n^2 k)$,26.5,"$n$: number of records
$k$: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,3,n: 3,$O(n)$,"Derived: the token table, the children table, and the tuples in $G$ are stored in main memory, each are of size $O(n)$",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,FALSE
83,Entity Resolution,1,Entity Resolution,Entity Resolution,652,,,1,1,$O(n^2 k)$,,,[https://www.sciencedirect.com/science/article/abs/pii/016794739390116B BOYS algorithm (1993)],BOYS algorithm,1993,https://www.sciencedirect.com/science/article/abs/pii/016794739390116B,,['Yasar Yesilcay'],1,['The BOYS algorithm for determining optimum matching rules'],,,,0,0,5.5,"n: 5.5,
k: 3",$O(n^2 k)$,26.5,"$n$: number of records
$k$: number of features (can be up to $O(\sqrt{n})$)",n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: As written stores counts/probabailities for all pairs of entries.,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Combinatorics,FALSE
84,Longest Palindromic Substring,2,,Longest Palindromic Substring,653,,,1,1,$O(n^3)$,Any distribution of values?,(behavior same across all inputs),[- Naive (1940)],Naive,1940,-,,[],0,,1,1,,1,0,6,n: 6,$O(n^3)$,30,$n$: length of given string,n,,,Word RAM,words,1,n: 1,$O(1)$,https://www.geeksforgeeks.org/longest-palindrome-substring-set-1/,0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,1,,1E+18,1,,1E+27,1,,3,,,Combinatorics,FALSE
84,Longest Palindromic Substring,1,,Longest Palindromic Substring,654,,,1,1,$O(n^2)$,,,[- Dynamic Programming (1953)],Dynamic Programming,1953,-,,[],0,,,,,1,3->4,5,n: 5,$O(n^2)$,20,$n$: length of given string,n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://www.geeksforgeeks.org/longest-palindrome-substring-set-1/,0,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1000,0.7012542799,1000000000000,1000000,1.894266125,1E+18,1000000000,3.923882632,3,,,Combinatorics,FALSE
84,Longest Palindromic Substring,2,,Longest Palindromic Substring,655,,,1,1,$O(n)$,Any distribution of values?,need to read entire input,[https://doi.org/10.1145%2F321892.321896 Manacher (1975)],Manacher,1975,https://doi.org/10.1145%2F321892.321896,10.1145%2F321892.321896,['Glenn Manacher'],1,"[""A New Linear-Time ``On-Line'' Algorithm for Finding the Smallest Initial Palindrome of a String""]",2,1,https://dl.acm.org/doi/10.1145/321892.321896,1,4->6,3,n: 3,$O(n)$,10,$n$: length of given string,n,,,Word RAM,words,3,n: 3,$O(n)$,"At the very least it stores the radii for each center, requiring $O(n)$ space. Space usage is bounded from above by runtime, so at most $O(n)$ space is used.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1000000,0.483981789,1000,1000000000000,1.20220195,1000000000,1E+18,2.268027589,3,,,Combinatorics,FALSE
84,Longest Palindromic Substring,1,,Longest Palindromic Substring,656,,,1,1,$O(n)$,Any distribution of values?,need to read entire input,[https://doi.org/10.1007%2FBF01182773 Jeuring (1994)],Jeuring,1994,https://doi.org/10.1007%2FBF01182773,10.1007%2FBF01182773,['Johan Jeuring'],1,"['The derivation of on-line algorithms, with an application to finding palindromes']",,,,0,0,3,n: 3,$O(n)$,10,$n$: length of given string,n,,,Word RAM,words,3,n: 3,$O(n)$?,Stores (and uses) previously computed palindrome information; unclear if $O(n)$ is best bound possible,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,3,,,Combinatorics,FALSE
84,Longest Palindromic Substring,2,,Longest Palindromic Substring,657,,,1,1,$O(n)$,Any distribution of values?,need to read entire input,[https://www.cambridge.org/core/books/algorithms-on-strings-trees-and-sequences/F0B095049C7E6EF5356F0A26686C20D3 Gusfield  (1997)],Gusfield ,1997,https://www.cambridge.org/core/books/algorithms-on-strings-trees-and-sequences/F0B095049C7E6EF5356F0A26686C20D3,,['Dan Gusfield'],1,"['Algorithms on Strings, Trees, and Sequences']",,,,0,0,3,n: 3,$O(n)$,10,$n$: length of given string,n,,,Word RAM,words,3,n: 3,$O(n)$,"At the very least it pre-processes and stores the string and the reverse of the string, requiring $O(n)$ space. Space usage is bounded from above by runtime, so at most $O(n)$ space is used.",1,0,,0,,0,,0,0,,0,0,https://d1wqtxts1xzle7.cloudfront.net/31053376/Algorithms_on_String_Trees_and_Sequences-with-cover-page-v2.pdf?Expires=1661234618&Signature=F2kwJp-yun59cg~XkWJkmRPpTYA~w8ZV8-T7prnT1vRBskR9HP5--HSAW3yRCkMvsogo8r6dTuq94Um2iFLJueNP-wf-EwQwsnTfaNWN8~IPjQAStkg0o3~9dr~gbsRzgddypdVJFp2qnFOzCaL3RgLw1mVEt~z6l9NwCSAK~mKZn6gZm3pP2-oCtuvQeUkRQKEWMrjbmZJvnXGoTSeKl4wMvvO5VOB17WLvU2A~G3XuiV05wJJwK8cQ9wqGZdorSYXieKLElOTfoYCDEjugeJuQXa2R-VhZtk8WpBPLmIv-PKUqQpxNG2usEwy0f4rcZnpsIBfEAJV9UBv1QwxlPQ__&Key-Pair-Id=APKAJLOHF5GGSLRBV4ZA,,,,,,,,,,,1000,,,,,,,,,3,,,Combinatorics,FALSE
53,Register Allocation,2,,Global Register Allocation,658,,,1,1,$O(n^2)$,,,[https://dl.acm.org/doi/10.1145/236114.236117 Demand-Driven Register Allocation (1996)],Demand-Driven Register Allocation,1996,https://dl.acm.org/doi/10.1145/236114.236117,10.1145/236114.236117,"['Todd A. Proebsting', 'Charles N. Fischer']",2,['Demand-driven register allocation'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of instructions in procedure,n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Requires storing a so-called $\Delta$-table of size $n \times n$ to keep track of $\Delta$-estimates,1,0,,0,,0,,1,0,,0,0,,,,,,,,,,,,1000000,1,,,,,,,,4,,,Combinatorics,FALSE
85,AST to Code Translation,2,,Arithmetic Expression Binary Tree,659,,,1,1,$O(n)$,,,[https://dl.acm.org/doi/10.1145/321607.321620 Sethi–Ullman Algorithm (1970)],Sethi–Ullman Algorithm,1970,https://dl.acm.org/doi/10.1145/321607.321620,10.1145/321607.321620,"['Ravi Sethi', 'J. D. Ullman']",2,['The Generation of Optimal Code for Arithmetic Expressions'],0.5,1,https://dl.acm.org/doi/10.1145/321607.321620,1,0,3,n: 3,$O(n)$,10,$n$: number of nodes in the tree,n,,,Word RAM,words,1,n: 1,$O(1)$,"Derived: Only uses in-situ updates to the input tree, no auxiliary data structures",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Combinatorics,FALSE
86,Graph Isomorphism Problem,0,"Graph Isomorphism, General Graphs","Graph Isomorphism, General Graphs",660,Construct canonical forms of graphs and compare,,1,1,$\exp(n^{1/2 + o(1)})$,,,[https://dl.acm.org/doi/10.1145/800061.808746 Babai and Luks (1983)],Babai and Luks,1983,https://dl.acm.org/doi/10.1145/800061.808746,10.1145/800061.808746,"['Laszlo Babai', 'Eugene M. Luks']",2,['Canonical labeling of graphs'],,,,0,0,8,n: 8,$\exp(n^{1/2 + o(1)})$,,$n$: number of vertices,n,,,Word RAM,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
86,Graph Isomorphism Problem,1,,"Graph Isomorphism, Bounded Number of Vertices of Each Color",661,,,1,1,$o(\exp(2n^{1/2}\log^2 n))$,,,[https://epubs.siam.org/doi/10.1137/0209018 Babai (1980)],Babai,1980,https://epubs.siam.org/doi/10.1137/0209018,10.1137/0209018,['Laszlo Babai'],1,['On the Complexity of Canonical Labeling of Strongly Regular Graphs'],,,,1,0,8,n: 8,$o(\exp(2n^{1/2}\log^2 n))$,,$n$: number of vertices,n,,,Word RAM,words,5,n: 5,$O(n^2)$,https://epubs.siam.org/doi/10.1137/0209018 (section 2.5),0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
86,Graph Isomorphism Problem,0,,Isomorphism of strongly regular graphs,662,,,1,1,$n^{O(n^{1/3} \log n)}$,,,[https://www.cs.yale.edu/homes/spielman/PAPERS/srg.pdf Spielman (1996)],Spielman,1996,https://www.cs.yale.edu/homes/spielman/PAPERS/srg.pdf,,['Daniel A. Spielman'],1,['Faster Isomorphism Testing of Strongly Regular Graphs'],,,,0,0,8,n: 8,$n^{O(n^{1/3} \log n)}$,,$n$: number of vertices,n,,,Word RAM,words,#VALUE!,,check,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
86,Graph Isomorphism Problem,1,"Graph Isomorphism, General Graphs",,663,,,1,1,$O((m_1 + m_2)n^3 + m_2 n^2 L)$; possibly $O(\exp(O(n\log n))))$?,,,[http://users.cecs.anu.edu.au/~bdm/papers/pgi.pdf McKay (1981)],McKay,1981,http://users.cecs.anu.edu.au/~bdm/papers/pgi.pdf,,['Brendan D. McKay'],1,['Practical Graph Isomorphism'],,,,0,0,8,n: 8,$O((m_1 + m_2)n^3 + m_2 n^2 L)$; possibly $O(\exp(O(n\log n))))$?,,"$n$: number of vertices
$m_1$: number of terminal nodes (in part of search tree that was examined) equivalent to earliest terminal node; $m_1\leq n$
$m_2$: number of nodes (in part of search tree that was examined) not equivalent to earliest terminal node and which have no descendants
$L$: storage limit parameter",n,,,Word RAM,words,6,n: 6,$2mn+10n+m+(m+4)K+2mL$,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
86,Graph Isomorphism Problem,1,"Graph Isomorphism, General Graphs",,664,,,1,1,$O(n\cdot n!)$,,,[https://dl.acm.org/doi/10.1145/321958.321963 Schmidt & Druffel (1976)],Schmidt & Druffel,1976,https://dl.acm.org/doi/10.1145/321958.321963,10.1145/321958.321963,"['Douglas C. Schmidt', 'Larry E. Druffel']",2,['A Fast Backtracking Algorithm to Test Directed Graphs for Isomorphism Using Distance Matrices'],,,,1,0,8,n: 8,$O(n\cdot n!)$,,$n$: number of vertices,n,,,Word RAM,words,5,n: 5,$O(n^2)$,derived in sheet,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
86,Graph Isomorphism Problem,0.001,,Subgraph Isomorphism,665,,,1,1,"Asymptotics not given, actual times. Check",,,[https://dl.acm.org/doi/10.1145/321921.321925 Ullman (1976)],Ullman,1976,https://dl.acm.org/doi/10.1145/321921.321925,10.1145/321921.321925,['J. R. Ullmann'],1,['An Algorithm for Subgraph Isomorphism'],,,,1,0,#VALUE!,,,,"$n$: max number of vertices between the two graphs
$m$: min number of vertices between the two graphs",n,,,Word RAM,words,3,"n: 3,
m: 3",$O(mn)$?,"Stores a constant number of $n\times m$ matrices, along with a constant number of vectors of length $O(m+n)$",1,0,,0,,0,,0,1,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
86,Graph Isomorphism Problem,0.001,"Graph Isomorphism, General Graphs",,666,,,1,1,$2^{O(\log n)^3}$,,,"[http://people.cs.uchicago.edu/~laci/update.html, http://people.cs.uchicago.edu/~laci/17groups/version2.1.pdf Babai (2017)]",Babai,2017,"http://people.cs.uchicago.edu/~laci/update.html, http://people.cs.uchicago.edu/~laci/17groups/version2.1.pdf",,['Laszlo Babai'],1,['Graph Isomorphism in Quasipolynomial Time'],,,,0,0,7.5,n: 7.5,$2^{O(\log n)^3}$,,"$n$: max number of vertices between the two graphs
$m$: min number of vertices between the two graphs",n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
86,Graph Isomorphism Problem,2,,Circulant graphs,667,,,1,1,$O(n^2)$,,,[https://londmathsoc.onlinelibrary.wiley.com/doi/abs/10.1112/S0024611503014412 Muzychuk (2004)],Muzychuk,2004,https://londmathsoc.onlinelibrary.wiley.com/doi/abs/10.1112/S0024611503014412,10.1112/S0024611503014412,['M. Muzychuk'],1,['A solution of the isomorphism problem for circulant graphs'],,,,0,0,5,n: 5,$O(n^2)$,,$n$: number of vertices,n,,,Word RAM,words,5,n: 5,$O(n^2)$,derived in notes,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,Inf,,,Inf,,,Inf,1,,,Combinatorics,TRUE
86,Graph Isomorphism Problem,0,,Partial k-trees,668,,,1,1,$O(n^{k+4.5})$,,,[https://www.sciencedirect.com/science/article/pii/0196677490900135 Bodlaender (1990)],Bodlaender,1990,https://www.sciencedirect.com/science/article/pii/0196677490900135,,['Hans L. Bodlaender'],1,['Polynomial algorithms for graph isomorphism and chromatic index on partial k-trees'],,,,0,0,7,n: 7,$O(n^{k+4.5})$,,"$n$: number of vertices 
$k$: graphs which are partial $k$-trees",n,,,Word RAM,words,#VALUE!,,check,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
86,Graph Isomorphism Problem,0,,Hypergraphs isomorphism,669,,,1,1,$\exp(O(k^2 \sqrt{n}))$,,,[https://oa.mg/work/10.1109/focs.2008.80 Babai & Codenotti (2008)],Babai & Codenotti,2008,https://oa.mg/work/10.1109/focs.2008.80,10.1109/focs.2008.80,"['Laszlo Babai', 'Paolo Codenotti']",2,['Isomorhism of Hypergraphs of Low Rank in Moderately Exponential Time'],,,,0,0,8,n: 8,$\exp(O(k^2 \sqrt{n}))$,,"$n$: number of vertices
$k$: rank of hypergraph",n,,,Word RAM,words,#VALUE!,,check,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
87,Graph Realization Problems,2,,Digraph Realization Problem,670,Constructs graph,,1,1,$O(n)$,,,[https://linkinghub.elsevier.com/retrieve/pii/0012365X7390037X Kleitman–Wang Algorithm (1973)],Kleitman–Wang Algorithm,1973,https://linkinghub.elsevier.com/retrieve/pii/0012365X7390037X,,"['Daniel J. Kleitman', 'DeLiang Wang']",2,['Algorithms for constructing graphs and digraphs with given valences and factors'],1,1,http://compalg.inf.elte.hu/~tony/Oktatas/TDK/FINAL/Chap%202.PDF,1,0,3,n: 3,$O(n)$,,$n$: number of degree pairs,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: Space complexity bounded by time complexity; keep track of a constant number of sets of size $O(n)$,1,0,,0,,0,,0,0,,0,0,,,,,,1000,,1000000,,1000000000,,250000,1,,250000000000,1,,2.5E+17,1,,4,,,Combinatorics,FALSE
87,Graph Realization Problems,2,,Digraph Realization Problem,671,"Makes use of (0,1) matrix properties, checks a property of the input values through the lens of an adjacency matrix",,1,1,$O(n)$,,,[https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/properties-of-a-class-of-01matrices-covering-a-given-matrix/9A3857D219511017536142BD7F132C91 Fulkerson–Chen–Anstee (1982)],Fulkerson–Chen–Anstee,1982,https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/properties-of-a-class-of-01matrices-covering-a-given-matrix/9A3857D219511017536142BD7F132C91,,['Richard P. Anstee'],1,"['Properties of a Class of (0,1)-Matrices Covering a given Matrix']",,,,0,0,3,n: 3,$O(n)$,,$n$: number of degree pairs,n,,,Word RAM,words,1,n: 1,$O(1)$,"Derived: Checking an inequality that involves 3 summations, of max value $O(n^2)$ each (assuming max degree $\leq n$) which is $O(1)$ words in our Word RAM. We check this inequality for each $k = 1, \ldots, n$, but you can store the summations dynamically, so you only need to run $O(1)$ operations per iteration",1,0,,0,,0,,0,0,,0,0,https://dl.acm.org/doi/pdf/10.1145/2783258.2783410?casa_token=u46OpjQb5b4AAAAA:7jdo-IEc4gQRd648rIJNa5WhQno8vQGGaHkDzTcu6FJ8K_BIraVU3kQ8qqqjUkO6zVLW71I7iI_VlA,,,,,1,1.15443469,1,3.641588834,1,9,,,,,,,,,,4,,,Combinatorics,FALSE
87,Graph Realization Problems,1,,DAG Realization Problem,672,,,1,1,$O(\exp(n))$,,,[https://arxiv.org/abs/1203.3636 Berger & Müller-Hannemann (2011)],Berger & Müller-Hannemann,2011,https://arxiv.org/abs/1203.3636,,"['Annabell Berger', 'Matthias Müller-Hannemann']",2,['How to Attack the NP-complete Dag Realization Problem in Practice'],,,,0,0,8,n: 8,$O(\exp(n))$,,$n$: number of degree pairs,n,,,Word RAM,words,#VALUE!,,?,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Combinatorics,FALSE
88,Duplicate Elimination,2,,Duplicate Elimination,673,,,1,1,$O(n \log n)$,,,[ Sorting based [Merge Sort] + sequential pass (1964)],Sorting based [Merge Sort] + sequential pass,1964,,,[],0,,,,,1,0,4,n: 4,$O(n \log n)$,11,$n$: number of records,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: linear space for mergesort,1,0,,0,,0,,0,0,,0,0,https://dl.acm.org/doi/abs/10.1145/319983.319987,,,,,1000,,1000000,,1000000000,,9965,1,,19931568.57,1,,29897352854,1,,5,"sorts, then does a sequential pass to eliminate duplicates",,Databases,FALSE
88,Duplicate Elimination,1,,Duplicate Elimination,674,,,1,1,$O(n \log n)$,,,[https://dl.acm.org/doi/abs/10.1145/319983.319987 Sorting based [Merge Sort] + real-time elimination (1983)],Sorting based [Merge Sort] + real-time elimination,1983,https://dl.acm.org/doi/abs/10.1145/319983.319987,,"['Dina Bitton', 'David J. DeWitt']",2,['Duplicate record elimination in large data files'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of records,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: linear space for mergesort,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,5,eliminates duplicates while sorting,,Databases,FALSE
88,Duplicate Elimination,2,,Duplicate Elimination,675,,,1,1,$O(n \log n)$,,,[ BST Algorithm (1999)],BST Algorithm,1999,,,[],0,,,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of records,n,,,Word RAM,words,2,n: 2,$O(\log n)$,Derived: Space required for the recursion stack space,1,0,,0,,0,,0,0,,0,0,,,,,,9.965784285,0.1407366271,19.93156857,0.3623817424,29.89735285,0.6405214824,9965,,,,,,,,,5,,,Databases,FALSE
88,Duplicate Elimination,2,,Duplicate Elimination,676,Selection sort using priority queue?,,1,1,$O(n^2)$,,,[ Priority Queue Algorithm (1976)],Priority Queue Algorithm,1976,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of records,n,,,Word RAM,words,3,n: 3,$O(n)$,Derived: Auxiliary space needed for the priority queue,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,5,,,Databases,FALSE
88,Duplicate Elimination,2,,Duplicate Elimination,677,,,1,1,$O(n \log n)$,,,[https://link.springer.com/article/10.1023/A:1009761603038 Sorted Neighborhood Algorithm (SNA) (1998)],Sorted Neighborhood Algorithm (SNA),1998,https://link.springer.com/article/10.1023/A:1009761603038,10.1023/A:1009761603038,"['Mauricio A. Hern√°ndez', 'Salvatore J. Stolfo']",2,['Real-world Data is Dirty: Data Cleansing and The Merge/Purge Problem'],,,,0,0,5,n: 5,$O(n \log n)$,11,$n$: number of records,n,https://doi.org/10.1145/1255175.1255213,0,Word RAM,words,3,n: 3,$O(n)$,"Derived: store a key for each entry in the ""Create Key"" phase",1,0,,0,,0,,0,0,,0,0,https://ieeexplore.ieee.org/document/5381140,,,,,,,,,,,9965,,,,,,,,,5,,,Databases,FALSE
88,Duplicate Elimination,2,,Duplicate Elimination,678,,,1,1,$O(n \log n)$,,,[https://core.ac.uk/download/pdf/72783552.pdf Duplicate Elimination Sorted Neighborhood Method (DE-SNM) (2002)],Duplicate Elimination Sorted Neighborhood Method (DE-SNM),2002,https://core.ac.uk/download/pdf/72783552.pdf,,[Ajumobi Okwuchukwu. Udechukwu],1,['Domain-independent de-duplication in data warehouse cleaning.'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of records,n,,,Word RAM,words,3,n: 3,$O(n)$,"Derived: store a key for each entry in the ""Create Key"" phase",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,5,"Provides abstraction, details, and implimentation of the algorithm in Hernandez 96/98.",,Databases,FALSE
88,Duplicate Elimination,2,,Duplicate Elimination,679,SVM string similarity,,1,1,$O(n^3)$,,,[https://dl.acm.org/doi/10.1145/956750.956759 Adaptive Duplicate Detection Algorithm (ADD) (2003)],Adaptive Duplicate Detection Algorithm (ADD),2003,https://dl.acm.org/doi/10.1145/956750.956759,10.1145/956750.956759,"['Mikhail Bilenko', 'Raymond J. Mooney']",2,['Adaptive duplicate detection using learnable string similarity measures'],,,,1,0,6,n: 6,$O(n^3)$,30,$n$: number of records,n,,,Word RAM,words,1,n: 1,$O(1)$,"Derived: For SVM, only need to store a constant number of support vectors",1,0,,0,,0,,0,0,,0,0,,,,,,1,0.7767563268,1,1.112931266,1,1.338342829,3316.983346,3.004235765,,4316983.346,4.617013078,,4901945847,6.099078567,,5,,,Databases,FALSE
89,Hyperbolic Spline Interpolation,1,,Hyperbolic Spline Interpolation,680,Tridiagonal linear system,0,1,1,$O(n^3 \log^2 K)$,,,[https://link.springer.com/article/10.1134/S0965542508040039 B.I. Kvasov (2008)],B.I. Kvasov,2008,https://link.springer.com/article/10.1134/S0965542508040039,10.1134/S0965542508040039,['B. I. Kvasov'],1,['Construction of hyperbolic interpolation splines'],,,,1,0,6,"n: 6,
K: 2",$O(n^3 \log^2 K)$,,$n$: number of points,n,,,Word RAM,words,3,n: 3,$O(n)$?,Derived: Tridiagonal matrices in the linear system only require $O(n)$ space,1,0,,0,,0,,0,0,,0,0,https://link.springer.com/content/pdf/10.1134/S0965542511050095.pdf,,,,K=500,,,,,,,7284439084,370511.7131,607.6967333,7.28444E+18,370511713133,608695.7333,7.28444E+27,3.70512E+17,608696732.3,2,,,Numerical Analysis,FALSE
89,Hyperbolic Spline Interpolation,0.001,,Hyperbolic Spline Interpolation,681,,0,1,1,$O(n^5)$,,,[https://www.mathnet.ru/eng/zvmmf2544 V. A. Lyul’ka and A. V. Romanenko (1994)],V. A. Lyul’ka and A. V. Romanenko,1994,https://www.mathnet.ru/eng/zvmmf2544,,"['Vyacheslav A. Lyul'ka', 'Andrey V. Romanko']",2,['Constructing interpolation curves by the grid method'],,,,1,0,7,n: 7,$O(n^5)$,,$n$: number of points,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1E+15,2.698970004,-0.07940878012,1E+30,2.698970004,-0.07940878012,1E+45,2.698970004,-0.07940878012,2,,,Numerical Analysis,FALSE
89,Hyperbolic Spline Interpolation,0.001,,Hyperbolic Spline Interpolation,682,,0,1,1,$O(n^4)$,,,[http://www.mathnet.ru/php/archive.phtml?wshow=paper&jrnid=zvmmf&paperid=943&option_lang=eng V. A. Lyul’ka and I. E. Mikhailov (2003)],V. A. Lyul’ka and I. E. Mikhailov,2003,http://www.mathnet.ru/php/archive.phtml?wshow=paper&jrnid=zvmmf&paperid=943&option_lang=eng,,"['Vyacheslav A. Lyul'ka', 'Igor E. Mikhaĭlov']",2,['On the construction of interpolation curves'],,,,0,0,7,n: 7,$O(n^4)$,40,$n$: number of points,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000000,,,,,,,,,2,,,Numerical Analysis,FALSE
89,Hyperbolic Spline Interpolation,0.001,,Hyperbolic Spline Interpolation,683,,0,1,1,$O(n^5 \log K)$,,,[http://w.ict.nsc.ru/jct/annotation/892?l=eng V. I. Paasonen (2006)],V. I. Paasonen,2006,http://w.ict.nsc.ru/jct/annotation/892?l=eng,,['V. I. Paasonen'],1,['Parallel algorithm for construction of hyperbolic splines'],,,,1,0,7,"n: 7,
K: 2",$O(n^5 \log K)$,,$n$: number of points,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,2.69897E+15,1,,2.69897E+30,1,,2.69897E+45,1,,2,,,Numerical Analysis,FALSE
89,Hyperbolic Spline Interpolation,1,,Hyperbolic Spline Interpolation,684,Pentadiagonal linear system,0,1,1,$O(n^5 \log K)$,,,"[https://link.springer.com/article/10.1023/A:1018988312596 P. Costantini, B. I. Kvasov, and C. Manni (1999)]","P. Costantini, B. I. Kvasov, and C. Manni",1999,https://link.springer.com/article/10.1023/A:1018988312596,10.1023/A:1018988312596,"['Paolo Costantini', 'Boris I. Kvasov', 'Carla Manni']",3,['On discrete hyperbolic tension splines'],,,,0,0,7,"n: 7,
K: 2",$O(n^5 \log K)$,,$n$: number of points,n,,,Word RAM,words,3,n: 3,$O(n)$?,Derived: Pentadiagonal matrix in the linear system only requires $O(n)$ space,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,2,,,Numerical Analysis,FALSE
89,Hyperbolic Spline Interpolation,1,,Hyperbolic Spline Interpolation,685,Discrete Generalized Splines,0,1,1,$O(n^4)$,,,[http://sutir.sut.ac.th:8080/sutir/bitstream/123456789/431/1/bib115.pdf B. I. Kvasov (2000)],B. I. Kvasov,2000,http://sutir.sut.ac.th:8080/sutir/bitstream/123456789/431/1/bib115.pdf,,['B.I. Kvasov'],1,['Discrete GB-Splines and Their Properties'],,,,1,0,7,n: 7,$O(n^4)$,40,$n$: number of points,n,,,Word RAM,words,3,n: 3,$O(n)$??,Requires computing the coefficients $b_i$ and functions $\Phi(x)$ and $\Psi(x)$ as in equations 17 and 18,1,0,,0,,0,,0,0,,0,0,"https://www.sciencedirect.com/science/article/pii/S0167839699000370 (plausible other source)

https://www.researchgate.net/publication/265237324_Discrete_GB-Splines_and_Their_Properties (points to current source)",,,,,,,,,,,1000000000000,2698.970004,-0.7320007016,1E+24,2698970.004,-0.9152511806,1E+36,2698970004,-0.9732000702,2,,,Numerical Analysis,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,686,,0,0,1,$O(n^2)$,,,[https://dl.acm.org/doi/10.1145/218380.218440 ECK M.; DEROSE T.; DUCHAMP T.; 1995 (1995)],ECK M.; DEROSE T.; DUCHAMP T.; 1995,1995,https://dl.acm.org/doi/10.1145/218380.218440,10.1145/218380.218440,"['Matthias Eck', 'Tony DeRose', 'Tom Duchamp', 'Hugues Hoppe', 'Michael Lounsbery', 'Werner Stuetzle']",6,['Multiresolution analysis of arbitrary meshes'],,,,1,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,687,,0,0,1,$O(n^2)$,,,[http://www.cs.jhu.edu/~misha/Fall09/Floater97.pdf FLOATER 1997 (1997)],FLOATER 1997,1997,http://www.cs.jhu.edu/~misha/Fall09/Floater97.pdf,,['Michael S. Floater'],1,['Parametrization and smooth approximation of surface triangulations'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,688,,0,0,1,$O(n^2)$,,,[http://www.cs.jhu.edu/~misha/Fall09/Pinkall93.pdf PINKALL U.; POLTHIER K 1993 (1993)],PINKALL U.; POLTHIER K 1993,1993,http://www.cs.jhu.edu/~misha/Fall09/Pinkall93.pdf,,"['Ulrich Pinkall', 'Konrad Polthier']",2,['Computing Discrete Minimal Surfaces and Their Conjugates'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,689,,0,0,1,$O(n^2)$,,,[https://www.ams.org/journals/mcom/2003-72-242/S0025-5718-02-01466-7/S0025-5718-02-01466-7.pdf FLOATER 2003 (2003)],FLOATER 2003,2003,https://www.ams.org/journals/mcom/2003-72-242/S0025-5718-02-01466-7/S0025-5718-02-01466-7.pdf,,['Michael S. Floater'],1,['ONE-TO-ONE PIECEWISE LINEAR MAPPINGS OVER TRIANGULATIONS'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,690,,0,0,1,$O(n \log^3 n)$,,,[https://www.sciencedirect.com/science/article/abs/pii/S0097849302001231 LEE Y.; KIM H. S.; LEE S 2002 (2002)],LEE Y.; KIM H. S.; LEE S 2002,2002,https://www.sciencedirect.com/science/article/abs/pii/S0097849302001231,,"['Yunjin Lee', 'Hyoung Seok Kim', 'Seungyong Lee']",3,['Mesh parameterization with a virtual boundary'],,,,1,0,4.02,n: 4.02,$O(n \log^3 n)$,13,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,691,,0,0,1,$O(n^2)$,,,[https://dl.acm.org/doi/10.1145/566654.566588 DESBRUN M.; MEYER M.; ALLIEZ P. 2002 (2002)],DESBRUN M.; MEYER M.; ALLIEZ P. 2002,2002,https://dl.acm.org/doi/10.1145/566654.566588,10.1145/566654.566588,"['Pierre Alliez', 'Mark Meyer', 'Mathieu Desbrun']",3,['Interactive geometry remeshing'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,692,,0,0,1,$O(n \log^{2.5} n)$,,,[https://dl.acm.org/doi/abs/10.1145/3596711.3596734 LÉVY B.; PETITJEAN S.; RAY N.; MAILLOT J 2002 (2002)],LÉVY B.; PETITJEAN S.; RAY N.; MAILLOT J 2002,2002,https://dl.acm.org/doi/abs/10.1145/3596711.3596734,10.1145/3596711.3596734,"['Bruno Levy', 'Sylvain Petitjean', 'Nicolas Ray', 'Jérome Maillot']",4,['Least squares conformal maps for automatic texture atlas generation'],,,,1,0,4.015,n: 4.015,$O(n \log^{2.5} n)$,,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,https://members.loria.fr/Bruno.Levy/papers/LSCM_SIGGRAPH_2002.pdf (broken),,,,,,,,,,,,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,693,,0,0,1,$O(n^2)$,,,[https://dash.harvard.edu/bitstream/handle/1/2634388/Gortler_FreeBoundary.pdf?sequence=2&isAllowed=y KARNI Z.; GOTSMAN C.; GORTLER S. J. 2005 (2005)],KARNI Z.; GOTSMAN C.; GORTLER S. J. 2005,2005,https://dash.harvard.edu/bitstream/handle/1/2634388/Gortler_FreeBoundary.pdf?sequence=2&isAllowed=y,,"['Zachi Karni', 'Craig Gotsman', 'Steven J. Gortler']",3,['Free-boundary Linear Parameterization of 3D Meshes in the Presence of Constraints'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,694,,0,0,1,$O(n^2)$,,,[https://www.inf.usi.ch/hormann/papers/Hormann.2000.MAE.pdf HORMANN K.; GREINER G 1999 (1999)],HORMANN K.; GREINER G 1999,1999,https://www.inf.usi.ch/hormann/papers/Hormann.2000.MAE.pdf,,"['Kai Hormann', 'Gunther Greiner']",2,['MIPS: An Efficient Global Parametrization Method'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,695,,0,0,1,$O(n^2)$,,,[https://link.springer.com/article/10.1007/PL00013391 SHEFFER A.; DE STURLER E. 2000 (2000)],SHEFFER A.; DE STURLER E. 2000,2000,https://link.springer.com/article/10.1007/PL00013391,10.1007/PL00013391,"['A. Sheffer', 'E. de Sturler']",2,['Parameterization of Faceted Surfaces for Meshing using Angle-Based Flattening'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,696,,0,0,1,$O(n^2)$,,,[https://dl.acm.org/doi/10.1145/1061347.1061354 SHEFFER A.; LÉVY B.; MOGILNITSKY M.; BOGOMYAKOV A. 2005 (2005)],SHEFFER A.; LÉVY B.; MOGILNITSKY M.; BOGOMYAKOV A. 2005,2005,https://dl.acm.org/doi/10.1145/1061347.1061354,,"['Alla Sheffer', 'Bruno Lévy', 'Maxim Mogilnitsky', 'Alexander Bogomyakov']",4,['ABF++: Fast and Robust Angle Based Flattening'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,697,,0,0,1,$O(n)$,,,[https://dl.acm.org/doi/10.5555/1281991.1282010 ZAYER R.; LÉVY B.; SEIDEL H.-P. 2007 (2007)],ZAYER R.; LÉVY B.; SEIDEL H.-P. 2007,2007,https://dl.acm.org/doi/10.5555/1281991.1282010,,"['Rhaleb Zayer', 'Bruno Lévy', 'Hans-Peter Seidel']",3,['Linear angle based parameterization'],,,,1,5->6,3,n: 3,$O(n)$,10,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,698,,0,0,1,$O(n^2)$,,,[https://dl.acm.org/doi/pdf/10.1145/383259.383307 SANDER P. V.; SNYDER J.; GORTER S. J.; HOPPE 2001 (2001)],SANDER P. V.; SNYDER J.; GORTER S. J.; HOPPE 2001,2001,https://dl.acm.org/doi/pdf/10.1145/383259.383307,10.1145/383259.383307,"['Pedro V. Sander', 'John Snyder', 'Steven J. Gortler', 'Hugues Hoppe']",4,['Texture mapping progressive meshes'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,699,,0,0,1,$O(n^2)$,,,[ YAN J. Q.; YANG X.; SHI P. F 2006 (2006)],YAN J. Q.; YANG X.; SHI P. F 2006,2006,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,700,,0,0,1,$O(n \log n)$,,,[https://citeseerx.ist.psu.edu/pdf/46aec5037f2466642e1bde1e724865bf5424d438 ZAYER R.; ROESSL C.; SEIDEL H.-P 2005 (2005)],ZAYER R.; ROESSL C.; SEIDEL H.-P 2005,2005,https://citeseerx.ist.psu.edu/pdf/46aec5037f2466642e1bde1e724865bf5424d438,,"['Rhaleb Zayer', 'Christian Rössl', 'Zachi Karni', 'Hans-Peter Seidel']",4,['Harmonic Guidance for Surface Deformation'],,,,1,4->5,4,n: 4,$O(n \log n)$,11,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,701,,0,0,1,$O(n^2)$,,,[https://www.researchgate.net/profile/Alexander_Belyaev5/publication/47861414_A_fast_and_simple_stretch-minimizing_mesh_parameterization/links/5b962a6292851c78c40c0c3f/A-fast-and-simple-stretch-minimizing-mesh-parameterization.pdf YOSHIZAWA S.; BELYAEV A. G.; SEIDEL H.-P 2004 (2004)],YOSHIZAWA S.; BELYAEV A. G.; SEIDEL H.-P 2004,2004,https://www.researchgate.net/profile/Alexander_Belyaev5/publication/47861414_A_fast_and_simple_stretch-minimizing_mesh_parameterization/links/5b962a6292851c78c40c0c3f/A-fast-and-simple-stretch-minimizing-mesh-parameterization.pdf,,"['Shin Yoshizawa', 'Alexander Belyaev', 'Hans-Peter Seidel']",3,['A fast and simple stretch-minimizing mesh parameterization'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,702,,0,0,1,$O(n^2)$,,,[https://dl.acm.org/doi/10.1145/1236246.1236287 CHEN Z. G.; LIU L. G.; ZHANG Z. Y.; WANG G. J. 2007 (2007)],CHEN Z. G.; LIU L. G.; ZHANG Z. Y.; WANG G. J. 2007,2007,https://dl.acm.org/doi/10.1145/1236246.1236287,10.1145/1236246.1236287,"['Zhonggui Chen', 'Ligang Liu', 'Zhengyue Zhang', 'Guojin Wang']",4,['Surface parameterization via aligning optimal local flattening'],,,,0,0,5,n: 5,$O(n^2)$,20,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,703,,0,0,1,$O(n \log \log n)$,,,[ YANG Y.; KIM J.; LUO F.; HU S.; GU X. 2008 (2008)],YANG Y.; KIM J.; LUO F.; HU S.; GU X. 2008,2008,,,[],0,,,,,0,0,3.99,n: 3.99,$O(n \log \log n)$,10.1,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,704,,0,0,1,$O(n \log^2 n)$,,,[https://ieeexplore.ieee.org/document/4479457 BEN-CHEN M.; GOTSMAN C.; BUNIN G. 2008 (2008)],BEN-CHEN M.; GOTSMAN C.; BUNIN G. 2008,2008,https://ieeexplore.ieee.org/document/4479457,,"['Yong-Liang Yang', Junho Kim', 'Feng Luo', 'Shi-Min Hu', 'Xianfeng Gu']",5,['Optimal Surface Parameterization Using Inverse Curvature Map'],,,,0,0,4.01,n: 4.01,$O(n \log^2 n)$,12,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,http://www.cs.technion.ac.il/~gotsman/AmendedPubl/Miri/EG08_Conf.pdf (broken),,,,,,,,,,,99301,,,,,,,,,4,,,Image Processing,FALSE
90,Mesh Parameterization,0,,Mesh Parameterization,705,,0,0,1,$O(n \log^2 n)$,,,[https://dl.acm.org/doi/10.1145/1399504.1360676 SPRINGBORN B.; SCHROEDER P.; PINKALL U. 2008 (2008)],SPRINGBORN B.; SCHROEDER P.; PINKALL U. 2008,2008,https://dl.acm.org/doi/10.1145/1399504.1360676,10.1145/1399504.1360676,"['Boris Springborn', 'Peter Schr√∂der', 'Ulrich Pinkall']",3,['Conformal equivalence of triangle meshes'],,,,0,0,4.01,n: 4.01,$O(n \log^2 n)$,12,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,99301,,,,,,,,,4,,,Image Processing,FALSE
91,Maximum Likelihood Methods in Unknown Latent Variables,1,,Maximum Likelihood Methods in Unknown Latent Variables,706,,0,1,1,$O(n^3)$,,,[https://www.jstor.org/stable/2984875 Expectation-Maximization (EM) algorithm (1977)],Expectation-Maximization (EM) algorithm,1977,https://www.jstor.org/stable/2984875,,"['Arthur P. Dempster', 'Nan M. Laird', 'Donald B. Rubin']",3,['Maximum Likelihood from Incomplete Data via the EM Algorithm'],,,,1,0,6,n: 6,$O(n^3)$,30,"$n$: number of observations in sample
$r$: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",$O(n+r)$?,"Stores current $\theta$ and $Z$ guesses, which is updated each iteration. Also assumes description of log-likelihood takes $O(n+r)$ auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,1000,,1000000,,1000000000,,1000000000,1,,1E+18,1,,1E+27,1,,3,,,Statistics,FALSE
91,Maximum Likelihood Methods in Unknown Latent Variables,1,,Maximum Likelihood Methods in Unknown Latent Variables,707,,0,1,1,$O(n^2 \log^3 n)$,,,[https://rss.onlinelibrary.wiley.com/doi/abs/10.1111/1467-9868.00083 EM with Quasi-Newton Methods (Jamshidian; Mortaza; Jennrich; Robert I.) (1997)],EM with Quasi-Newton Methods (Jamshidian; Mortaza; Jennrich; Robert I.),1997,https://rss.onlinelibrary.wiley.com/doi/abs/10.1111/1467-9868.00083,10.1111/1467-9868.00083,"['Mortaza Jamshidian', 'Robert I. Jennrich']",2,['Acceleration of the EM Algorithm by using Quasi-Newton Methods'],,,,1,0,5.03,n: 5.03,$O(n^2 \log^3 n)$,23,"$n$: number of observations in sample
$r$: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 5",$O(n+r^2)$?,"Stores current theta and Hessian matrix guess, which is updated each iteration. Also assumes description of log-likelihood takes $O(n+r)$ auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,989770366.8,1.01033536,0.0005142479546,7.91816E+15,126.29192,0.273704779,2.67238E+22,37419.82815,0.6929927154,3,,,Statistics,FALSE
91,Maximum Likelihood Methods in Unknown Latent Variables,1,,Maximum Likelihood Methods in Unknown Latent Variables,708,,0,1,1,$O(n^3)$,,,[http://www.stat.ucla.edu/~ywu/research/papers/PXEM.pdf Parameter-expanded expectation maximization (PX-EM) (1998)],Parameter-expanded expectation maximization (PX-EM),1998,http://www.stat.ucla.edu/~ywu/research/papers/PXEM.pdf,,"['Chuanhai Liu', 'Donald B. Rubin', 'Ying Nian Wu']",3,['Parameter Expansion to Accelerate EM: The PX-EM Algorithm'],,,,0,0,6,n: 6,$O(n^3)$,30,"$n$: number of observations in sample
$r$: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",$O(n+r)$?,"Stores current $\theta$ (+ $\alpha$) and $Z$ guesses, which is updated each iteration. Also assumes description of log-likelihood takes $O(n+r)$ auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Statistics,FALSE
91,Maximum Likelihood Methods in Unknown Latent Variables,1,,Maximum Likelihood Methods in Unknown Latent Variables,709,,0,1,1,$O(n^3)$,,,[https://academic.oup.com/biomet/article-abstract/80/2/267/251605?redirectedFrom=fulltext Expectation conditional maximization (ECM) (1993)],Expectation conditional maximization (ECM),1993,https://academic.oup.com/biomet/article-abstract/80/2/267/251605?redirectedFrom=fulltext,10.1093/biomet/80.2.267,"['Xiao-Li Meng', 'Donald B. Rubin']",2,['Maximum likelihood estimation via the ECM algorithm: A general framework'],,,,0,0,6,n: 6,$O(n^3)$,30,"$n$: number of observations in sample
$r$: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",$O(n+r)$?,"Stores current $\theta$ and $Z$ guesses, which is updated each iteration. Also assumes description of log-likelihood takes $O(n+r)$ auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Statistics,FALSE
91,Maximum Likelihood Methods in Unknown Latent Variables,1,,Maximum Likelihood Methods in Unknown Latent Variables,710,,0,1,1,$O(n^3)$,,,[https://www.jstor.org/stable/2337067 Expectation conditional maximization either (ECME) (Liu; Chuanhai; Rubin; Donald B) (1994)],Expectation conditional maximization either (ECME) (Liu; Chuanhai; Rubin; Donald B),1994,https://www.jstor.org/stable/2337067,,"['Chuanhai Liu', 'Donald B. Rubin']",2,['The ECME Algorithm: A Simple Extension of EM and ECM with Faster Monotone Convergence'],,,,0,0,6,n: 6,$O(n^3)$,30,"$n$: number of observations in sample
$r$: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",$O(n+r)$?,"Stores current $\theta$ and $Z$ guesses, which is updated each iteration. Also assumes description of log-likelihood takes $O(n+r)$ auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,11.29760188,Statistics,FALSE
91,Maximum Likelihood Methods in Unknown Latent Variables,1,,Maximum Likelihood Methods in Unknown Latent Variables,711,,0,1,1,$O(n^3)$,,,[https://waseda.pure.elsevier.com/en/publications/the-%CE%B1-em-algorithm-surrogate-likelihood-maximization-using-%CE%B1-loga α-EM Algorithm (2003)],α-EM Algorithm,2003,https://waseda.pure.elsevier.com/en/publications/the-%CE%B1-em-algorithm-surrogate-likelihood-maximization-using-%CE%B1-loga,,['Yasuo Matsuyama'],1,['The α-EM algorithm: Surrogate likelihood maximization using α-logarithmic information measures'],,,,0,0,6,n: 6,$O(n^3)$,30,"$n$: number of observations in sample
$r$: number of parameters + latent variables",n,,,Real RAM,words,3,"n: 3,
r: 3",$O(n+r)$?,"Stores current $\theta$ and $Z$ guesses, which is updated each iteration. Also assumes description of $\alpha$-log-likelihood takes $O(n+r)$ auxiliary space.",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Statistics,FALSE
91,Maximum Likelihood Methods in Unknown Latent Variables,1,,"Maximum Likelihood Methods in Unknown Latent Variables; multi-view model, discrete observations",712,,0,1,1,$O(n^2 \log^2 n)$,,,[https://dl.acm.org/doi/abs/10.5555/3020847.3020929 Shaban; Amirreza; Mehrdad; Farajtabar (2015)],Shaban; Amirreza; Mehrdad; Farajtabar,2015,https://dl.acm.org/doi/abs/10.5555/3020847.3020929,10.5555/3020847.3020929,"['Amirreza Shaban', 'Mehrdad Farajtabar', 'Bo Xie', 'Le Song', 'Byron Boots']",5,['Learning latent variable models by improving spectral solutions with exterior point method'],,,,0,0,5.02,n: 5.02,$O(n^2 \log^2 n)$,22,"$n$: number of observations in sample
$k$: number of distributions in ""mixture"" ($n_s$)
$d$: dimensions of parameter for each discrete distribution ($n_o$)",n,,,Real RAM,words,1,"k: 3,
d: 6,
n: 1",$O(kd+d^3)$??,"vector of parameters has size at least $\Theta(kd)$, and tensor $M$ has size at least $\Theta(d^3)$ in paper",1,0,,0,,0,,0,0,,0,0,https://homes.cs.washington.edu/~bboots/files/SpectralExteriorPoint-NIPSWorkshop.pdf (may be broken),,,,,1,0.1993539462,1,0.4384498883,1,0.7252105499,9931685,,,,,,,,,3,,,Statistics,FALSE
91,Maximum Likelihood Methods in Unknown Latent Variables,0,,"Maximum Likelihood Methods in Unknown Latent Variables, Hidden Markov Models",713,,0,1,1,$O(n^2 \log^2 n)$,,,"[https://ieeexplore.ieee.org/abstract/document/7895145 alpha-HMM (Matsuyama, Yasuo) (2011)]","alpha-HMM (Matsuyama, Yasuo)",2011,https://ieeexplore.ieee.org/abstract/document/7895145,,['Yasuo Matsuyama'],1,['The Alpha-HMM Estimation Algorithm: Prior Cycle Guides Fast Paths'],,,,1,0,5.02,n: 5.02,$O(n^2 \log^2 n)$,22,"$n$: number of observations in sample
$r$: number of parameters + latent variables",n,,,Real RAM,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,99316856.41,10.06878425,0.07028471836,397267425633671,2517.196064,0.2590035998,8.93852E+20,1118753.806,0.5062739199,3,,,Statistics,FALSE
92,Collaborative Filtering,2,Collaborative Filtering,Matrix Factorization,714,,,1,1,$O(n^3)$,Any distribution of values,Steps are the same regardless of input,[ LU Matrix Decomposition (1945)],LU Matrix Decomposition,1945,,,[],0,,,,,1,0,4.5,"n: 6,
n^2: 4.5",$O(n^3)$,30,$n$: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Computes and stores (intermediate steps of) factorization,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,1,,1E+18,1,,1E+27,1,,3,,,Statistics,FALSE
92,Collaborative Filtering,2,Collaborative Filtering,Matrix Factorization,715,,,1,1,$O(n^2)$,Any distribution of values,Steps are the same regardless of input,[ QR Matrix Decomposition (1955)],QR Matrix Decomposition,1955,,,[],0,,,,,1,3->4,3,"n: 5,
n^2: 3",$O(n^2)$,20,$n$: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Computes and stores (intermediate steps of) factorization,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1000,0.995262315,1000000000000,1000000,2.981071706,1E+18,1000000000,6.943282347,3,,,Statistics,FALSE
92,Collaborative Filtering,2,Collaborative Filtering,Matrix Factorization,716,,,1,1,$O(n^2)$,Any distribution of values,Steps are the same regardless of input,[ Cholesky Decomposition (1983)],Cholesky Decomposition,1983,,,[],0,,,,,0,0,3,"n: 5,
n^2: 3",$O(n^2)$,20,$n$: dimension of matrix,n^2,,,Word/Real RAM,words,3,"n: 5,
n^2: 3",$O(n^2)$,Computes and stores (intermediate steps of) factorization,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Statistics,FALSE
96,Filtering Problem (Stochastic Processes),1,,Filtering Problem (Stochastic Processes),753,,0,1,1,$O(n^3)$,,,[ Kalman Filter (1960)],Kalman Filter,1960,,,[],0,,,,,1,0,6,n: 6,$O(n^3)$,30,$n$: number of dimensions in state space,n,,,Word/Real RAM,words,5,n: 5,$O(n^2)$?,Generally works with a constant number of $O(n)\times O(n)$-sized matrices per iteration,1,0,,0,,0,,0,0,,0,0,,,,,,1000000,,1000000000000,,1E+18,,1000000000,1,,1E+18,1,,1E+27,1,,3,,,Statistics,FALSE
96,Filtering Problem (Stochastic Processes),1,,Filtering Problem (Stochastic Processes),754,,0,1,1,$O(n^3)$,,,[ Particle filter Del Moral (1996)],Particle filter Del Moral,1996,,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,"$n$: number of dimensions in state space
$N$: number of particles used",n,,,Word/Real RAM,words,3,"n: 3,
N: 3",$O(nN)$?,Works with $O(N)$ number of $O(n)$-sized vectors (containing information about particles) each iteration,1,0,,0,,0,,0,0,,0,0,,,,,,1000,0.2115276586,1000000,0.4677992676,1000000000,0.77827941,1000000000,,,,,,,,,3,,,Statistics,FALSE
96,Filtering Problem (Stochastic Processes),0.001,,Filtering Problem (Stochastic Processes),755,,0,1,1,$O(n^3)$,,,[ Stratonovich (1959)],Stratonovich,1959,,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,$n$: number of dimensions in state space,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Statistics,FALSE
96,Filtering Problem (Stochastic Processes),0.001,,Filtering Problem (Stochastic Processes),756,,0,1,1,$O(n^3)$,,,[ Stratonovich (1960)],Stratonovich,1960,,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,$n$: number of dimensions in state space,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Statistics,FALSE
96,Filtering Problem (Stochastic Processes),1,,Filtering Problem (Stochastic Processes),757,,0,1,1,$O(n^3)$,,,[https://ieeexplore.ieee.org/document/1098671 Kushner non-linear filter (1967)],Kushner non-linear filter,1967,https://ieeexplore.ieee.org/document/1098671,,['Harold J. Kushner'],1,['Approximations to optimal nonlinear filters'],,,,0,0,6,n: 6,$O(n^3)$,30,$n$: number of dimensions in state space,n,,,Word/Real RAM,words,5,n: 5,$O(n^2)$??,Generally works with a constant number of non-linear transformations; assumes that the description of the non-linear transformations is $O(n^2)$,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Statistics,FALSE
96,Filtering Problem (Stochastic Processes),0.001,,Filtering Problem (Stochastic Processes),758,,0,1,1,$O(n^3)$,,,[https://link.springer.com/article/10.1007/BF00536382 Zakai (1969)],Zakai,1969,https://link.springer.com/article/10.1007/BF00536382,10.1007/BF00536382,['Moshe Zakai'],1,['On the optimal filtering of diffusion processes'],,,,0,0,6,n: 6,$O(n^3)$,30,$n$: number of dimensions in state space,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Statistics,FALSE
96,Filtering Problem (Stochastic Processes),1,,Filtering Problem (Stochastic Processes),759,,0,1,1,$O(n^2 \log^2 n)$,,,[ Maybeck; Peter S Extended Kalman Filter (1979)],Maybeck; Peter S Extended Kalman Filter,1979,,,[],0,,,,,1,0,5.02,n: 5.02,$O(n^2 \log^2 n)$,22,$n$: number of dimensions in state space,n,,,Word/Real RAM,words,5,n: 5,$O(n^2)$?,Generally works with a constant number of $O(n)\times O(n)$-sized matrices per iteration,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9931685,,,,,,,,,3,,,Statistics,FALSE
96,Filtering Problem (Stochastic Processes),0,,Filtering Problem (Stochastic Processes),760,,0,1,1,$O(n^{2.45} \log n)$,,,[https://ieeexplore.ieee.org/abstract/document/661075 Damiano Brigo; Bernard Hanzon and François LeGland (1998)],Damiano Brigo; Bernard Hanzon and François LeGland,1998,https://ieeexplore.ieee.org/abstract/document/661075,,"['Damiano Brigo', 'Bernard Hanzon', 'François LeGland']",3,['A differential geometric approach to nonlinear filtering: the projection filter'],,,,0,0,5.46,n: 5.46,$O(n^{2.45} \log n)$,,$n$: number of dimensions in state space,n,,,Word/Real RAM,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Statistics,FALSE
96,Filtering Problem (Stochastic Processes),0,,Filtering Problem (Stochastic Processes),761,,0,1,1,$O(n^2)$,,,[https://projecteuclid.org/journals/annals-of-applied-probability/volume-8/issue-2/Measure-valued-processes-and-interacting-particle-systems-Application-to-nonlinear/10.1214/aoap/1028903535.full Del Moral; Pierre (1998)],Del Moral; Pierre,1998,https://projecteuclid.org/journals/annals-of-applied-probability/volume-8/issue-2/Measure-valued-processes-and-interacting-particle-systems-Application-to-nonlinear/10.1214/aoap/1028903535.full,,['Pierre Del Moral'],1,['Measure-valued processes and interacting particle systems. Application to nonlinear filtering problems'],,,,1,3->4,5,n: 5,$O(n^2)$,20,$n$: number of dimensions in state space,n,,,Word/Real RAM,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1000,0.1993539462,1000000000000,1000000,0.4384498883,1E+18,1000000000,0.7252105499,3,,,Statistics,FALSE
96,Filtering Problem (Stochastic Processes),0.001,,Filtering Problem (Stochastic Processes),762,,0,1,1,$O(n^2)$,,,[https://link.springer.com/chapter/10.1007/978-1-4612-1784-8_28 Ocone (1999)],Ocone,1999,https://link.springer.com/chapter/10.1007/978-1-4612-1784-8_28,10.1007/978-1-4612-1784-8_28,['Daniel Ocone'],1,['Entropy Inequalities and Entropy Dynamics in Nonlinear Filtering of Diffusion Processes'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of dimensions in state space,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Statistics,FALSE
97,Optimal Policies for MDPs,2,Optimal Policies for MDPs,Optimal Policies for MDPs,763,,,1,1,$O(2^n)$,Any distribution of values,Steps are the same regardless of input,[https://www.jstor.org/stable/24900506 Bellman Value Iteration (VI) (1957)],Bellman Value Iteration (VI),1957,https://www.jstor.org/stable/24900506,,['RICHARD BELLMAN'],1,['A Markovian Decision Process'],,,,1,0,8,n: 8,$O(2^n)$,,$n$: number of states,n,,,Word/Real RAM,words,3,n: 3,$O(n)$,"Only needs to store values ($V$) and policy ($\pi$), both size $O(n)$",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Robotics,FALSE
97,Optimal Policies for MDPs,2,Optimal Policies for MDPs,Optimal Policies for MDPs,764,,,1,1,$O(n^3)$,Any distribution of values,Steps are the same regardless of input,[https://pubsonline.informs.org/doi/10.1287/opre.50.1.100.17788 Howard Policy Iteration (PI) (1960)],Howard Policy Iteration (PI),1960,https://pubsonline.informs.org/doi/10.1287/opre.50.1.100.17788,,['Ronald A. Howard'],1,['Comments on the Origin and Application of Markov Decision Processes'],,,,1,1->3,6,n: 6,$O(n^3)$,30,$n$: number of states,n,,,Word/Real RAM,words,3,n: 3,$O(n)$,"Only needs to store values ($V$) and policy ($\pi$), both size $O(n)$",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,Inf,Inf,1E+18,Inf,Inf,1E+27,Inf,Inf,1,,,Robotics,FALSE
97,Optimal Policies for MDPs,2,Optimal Policies for MDPs,Optimal Policies for MDPs,765,,,1,1,$O(n^3)$,Any distribution of values,Steps are the same regardless of input,[ Puterman Modified Policy Iteration (MPI) (1974)],Puterman Modified Policy Iteration (MPI),1974,,,[],0,,,,,0,0,6,n: 6,$O(n^3)$,30,$n$: number of states,n,,,Word/Real RAM,words,3,n: 3,$O(n)$,"Only needs to store values ($V$) and policy ($\pi$), both size $O(n)$",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,1,,,Robotics,FALSE
98,The Set-Covering Problem,1,,Unweighted Set-Covering; Weighted Set-Covering,766,ILP,,1,0,"$O(\text{poly}(n, d))$",,,"[https://www.ics.uci.edu/~vazirani/book.pdf Vazirani (ILP, chapters 13-15) (2001)]","Vazirani (ILP, chapters 13-15)",2001,https://www.ics.uci.edu/~vazirani/book.pdf,,['Vijay V. Vazirani'],1,['Approximation Algorithms'],,,,0,0,7,n: 7,"$O(\text{poly}(n, d))$",400,"$n$: number of sets
$U$: size of universe
$d$: size of the largest set in $S$",n,,,Word RAM,words,1,"U: 3,
n: 1",$O(U)$,,,,,0,,1,$\log U$,0,0,,0,0,,,,,,,,,,,,1000000,Inf,,1000000000000,Inf,,1E+18,Inf,,1,,,Combinatorics,TRUE
98,The Set-Covering Problem,1,,,774,,,1,1,$O(n^2)$,,,[https://www.semanticscholar.org/paper/An-efficient-distributed-algorithm-for-computing-Cardoso-Abreu/ce32696c1176800c5b90fab026bf93f282e2b161 Cardoso; Nuno; Abreu; Rui (2014)],Cardoso; Nuno; Abreu; Rui,2014,https://www.semanticscholar.org/paper/An-efficient-distributed-algorithm-for-computing-Cardoso-Abreu/ce32696c1176800c5b90fab026bf93f282e2b161,,"['Nuno Cardoso', 'Rui Abreu']",2,['An efficient distributed algorithm for computing minimal hitting sets'],,,,0,0,5,n: 5,$O(n^2)$,20,"$n$: number of sets
$U$: size of universe",n,,,,,#VALUE!,,,,,,,0,,0,,1,1,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
98,The Set-Covering Problem,1,,,,,,1,1,$O(U 2^n)$,,,[ Brute force (1972)],Brute force,1972,,,[],0,,,,,1,0,8,"n: 8,
U: 3",$O(U 2^n)$,2000,"$n$: number of sets
$U$: size of universe",n,,,Word RAM,words,1,"U: 3,
n: 1",$O(U)$,,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
99,Motif Search,1,Motif Search,Motif Search,775,"Uses oligonucleotides? Also only detects ""short"" motifs, and used for yeast",,1,1,$O(mn)$,,,[https://www.ncbi.nlm.nih.gov/pubmed/9719638 Helden Oligo-Analysis (1998)],Helden Oligo-Analysis,1998,https://www.ncbi.nlm.nih.gov/pubmed/9719638,10.1006/jmbi.1998.1947,"['J. van Helden', 'B. Andre', 'J. Collado-Vides']",3,['Extracting regulatory sites from the upstream region of yeast genes by computational analysis of oligonucleotide frequencies 1 1Edited by G. von Heijne'],,,,0,0,3,"n: 3,
m: 3,
mn: 3",$O(mn)$,10,"$n$: number of sequences
$m$: length of sequences",mn,,,Word RAM,words,2.5,"m: 3,
mn: 2.5",$O(m)$,Derived: store number of occurances for each motif of a specified length,1,0,,0,,0,,0,0,,0,0,"https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM1
https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6490410/table/T1/?report=objectonly",,,,,500,6.93700526,500000,78.3700526,500000000,792.700526,,,,,,,,,,4,,,Bioinformatics,TRUE
99,Motif Search,1,Motif Search,Motif Search,776,Dyad analysis,,1,1,$O(mn)$,,,[https://www.ncbi.nlm.nih.gov/pmc/articles/PMC102821/ van Helden J; Rios AF; Collado-Vides J (2000)],van Helden J; Rios AF; Collado-Vides J,2000,https://www.ncbi.nlm.nih.gov/pmc/articles/PMC102821/,10.1093/nar/28.8.1808,"['J. v. Helden', 'Alma. F. Rios', 'Julio Collado-Vides']",3,['Discovering regulatory elements in non-coding sequences by analysis of spaced dyads'],,,,0,0,3,"n: 3,
m: 3,
mn: 3",$O(mn)$,10,"$n$: number of sequences
$m$: length of sequences",mn,,,Word RAM,words,2.5,"m: 3,
mn: 2.5",$O(m)$,Derived: store number of occurances for each motif of a specified length,1,0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM2,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,TRUE
99,Motif Search,1,Motif Search,Motif Search,777,,,1,1,$O(mn)$,,,[https://pubmed.ncbi.nlm.nih.gov/10786309/ Tompa M (1999)],Tompa M,1999,https://pubmed.ncbi.nlm.nih.gov/10786309/,,['Martin Tompa'],1,"['An exact method for finding short motifs in sequences, with application to the ribosome binding site problem']",,,,0,0,3,"n: 3,
m: 3,
mn: 3",$O(mn)$,10,"$n$: number of sequences
$m$: length of sequences",mn,,,Word RAM,words,3,"m: 5,
mn: 3",$O(m^2)$,"Requires considering an $O(m^2)\times O(m^2)$ matrix with $O(m^2)$ nonzero entries, based on a DFA with $O(m^2)$ states",1,0,,0,,0,,0,0,,0,0,https://www.aaai.org/Papers/ISMB/1999/ISMB99-030.pdf,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,TRUE
99,Motif Search,1,Motif Search,Motif Search,778,,,1,1,$O(n^{0.66} m)$,,,[https://www.ncbi.nlm.nih.gov/pubmed/10977095 Sinha S; Tompa M YMF (Yeast Motif Finder) (2000)],Sinha S; Tompa M YMF (Yeast Motif Finder),2000,https://www.ncbi.nlm.nih.gov/pubmed/10977095,,"['S Sinha', 'M Tompa']",2,['A statistical method for finding transcription factor binding sites'],,,,1,0,2.83,"n: 2.66,
m: 3,
mn: 2.83",$O(n^{0.66} m)$,,"$n$: number of sequences
$m$: length of sequences",mn,,,Word RAM,words,2.5,"m: 3,
mn: 2.5",$O(m)$,Derived: store number of occurances for each motif of a specified length,1,0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM4,,,,,,,,,,,30219.70407,#REF!,#REF!,2885959334,#REF!,#REF!,275606976773734,#REF!,#REF!,4,,,Bioinformatics,TRUE
99,Motif Search,1,Motif Search,Motif Search,780,,,1,1,$O(n^2m^2)$,,,[https://link.springer.com/article/10.1007/BF00993379 Bailey TL; Elkan C MEME (1995)],Bailey TL; Elkan C MEME,1995,https://link.springer.com/article/10.1007/BF00993379,10.1007/BF00993379,"['Timothy L. Bailey', 'Charles Elkan']",2,['Unsupervised learning of multiple motifs in biopolymers using expectation maximization'],,,,1,0,5,"m: 5,
n: 5,
mn: 5",$O(n^2m^2)$,20,"$n$: number of sequences
$m$: length of sequences",mn,https://link.springer.com/article/10.1007/BF00993379,0,Word RAM,words,3,"n: 3,
m: 3,
mn: 3",$O(mn)$,"Uses iterations of the EM algorithm as in (Lawrence, Reilly 1990), and thus uses similar amounts of space",1,0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM6,,,,,250000,,250000000000,,2.5E+17,,,,,,,,,,,4,,,Bioinformatics,TRUE
99,Motif Search,1,Motif Search,Motif Search,783,,,1,1,$O(nm^{0.5})$,,,[https://www.worldscientific.com/doi/10.1142/S0219720004000466 Liang Cwinnower (2003)],Liang Cwinnower,2003,https://www.worldscientific.com/doi/10.1142/S0219720004000466,10.1142/S0219720004000466,"['S. LIANG', 'M. P. SAMANTA', 'B. A. BIEGEL']",3,['cWINNOWER ALGORITHM FOR FINDING FUZZY DNA MOTIFS'],,,,1,0,2.75,"n: 3,
m: 2.5,
mn: 2.75",$O(nm^{0.5})$,,"$n$: number of sequences
$m$: length of sequences",mn,,,Word RAM,words,3,"m: 5,
mn: 3",$O(m^2)$,Considers a graph on $O(m)$ nodes and $O(m^2)$ edges,1,0,,0,,0,,0,0,,0,0,https://bmcbioinformatics.biomedcentral.com/articles/10.1186/1471-2105-8-S7-S21#MOESM9,,,,,,,,,,,11180.33989,#REF!,#REF!,353553390.6,#REF!,#REF!,11180339887499,#REF!,#REF!,4,,,Bioinformatics,TRUE
99,Motif Search,1,Motif Search,Motif Search,789,ILP formulation,,1,1,$O(mn)$,,,[https://link.springer.com/chapter/10.1007/11780441_22 Kingsford (2006)],Kingsford,2006,https://link.springer.com/chapter/10.1007/11780441_22,10.1007/11780441_22,"['Carl Kingsford', 'Elena Zaslavsky', 'Mona Singh']",3,['A Compact Mathematical Programming Formulation for DNA Motif Finding'],,,,0,0,3,"m: 3,
n: 3,
mn: 3",$O(mn)$,10,"$n$: number of sequences
$m$: length of sequences",mn,,,Word RAM,words,5,"n: 5,
m: 5,
mn: 5",$O(m^2n^2)$,"Creates an ILP with $O(m^2n^2)$ variables and $O(n^2m)$ constraints, each involving $O(m)$ variables",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Bioinformatics,TRUE
100,All Maximal Non-Branching Paths in a Graph,1,,All Maximal Non-Branching Paths in a Graph,791,,0,1,1,$O(m)$,Any distribution,(need to read entire input),[http://rosalind.info/problems/ba3m/ Naive (1940)],Naive,1940,http://rosalind.info/problems/ba3m/,,['Rosalind Team'],1,['Generate All Maximal Non-Branching Paths in a Graph'],,,,1,0,5,"m: 3,
n: 5",$O(m)$,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,3,n: 3,$O(n)$?,"For each vertex, store whether that vertex is a 1-in-1-out vertex (all of these can be pre-computed at the same time in $O(m)$ time). Unclear if there's a better bound",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Bioinformatics,FALSE
101,Link Analysis,1,,InDegree Analysis,792,,,1,1,$O(mn)$?,,,[https://www.w3.org/People/Massimo/papers/quest_hypersearch.pdf The INDEGREE Algorithm (1997)],The INDEGREE Algorithm,1997,https://www.w3.org/People/Massimo/papers/quest_hypersearch.pdf,,['Massimo Marchiori'],1,['The Quest for Correct Information on the Web: Hyper Search Engines'],,,,1,0,6,"m: 3,
n: 6",$O(mn)$,20,"$n$: number of pages
$m$: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,$O(n)$,Must maintain a list of visited nodes to eliminate duplication.,1,0,,0,,0,,0,0,,0,0,https://dl.acm.org/doi/pdf/10.1145/1052934.1052942,,,,,,,,,,,125000000,1,,1.25E+17,1,,1.25E+26,1,,3,,,Combinatorics,FALSE
153,Link Analysis,1,Link Analysis,Link Analysis,793,,,1,1,$O(n^3)$?,,,[http://ilpubs.stanford.edu:8090/422/?utm_campaign=Technical%20SEO%20Weekly&utm_medium=email&utm_source=Revue%20newsletter The PAGERANK Algorithm (1998)],The PAGERANK Algorithm,1998,http://ilpubs.stanford.edu:8090/422/?utm_campaign=Technical%20SEO%20Weekly&utm_medium=email&utm_source=Revue%20newsletter,,"['Lawrence Page', 'Sergey Brin', 'Rajeev Motwani', 'Terry Winograd']",4,['The PageRank Citation Ranking: Bringing Order to the Web'],,,,1,3->4,7,"m: 3,
n: 7",$O(n^3)$?,30,"$n$: number of pages
$m$: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,$O(n)$,Stores and updates an $O(n)$-sized vector designed to converge to some sort of stationary distribution,1,0,,0,,0,,0,0,,0,0,"https://www.stat.uchicago.edu/~lekheng/meetings/mathofranking/ref/langville.pdf

http://ilpubs.stanford.edu:8090/422/1/1999-66.pdf (original source)",,,,,,,,,,,250000,500,499,250000000000,500000,499999,2.5E+17,500000000,499999999,3,,,Combinatorics,FALSE
153,Link Analysis,1,Link Analysis,Link Analysis,794,,,1,1,$O(n^2 k)$,,,[https://dl.acm.org/doi/pdf/10.1145/324133.324140 The (Hyperlink-Induced Topic Search) HITS Algorithm (1998)],The (Hyperlink-Induced Topic Search) HITS Algorithm,1998,https://dl.acm.org/doi/pdf/10.1145/324133.324140,10.1145/324133.324140,['Jon M. Kleinberg'],1,['Authoritative sources in a hyperlinked environment'],,,,1,0,6,n: 6,$O(n^2 k)$,30,"$n$: number of pages
$m$: number of hyperlinks?
$k$: number of iterations",n,,,Word RAM,words,3,n: 3,$O(n)$,Stores and updates hub and authority values per node,1,0,,0,,0,,0,0,,0,0,"https://en.wikipedia.org/wiki/HITS_algorithm#Algorithm

https://citeseerx.ist.psu.edu/pdf/788f5d77b18d054c6e46108d3f4e6ffbdb5d9209",,,,,,,,,,,125000000,1,,1.25E+17,1,,1.25E+26,1,,3,,,Combinatorics,FALSE
153,Link Analysis,1,Link Analysis,Link Analysis,796,,,1,1,$O(m^2 n)$,,,[https://dl.acm.org/doi/abs/10.1145/382979.383041 The (Stochastic Approach for Link Structure Analysis) SALSA Algorithm (2000)],The (Stochastic Approach for Link Structure Analysis) SALSA Algorithm,2000,https://dl.acm.org/doi/abs/10.1145/382979.383041,10.1145/382979.383041,"['R. Lempel', 'S. Moran']",2,['SALSA: the stochastic approach for link-structure analysis'],,,,0,0,7,"m: 5,
n: 7",$O(m^2 n)$,30,"$n$: number of pages
$m$: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,$O(n)$?,Stores and updates two $O(n)$-sized vectors (corresponding to 2 random walks) designed to converge to some sort of stationary distribution,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,FALSE
153,Link Analysis,1,Link Analysis,Link Analysis,797,,,1,1,$O(mn \log n)$,,,[https://dl.acm.org/doi/pdf/10.1145/383952.384003 Randomized HITS (2001)],Randomized HITS,2001,https://dl.acm.org/doi/pdf/10.1145/383952.384003,10.1145/383952.384003,"['Andrew Y. Ng', 'Alice X. Zheng', 'Michael I. Jordan']",3,['Stable algorithms for link analysis'],,,,0,0,6.01,"m: 3,
n: 6.01",$O(mn \log n)$,21,"$n$: number of pages
$m$: number of hyperlinks?",n,,,Word RAM,words,3,n: 3,$O(n)$,Stores and updates hub and authority values per node,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,FALSE
153,Link Analysis,1,Link Analysis,Link Analysis,798,,,1,1,$O(mn)$,,,[http://web.cse.msu.edu/~cse960/Papers/LinkAnalysis/phits.pdf PHITS Coheng Chan (2000)],PHITS Coheng Chan,2000,http://web.cse.msu.edu/~cse960/Papers/LinkAnalysis/phits.pdf,,"['David Cohn', 'Huan Chang']",2,['Learning to Probabilistically Identify Authoritative Documents'],,,,0,0,6,"m: 3,
n: 6",$O(mn)$,20,"$n$: number of pages
$m$: number of hyperlinks?
$z$: # of topics/categories",n,,,Word RAM,words,3,"n: 3,
z: 3",$O(nz)$?,"Needs to store $P(z)$, $P(d|z)$, and $P(c|z)$ after each EM iteration (algorithm can be smart about intermediate calculations as to not use more than $O(nz)$ space)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,FALSE
153,Link Analysis,1,Link Analysis,Link Analysis,799,PageRank with categories/topics,,1,1,$O(mn)$,,,[http://www-cs-students.stanford.edu/~taherh/papers/topic-sensitive-pagerank.pdf Haveliwala (2002)],Haveliwala,2002,http://www-cs-students.stanford.edu/~taherh/papers/topic-sensitive-pagerank.pdf,,['Taher H. Haveliwala'],1,['Topic-Sensitive PageRank'],,,,0,0,6,"m: 3,
n: 6",$O(mn)$,20,"$n$: number of pages
$m$: number of hyperlinks?
$z$: # of topics/categories",n,,,Word RAM,words,3,"n: 3,
z: 3",$O(nz)$?,Stores and updates $z$ $O(n)$-sized vectors designed to converge to some stationary distributions,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,FALSE
153,Link Analysis,1,Link Analysis,Link Analysis,800,Personalized PageRank with hubs,,1,1,$O(mn)$,,,[http://infolab.stanford.edu/~glenj/spws.pdf Jeh and Widom (2003)],Jeh and Widom,2003,http://infolab.stanford.edu/~glenj/spws.pdf,,"['Glen Jeh', 'Jennifer Widom']",2,['Scaling Personalized Web Search'],,,,0,0,6,"m: 3,
n: 6",$O(mn)$,20,"$n$: number of pages
$m$: number of hyperlinks?
$h$: number of ""hub"" pages",n,,,Word RAM,words,3,"n: 3,
h: 3",$O(nh)$,Stores and updates $h$ $O(n)$-sized vectors designed to converge to some basis vectors,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,FALSE
153,Link Analysis,1,Link Analysis,Link Analysis,801,Query-dependent PageRank,,1,1,$O(mn)$,,,[https://homes.cs.washington.edu/~pedrod/papers/nips01b.pdf  Richardson and Domingos (2002)], Richardson and Domingos,2002,https://homes.cs.washington.edu/~pedrod/papers/nips01b.pdf,,"['Matthew Richardson', 'Pedro Domingos']",2,['The Intelligent Surfer: Probabilistic Combination of Link and Content Information in PageRank'],,,,0,0,6,"m: 3,
n: 6",$O(mn)$,20,"$n$: number of pages
$m$: number of hyperlinks?
$l$: number of words in lexicon",n,,,Word RAM,words,3,"n: 3,
l: 3",$O(nl)$,See paper (noting that sum $d_q$ can be as high as $O(nl)$),0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,FALSE
153,Link Analysis,1,Link Analysis,Link Analysis,802,,,1,1,$O(mn)$,,,[https://dl.acm.org/doi/10.1145/775152.775202 Tomlin (2003)],Tomlin,2003,https://dl.acm.org/doi/10.1145/775152.775202,10.1145/775152.775202,['John A. Tomlin'],1,['A new paradigm for ranking pages on the world wide web'],,,,0,0,6,"m: 3,
n: 6",$O(mn)$,20,"$n$: number of pages
$m$: number of operations per page?",n,,,Word RAM,words,3,n: 3,$O(n)$?,Generally computes $O(n)$ values per iteration (row + column sums and their ratios); algorithm can be smart about intermediate calculations as to not use more space asymptotically,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,FALSE
153,Link Analysis,1,Link Analysis,Link Analysis,803,,,1,1,$O(mn)$,,,[https://homes.cs.washington.edu/~karlin/papers/web-search.pdf Achlioptas (2001)],Achlioptas,2001,https://homes.cs.washington.edu/~karlin/papers/web-search.pdf,,"['Dimitris Achlioptas', 'Amos Fiat', 'Anna R. Karlin', 'Frank McSherry']",4,['Web Search Via Hub Synthesis'],,,,0,0,6,"m: 3,
n: 6",$O(mn)$,20,"$n$: number of pages
$m$: number of operations per page?
$l$: number of words in lexicon",n,,,Word RAM,words,5,"n: 5,
l: 5",$O((n+l)^2)$?,Computes a constant number of SVDs of $O((n+l)^2)$-sized matrices,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,FALSE
103,Distributed Locking Algorithms,1,,Distributed Locking Algorithms,805,,0,1,1,$O(n)$,,,[https://dl.acm.org/doi/abs/10.1145/74851.74870 Leases (Cary G Gray and David R Cheriton) (1989)],Leases (Cary G Gray and David R Cheriton),1989,https://dl.acm.org/doi/abs/10.1145/74851.74870,10.1145/74851.74870,"['Cary G Gray', 'David R Cheriton']",2,['Leases: an efficient fault-tolerant mechanism for distributed file cache consistency'],2,0,https://web.stanford.edu/class/cs240/readings/89-leases.pdf,1,0,3,n: 3,$O(n)$,,"$n$: number of clients?
$f$: number of files?",n,,,,words,1,"n: 1,
f: 3",$O(f)$?,Generally need to keep track of one lease/lock per file (exclusivity),1,0,,0,,0,,0,0,,0,0,(see below),,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Operating Systems,FALSE
103,Distributed Locking Algorithms,1,,Distributed Locking Algorithms,806,,0,1,1,$O(n)$,,,[https://dl.acm.org/doi/10.5555/1298455.1298487 Chubby (Mike Burrows) (2006)],Chubby (Mike Burrows),2006,https://dl.acm.org/doi/10.5555/1298455.1298487,,['Mike Burrows'],1,['The Chubby lock service for loosely-coupled distributed systems'],,,,0,0,3,n: 3,$O(n)$,,"$n$: number of clients?
$f$: number of files?",n,,,,words,1,"n: 1,
f: 3",$O(f)$?,Generally need to keep track of one lock per file (exclusivity),1,0,,0,,0,,0,0,,0,0,"https://martin.kleppmann.com/2016/02/08/how-to-do-distributed-locking.html

https://redis.io/topics/distlock

https://medium.com/coinmonks/chubby-a-centralized-lock-service-for-distributed-applications-390571273052",,,,,,,,,,,1000,,,,,,,,,6,,,Operating Systems,FALSE
103,Distributed Locking Algorithms,0.001,#N/A,Consensus,807,,0,1,1,$O(n)$,,,[https://www.cs.utexas.edu/~lorenzo/corsi/cs380d/papers/p225-chandra.pdf Tushar Deepak Chandra and Sam Toueg (1996)],Tushar Deepak Chandra and Sam Toueg,1996,https://www.cs.utexas.edu/~lorenzo/corsi/cs380d/papers/p225-chandra.pdf,,"['Tushar Deepak Chandra', 'Sam Toueg']",2,['Unreliable Failure Detectors for Reliable Distributed Systems'],,,,0,0,3,n: 3,$O(n)$,,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,(see above),,,,,,,,,,,1000,,,,,,,,,6,,,Operating Systems,FALSE
104,Cyclic Peptide Sequencing Problem,2,,Cyclic Peptide Sequencing Problem,816,,,1,1,$O(k^{O(n)} \text{poly}(n))$,,,[ Brute force (1987)],Brute force,1987,,,[],0,,1,1,,1,0,8,n: 8,$O(k^{O(n)} \text{poly}(n))$,,"$n$: size of peptide, in daltons
$m$: number of elements in experimental spectrum
$k$: number of amino acids",n,,,Word/Real RAM,words,3,n: 3,$O(n)$,Keeps track of current amino acid sequence being checked,1,0,,0,,0,,0,0,,0,0,https://averyparkinson23.medium.com/sequencing-antibiotics-using-bioinformatics-2af1373ee009,,,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Bioinformatics,FALSE
104,Cyclic Peptide Sequencing Problem,2,,Cyclic Peptide Sequencing Problem,817,Improvement on brute force (despite not doing better asymptotically),,1,1,$O(k^{O(n)} \text{poly}(n))$,,,[ Branch and bound (1993)],Branch and bound,1993,,,[],0,,1,1,,0,0,8,n: 8,$O(k^{O(n)} \text{poly}(n))$,,"$n$: size of peptide, in daltons
$m$: number of elements in experimental spectrum
$k$: number of amino acids",n,,,Word/Real RAM,words,8,n: 8,$O(k^{O(n)})$,Keeps track of all possible not fully expanded amino acid sequences so far,1,0,,0,,0,,0,0,,0,0,https://github.com/xuwd11/Coursera-Bioinformatics/blob/master/23_04_CyclopeptideSequencing.py,,,,,,,,,,,9965,100.3512293,,19931568.57,50171.66594,,29897352854,33447777.3,,4,,,Bioinformatics,FALSE
107,Point-in-Polygon,2,Point-in-Polygon,Point-in-Polygon,830,,,1,1,$O(n)$,,,[https://dl.acm.org/doi/pdf/10.1145/368637.368653 Ray casting algorithm Shimrat; M (1962)],Ray casting algorithm Shimrat; M,1962,https://dl.acm.org/doi/pdf/10.1145/368637.368653,10.1145/368637.368653,['M. Shimrat'],1,['Algorithm 112: Position of point relative to polygon'],7,0,,1,0,3,n: 3,$O(n)$,10,$n$: number of edges of polygon,n,,,Real RAM,words,1,n: 1,$O(1)$,Only need to keep track of ray direction and how many polygon sides intersect with the ray,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Image Processing,FALSE
107,Point-in-Polygon,2,Point-in-Polygon,Point-in-Polygon,831,,,1,1,$O(n)$,,,[https://doi.org/10.1007/BF01934125 Nordbeck and Rystedt (Grid Method) (1967)],Nordbeck and Rystedt (Grid Method),1967,https://doi.org/10.1007/BF01934125,10.1007/BF01934125,"['Stig Nordbeck', 'Bengt Rystedt']",2,['Computer cartography point-in-polygon programs'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of edges of polygon,n,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0,Real RAM,words,3,n: 3,$O(n)$,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0,0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing,FALSE
107,Point-in-Polygon,2,Point-in-Polygon,Point-in-Polygon,832,,,1,1,$O(n \log n)$,,,[https://doi.org/10.1016/0098-3004(78)90085-7 Salomon (Swath Method) (1978)],Salomon (Swath Method),1978,https://doi.org/10.1016/0098-3004(78)90085-7,10.1016/0098-3004(78)90085-7,['Kenneth B. Salomon'],1,['An efficient point-in-polygon algorithm'],,,,0,0,4,n: 4,$O(n \log n)$,11,$n$: number of edges of polygon,n,,,Real RAM,words,5,n: 5,$O(n^2)$,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0,0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,,,,,,,,,,6,,,Image Processing,FALSE
107,Point-in-Polygon,2,Point-in-Polygon,Point-in-Polygon,833,,,1,1,$O(n)$,,,[https://doi.org/10.1007/BF01934125 Nordbeck and Rystedt (Sum of area) (1967)],Nordbeck and Rystedt (Sum of area),1967,https://doi.org/10.1007/BF01934125,10.1007/BF01934125,"['Stig Nordbeck', 'Bengt Rystedt']",2,['Computer cartography point-in-polygon programs'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of edges of polygon,n,,,Real RAM,words,1,n: 1,$O(1)$,Only need to keep track of current triangle and total area sum,1,0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing,FALSE
107,Point-in-Polygon,2,Point-in-Polygon,Point-in-Polygon,834,,,1,1,$O(n)$,,,[http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf Preparata and Shamos (Wedge) (1985)],Preparata and Shamos (Wedge),1985,http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf,,"['Franco P. Preparata', 'Michael Ian Shamos']",2,['Computational Geometry: An Introduction'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of edges of polygon,n,,,Real RAM,words,3,n: 3,$O(n)$,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,0,0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing,FALSE
107,Point-in-Polygon,2,Point-in-Polygon,Point-in-Polygon,835,,,1,1,$O(n)$,,,[https://doi.org/10.1080/02693798708927823 Saalfeld (Sign of offset) (1987)],Saalfeld (Sign of offset),1987,https://doi.org/10.1080/02693798708927823,10.1080/02693798708927823,['ALAN SAALFELD'],1,"[""Technical note It doesn't make me nearly as CROSS Some advantages of the point-vector representation of line segments in automated cartography""]",,,,0,0,3,n: 3,$O(n)$,10,$n$: number of edges of polygon,n,,,Real RAM,words,1,n: 1,$O(1)$,Only need to keep track of current sides (2) being looked at,1,0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing,FALSE
107,Point-in-Polygon,2,Point-in-Polygon,Point-in-Polygon,836,,,1,1,$O(n)$,,,[http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf Preparata and Shamos (Intersection sum of angle) (1985)],Preparata and Shamos (Intersection sum of angle),1985,http://www.cs.kent.edu/~dragan/CG/CG-Book.pdf,,"['Franco P. Preparata', 'Michael Ian Shamos']",2,['Computational Geometry: An Introduction'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of edges of polygon,n,,,Real RAM,words,1,n: 1,$O(1)$,Only need to keep track of current angle and cumulative angle sum,1,0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing,FALSE
107,Point-in-Polygon,2,Point-in-Polygon,Point-in-Polygon,837,,,1,1,$O(n)$,,,[https://doi.org/10.1007/BF01934125 Nordbeck and Rystedt (Orientation) (1967)],Nordbeck and Rystedt (Orientation),1967,https://doi.org/10.1007/BF01934125,10.1007/BF01934125,"['Stig Nordbeck', 'Bengt Rystedt']",2,['Computer cartography point-in-polygon programs'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of edges of polygon,n,,,Real RAM,words,1,n: 1,$O(1)$,Only need to keep track of current side being looked at,1,0,,0,,0,,0,0,,0,0,https://ir.nctu.edu.tw/bitstream/11536/749/1/A1997WM15100010.pdf,,,,,,,,,,,1000,,,,,,,,,6,,,Image Processing,FALSE
110,Clock Synchronization in Distributed Systems,2,,Clock Synchronization in Distributed Systems,879,,0,1,1,$O(n)$,,,[https://ieeexplore.ieee.org/document/1281624 ASP (2005)],ASP,2005,https://ieeexplore.ieee.org/document/1281624,,"['Jang-Ping Sheu', 'Chih-Min Chao', 'Ching-Wen Sun']",3,['A clock synchronization algorithm for multi-hop wireless ad hoc networks'],1,1,,1,0,3,n: 3,$O(n)$,10,$n$: number of nodes in network,n,,,Word/Real RAM (per node),words,3,n: 3,$O(n)$ (per node),"Each node needs to keep track of $O(1)$ information about itself, and $O(1)$ information per neighbor for synchronization purposes",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Operating Systems,FALSE
110,Clock Synchronization in Distributed Systems,1,,Clock Synchronization in Distributed Systems,880,,0,1,1,$O(n)$,,,[https://www.researchgate.net/publication/224306349_Clock-Sampling_Mutual_Network_Synchronization_for_Mobile_Multi-hop_Wireless_Ad_Hoc_Networks Clock-sampling mutual network synchronization (2007)],Clock-sampling mutual network synchronization,2007,https://www.researchgate.net/publication/224306349_Clock-Sampling_Mutual_Network_Synchronization_for_Mobile_Multi-hop_Wireless_Ad_Hoc_Networks,,"['Carlos Rentel', 'T. Kunz']",2,['Clock-Sampling Mutual Network Synchronization for Mobile Multi-hop Wireless Ad Hoc Networks'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of nodes in network,n,,,Word/Real RAM (per node),words,1,n: 1,$O(1)$? (per node),"Only needs to keep track of multiplicative correction $s$, its own clocks, and possibly $O(1)$ other info",1,0,,0,,0,,0,0,,0,0,,,,,,1,9,1,99,1,999,1000,,,,,,,,,6,,,Operating Systems,FALSE
110,Clock Synchronization in Distributed Systems,1,,Clock Synchronization in Distributed Systems,881,,0,1,1,$O(n)$,,,[https://ieeexplore.ieee.org/document/4359404 MATSF (2004)],MATSF,2004,https://ieeexplore.ieee.org/document/4359404,,"['Dong Zhou', 'Ten H. Lai']",2,['An Accurate and Scalable Clock Synchronization Protocol for IEEE 802.11-Based Multihop Ad Hoc Networks'],,,,0,0,3,n: 3,$O(n)$,10,$n$: number of nodes in network,n,,,Word/Real RAM (per node),words,3,n: 3,$O(n)$? (per node),"Each node needs to keep track of $O(1)$ information about itself, and $O(1)$ information per neighbor for synchronization purposes",1,0,,0,,0,,0,0,,0,0,,,,,,1000,,1000000,,1000000000,,1000,,,,,,,,,6,,,Operating Systems,FALSE
116,d-Neighborhood of a String,2,,d-Neighborhood of a String,911,,0,1,1,"$O(f_{bin}(\sigma-1, n, d))$ where $f_{bin}(x, y, z) = \sum_{i=0}^z \binom{y}{i}x^i$",Any distribution,(output is of that size),[http://rosalind.info/problems/ba1n/ Iterative naive (1940)],Iterative naive,1940,http://rosalind.info/problems/ba1n/,,['Rosalind Team'],0,['Generate the d-Neighborhood of a String'],1,1,,1,0,8,n: 8,"$O(f_{bin}(\sigma-1, n, d))$ where $f_{bin}(x, y, z) = \sum_{i=0}^z \binom{y}{i}x^i$",,"$n$: length of string
$d$: neighborhood distance threshold
$\sigma$: size of alphabet",n,,,Word RAM,words,3,n: 3,$O(n)$,"Keep track of which indices the differing letters are on, along with which set of letters are replacing the letters in these indices",1,0,,0,,0,,0,0,,0,0,http://rosalind.info/problems/ba1n/,,,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Bioinformatics,FALSE
117,Maximum Cut,2,Maximum Cut,Maximum Cut,,,,1,1,$O(m 2^n)$,,,[ Brute Force (1975)],Brute Force,1975,,,[],0,,1,1,,1,0,8,n: 8,$O(m 2^n)$,1020,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,,,,,"V:E
3:4",,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
117,Maximum Cut,0.001,#N/A,Maximum Cut for Planar Graphs,912,,,1,1,$O(n^4)$?,,,[https://web.eecs.umich.edu/~pettie/matching/Hadlock-maxcut-planar-graph-reduction-to-T-join.pdf Hadlock (1975)],Hadlock,1975,https://web.eecs.umich.edu/~pettie/matching/Hadlock-maxcut-planar-graph-reduction-to-T-join.pdf,,['F. Hadlock'],0,['FINDING A MAXIMUM CUT OF A PLANAR GRAPH IN POLYNOMIAL TIME'],1,1,,1,0,7,n: 7,$O(n^4)$?,400,"$n$: number of vertices
$m$: number of edges",n,"Derived: transformation to G_c (in original paper) requires O(n^2) time; uses Edmond's O(mn^2) Maximum Weight Matching algorithm on G_c, which is a complete graph on O(n) vertices",1,Word RAM,words,5,n: 5,$O(n^2)$?,Transformation to $G_c$ and keeping track of edge weights requires $O(n^2)$ space,1,0,,0,,0,,0,0,,0,0,,,,,"V:E
3:4",,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
117,Maximum Cut,2,,"Maximum Cut, Approximate",913,,,1,1,$O(n)$?,,,[https://rajsain.files.wordpress.com/2013/11/randomized-algorithms-motwani-and-raghavan.pdf Motwani & Raghavan (1995)],Motwani & Raghavan,1995,https://rajsain.files.wordpress.com/2013/11/randomized-algorithms-motwani-and-raghavan.pdf,,"['Rajeev Motwani', 'Prabhakar Raghavan']",2,['Randomized Algorithms'],,,,0,0,3,n: 3,$O(n)$?,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,3,n: 3,$O(n)$,Keeps track of current coloring/random assignment,1,0,,1,Monte Carlo,1,$0.5$,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,TRUE
117,Maximum Cut,2,,"Maximum Cut, Approximate",914,,,1,1,$O(mn)$?,,,[http://lib.ysu.am/open_books/413311.pdf Mitzenmacher & Upfal (2005)],Mitzenmacher & Upfal,2005,http://lib.ysu.am/open_books/413311.pdf,,"['Michael Mitzenmacher', 'Eli Upfal']",2,['Probability and Computing: Randomization and Probabilistic Techniques in Algorithms and Data Analysis'],,,,0,0,6,"m: 3,
n: 6",$O(mn)$?,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,3,n: 3,$O(n)$,Keeps track of current coloring/assignment,1,0,,0,,1,$0.5$,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
117,Maximum Cut,2,,"Maximum Cut, Approximate",915,,,1,1,$O(n^2)$?,,,"[https://doc.lagout.org/science/0_Computer%20Science/2_Algorithms/Handbook%20of%20Approximation%20Algorithms%20and%20Metaheuristics%20%5BGonzalez%202007-01-05%5D.pdf Khuller; Raghavachari & Young, ""Greedy Methods"" (2007)]","Khuller; Raghavachari & Young, ""Greedy Methods""",2007,https://doc.lagout.org/science/0_Computer%20Science/2_Algorithms/Handbook%20of%20Approximation%20Algorithms%20and%20Metaheuristics%20%5BGonzalez%202007-01-05%5D.pdf,,"['Samir Khuller', 'Balaji Raghavachari', 'Neal E. Young']",3,['Greedy Methods'],,,,1,2->3,5,n: 5,$O(n^2)$?,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,3,n: 3,$O(n)$,Keeps track of current coloring/assignment,1,0,,0,,1,$0.5$,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
117,Maximum Cut,1,,"Maximum Cut, Approximate",916,,,1,1,$O(n^3 \log m)$,,,"[https://math.mit.edu/~goemans/PAPERS/maxcut-jacm.pdf Goemans, Williamson (1995)]","Goemans, Williamson",1995,https://math.mit.edu/~goemans/PAPERS/maxcut-jacm.pdf,,"['Michel X. Goemans', 'David P. Williamson']",2,['Improved Approximation Algorithms for Maximum Cut and Satisfiability Problems Using Semidefinite Programming'],,,,1,1->2,6.01,n: 6.01,$O(n^3 \log m)$,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$?,Each vertex keeps track of $O(n)$-sized vector,1,0,,0,,1,$\approx 0.878$,0,0,,0,0,https://link.springer.com/content/pdf/10.1007/978-3-642-58412-1.pdf?pdf=button,,,,,,,,,,,,,,,,,,,,1,,,Combinatorics,TRUE
117,Maximum Cut,0.001,,"Maximum Cut, Approximate",917,,,1,1,$O(\text{poly}(n))$,,,[https://pubsonline.informs.org/doi/epdf/10.1287/ijoc.2017.0798 Dunning; Gupta & Silberholz (2018)],Dunning; Gupta & Silberholz,2018,https://pubsonline.informs.org/doi/epdf/10.1287/ijoc.2017.0798,10.1287/ijoc.2017.0798,"['Iain Dunning', 'Swati Gupta', 'John Silberholz']",3,['What Works Best When? A Systematic Evaluation of Heuristics for Max-Cut and QUBO'],1,1,https://pubsonline.informs.org/doi/pdf/10.1287/ijoc.2017.0798,1,3->4,7,"m: 7,
n: 7",$O(\text{poly}(n))$,,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,#VALUE!,,,,,,,0,,1,,1,0,,0,0,https://websites.umich.edu/~josilber/SECM_clean.pdf,,,,,,,,,,,244897.9592,Inf,,244897959184,Inf,,2.44898E+17,Inf,,1,,,Combinatorics,TRUE
118,Wiener Index,1,,Minimum Wiener Connector problem,918,,,1,1,$O(q(m \log(n)+n \log^2(n)))$,,,[https://arxiv.org/abs/1504.00513 Ruchansky (2015)],Ruchansky,2015,https://arxiv.org/abs/1504.00513,10.1145/2723372.2749449,"['Natali Ruchansky', 'Francesco Bonchi', 'David Garc√≠a-Soriano', 'Francesco Gullo', 'Nicolas Kourtellis']",5,['The Minimum Wiener Connector Problem'],1,1,https://arxiv.org/pdf/1504.00513.pdf,1,0,5.01,n: 5.01,$O(q(m \log(n)+n \log^2(n)))$,,"$n$: number of vertices
$m$: number of edges
$q$: number of query vertices",n,,,Word RAM,words,5,"n: 5,
q: 3,
m: 4",$O(q(m+n \log n))$?,"Keeps track of $O(qm)$ shortest-path distances and $O(q \log n)$ approximate Steiner trees, each of size $O(n)$",1,0,,0,,1,$O(1)$,0,0,,0,0,https://en.wikipedia.org/wiki/Wiener_connector,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
119,Determinant of Matrices with Integer Entries,2,Determinant of Matrices with Integer Entries,Determinant of Matrices with Integer Entries,919,,,1,1,$O(n^5 L^2 (\log(n)^2 + L^2))$,Any distribution of values?,(behavior same across all inputs),[https://www.ams.org/journals/mcom/1968-22-103/S0025-5718-1968-0226829-0/S0025-5718-1968-0226829-0.pdf Bareiss algorithm (1968)],Bareiss algorithm,1968,https://www.ams.org/journals/mcom/1968-22-103/S0025-5718-1968-0226829-0/S0025-5718-1968-0226829-0.pdf,,['Erwin H. Bareiss'],1,['Sylvester's Identity and Multistep Integer-Preserving Gaussian Elimination'],,,,1,0,5.52,"n: 7,
L: 7,
n^2: 5.52",$O(n^5 L^2 (\log(n)^2 + L^2))$,52,"$n$: dimension of matrix
$L$: maximum length (in bits) of any entry",n^2,,,Word RAM? (without O(1) multiplication),bits,4.51,"n: 6,
L: 3,
n^2: 4.51",$O(n^2(n\log(n)+nL))$,Keeps track of $O(n^2)$ entries that have absolute value at most $O(n^{n/2}2^{nL})$,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Bareiss_algorithm,,,,,,,,,,,6.2801E+20,1,,2.80003E+42,1,,6.52388E+63,1,,2,,,Numerical Analysis,FALSE
119,Determinant of Matrices with Integer Entries,2,Determinant of Matrices with Integer Entries,Determinant of Matrices with Integer Entries,920,,,1,1,$O(n^4 L (\log(n) + L) \log(\log(n) + L))$,Any distribution of values?,(behavior same across all inputs),[- Bareiss algorithm with fast multiplication (1968)],Bareiss algorithm with fast multiplication,1968,-,,[],0,,,,,1,0,5.011,"n: 7,
L: 5.01,
n^2: 5.011",$O(n^4 L (\log(n) + L) \log(\log(n) + L))$,41.1,"$n$: dimension of matrix
$L$: maximum length (in bits) of any entry",n^2,,,Word RAM? (without O(1) multiplication),bits,4.51,"n: 6,
L: 3,
n^2: 4.51",$O(n^2(n\log(n)+nL))$,Keeps track of $O(n^2)$ entries that have absolute value at most $O(n^{n/2}2^{nL})$,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Bareiss_algorithm,,,,,,,,,,,100661655579702,6238821.104,,1.3259E+29,21117970662591,,1.51652E+44,4.30188E+19,,2,,,Numerical Analysis,FALSE
120,Integer Relation,2,Integer Relation,Integer Relation,921,,,1,1,$O(n^3)$,,,[https://www.ams.org/journals/bull/1979-01-06/S0273-0979-1979-14691-3/S0273-0979-1979-14691-3.pdf Ferguson–Forcade algorithm (1979)],Ferguson–Forcade algorithm,1979,https://www.ams.org/journals/bull/1979-01-06/S0273-0979-1979-14691-3/S0273-0979-1979-14691-3.pdf,,"['H. R. P. FERGUSON', 'R. W. FORCADE']",2,['GENERALIZATION OF THE EUCLIDEAN ALGORITHM FOR REAL NUMBERS TO ALL DIMENSIONS HIGHER THAN TWO'],,,,1,0,6,n: 6,$O(n^3)$,30,$n$: number of real numbers to find integer relation for,n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses auxiliary $n\times n$ matrices,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,1,,1E+18,1,,1E+27,1,,3,,,Numerical Analysis,FALSE
120,Integer Relation,2,Integer Relation,Integer Relation,922,Lattice-based,,1,1,$O(n^4)$,,,[https://www.math.leidenuniv.nl/~hwl/PUBLICATIONS/1982f/art.pdf LLL algorithm (1982)],LLL algorithm,1982,https://www.math.leidenuniv.nl/~hwl/PUBLICATIONS/1982f/art.pdf,,"['A. K. Lenstra', 'H. W. Lenstra, Jr.', 'L. Lovasz']",3,['Factoring Polynomials with Rational Coefficients'],,,,0,0,7,n: 7,$O(n^4)$,40,$n$: number of real numbers to find integer relation for,n,https://www.math.leidenuniv.nl/~hwl/PUBLICATIONS/1982f/art.pdf,0,Word RAM,words,5,n: 5,$O(n^2)$,"Derived: Uses $n$ auxiliary vectors each of length $n$, as well as an $n\times n$ matrix",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Numerical Analysis,FALSE
120,Integer Relation,2,Integer Relation,Integer Relation,924,Partial Sum of Squares,,1,1,$O(n^3)$,,,[https://www.ams.org/journals/mcom/1989-53-188/S0025-5718-1989-0979934-9/S0025-5718-1989-0979934-9.pdf PSOS algorithm (1988)],PSOS algorithm,1988,https://www.ams.org/journals/mcom/1989-53-188/S0025-5718-1989-0979934-9/S0025-5718-1989-0979934-9.pdf,,"['David H. Bailey', 'Helaman R. P. Ferguson']",2,['Numerical Results on Relations Between Fundamental Constants Using a New Algorithm'],,,,0,0,6,n: 6,$O(n^3)$,30,$n$: number of real numbers to find integer relation for,n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses multiple $n\times n$ auxiliary matrices,1,0,,0,,0,,0,0,,0,0,"Helaman Ferguson, ""PSOS: A New Integral Relation Finding Algorithm Involving Partial Sums of Squares and No Square Roots""",,,,,,,,,,,1000000000,,,,,,,,,3,,,Numerical Analysis,FALSE
120,Integer Relation,2,Integer Relation,Integer Relation,925,Partial Sum of Squares using QR decomposition,,1,1,$O(n^3)$,,,[https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-00995-3/S0025-5718-99-00995-3.pdf PSLQ algorithm (1992)],PSLQ algorithm,1992,https://www.ams.org/journals/mcom/1999-68-225/S0025-5718-99-00995-3/S0025-5718-99-00995-3.pdf,,"['HELAMAN R. P. FERGUSON', 'DAVID H. BAILEY', 'STEVE ARNO']",3,"['ANALYSIS OF PSLQ, AN INTEGER RELATION FINDING ALGORITHM']",,,,0,0,6,n: 6,$O(n^3)$,30,$n$: number of real numbers to find integer relation for,n,,,Word RAM,words,5,n: 5,$O(n^2)$,Derived: Uses multiple $n\times n$ auxiliary matrices,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000000,,,,,,,,,3,,,Numerical Analysis,FALSE
122,Sequence-to-Graph Alignment,1,,Sequence-to-Graph Alignment,932,,,1,1,$O(m(V \log V + E))$,,,[https://link.springer.com/chapter/10.1007/3-540-63307-3_56 Amir et al. (1997)],Amir et al.,1997,https://link.springer.com/chapter/10.1007/3-540-63307-3_56,10.1007/3-540-63307-3_56,"['Amihood Amir', 'Moshe Lewenstein', 'Noa Lewenstein']",3,['Pattern matching in hypertext'],1,0,https://reader.elsevier.com/reader/sd/pii/S0196677499910635?token=B149D19F22DC42C8DCC1DFAA76A22B88E61FC2018BF3ED1937F7C5951F9BD810C4726C3153D36F697AE499721F3422A1,1,0,6,"V: 6,
E: 3,
m: 3,
N: 6",$O(m(n \log m + E))$,,"$V$: number of vertices in original hypertext graph
$E$: number of edges in original hypertext graph
$m$: length of pattern
$n$: number of vertices in converted graph (total text size)
$e$: number of edges in converted graph",N,,,Word RAM,words,6,"m: 3,
n: 6,
N: 6",$O(mn)$,https://www.sciencedirect.com/science/article/pii/S0304397599003333,0,0,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,"V:E
2:3
m = 300",120000,,120000000,,120000000000,,1217262.743,1,,2413156857,1,,3609050971092,1,,3,,,Combinatorics,FALSE
122,Sequence-to-Graph Alignment,1,,Sequence-to-Graph Alignment,933,,,1,1,$O(n(V + E))$,,,[https://www.sciencedirect.com/science/article/pii/S0304397599003333 Navarro (2000)],Navarro,2000,https://www.sciencedirect.com/science/article/pii/S0304397599003333,,['Gonzalo Navarro'],1,['Improved approximate pattern matching on hypertext'],3,1,https://reader.elsevier.com/reader/sd/pii/S0304397599003333?token=C0E6BDF7BA98CD5C338EDB86675CB3A29AF44F5B046E169EE0F115788255757C815F0F0307EAF080CDF9A9DE7AA37764,1,3->4,5,"V: 5,
E: 3,
m: 3,
N: 5",$O(n(V + E))$,,"total text size $n$, vertices $V$, edges $E$",N,,,Word RAM,words,3,"V: 3,
N: 3",$O(V)$,https://www.sciencedirect.com/science/article/pii/S0304397599003333,0,1,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,400,5.694329501,400000,5.694329501,400000000,5.694329501,300000,4.057542476,0.5949767558,300000000,8.04385619,1.003648024,300000000000,12.0301699,1.291345542,3,,,Combinatorics,FALSE
122,Sequence-to-Graph Alignment,2,,Sequence-to-Graph Alignment,934,,,1,1,$O(m(V\log(mV) + E))$,,,[https://www.ncbi.nlm.nih.gov/pubmed/26589280 HybridSpades (2015)],HybridSpades,2015,https://www.ncbi.nlm.nih.gov/pubmed/26589280,10.1093/bioinformatics/btv688,"['Dmitry Antipov', 'Anton Korobeynikov', 'Jeffrey S. McLean', 'Pavel A. Pevzner']",4,['hybridSPAdes: an algorithm for hybrid assembly of short and long reads'],,,,0,0,7,"V: 7,
E: 3,
m: 4,
N: 7",$O(m(V \log(mV) + E))$,,"$m$: length of input sequence
$V$: number of vertices
$E$: number of edges",N,,,Word RAM,words,7,"m: 3,
V: 7,
E: 3,
N: 7",$O(m(V+E))$,,1,0,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,FALSE
122,Sequence-to-Graph Alignment,2,,Sequence-to-Graph Alignment,935,Dynamic Programming,,1,1,$O(mVE)$,,,[https://www.biorxiv.org/content/10.1101/124941v1.full V-ALIGN (2018)],V-ALIGN,2018,https://www.biorxiv.org/content/10.1101/124941v1.full,,"['Kavya Vaddadi', 'Naveen Sivadasan', 'Kshitij Tayal', 'Rajgopal Srinivasan']",4,['Sequence Alignment on Directed Graphs'],,,,0,0,6,"V: 6,
E: 3,
m: 3,
N: 6",$O(mVE)$,,"$m$: length of input sequence
$V$: number of vertices
$E$: number of edges",N,https://www.biorxiv.org/content/10.1101/124941v1.full,0,Word RAM,words,3,"V: 3,
m: 3,
N: 3",$O(mV)$,https://www.biorxiv.org/content/10.1101/124941v1.full,0,1,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,FALSE
122,Sequence-to-Graph Alignment,2,,Sequence-to-Graph Alignment,936,,,1,1,$O(V + mE)$,,,[https://www.biorxiv.org/content/10.1101/216127v1 Rautiainen and Marschall (2017)],Rautiainen and Marschall,2017,https://www.biorxiv.org/content/10.1101/216127v1,,"['Mikko Rautiainen', 'Tobias Marschall']",2,['Aligning sequences to general graphs in O(V + mE) time'],,,,0,0,5,"V: 5,
E: 3,
m: 3,
N: 5",$O(V + mE)$,,"$m$: length of input sequence
$V$: number of vertices
$E$: number of edges",N,https://www.biorxiv.org/content/10.1101/216127v1,0,Word RAM,words,3,"V: 3,
m: 2.5,
N: 3",$O(V\sqrt{m})$,https://www.biorxiv.org/content/10.1101/216127v1,0,1,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,FALSE
122,Sequence-to-Graph Alignment,2,,Sequence-to-Graph Alignment,937,,,1,1,$O(V + mE)$,,,"[https://www.biorxiv.org/content/10.1101/522912v1.full.pdf Jain, Chang (2019)]","Jain, Chang",2019,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,"['Chirag Jain', 'Haowen Zhang', 'Yu Gao', 'Srinivas Aluru']",4,['On the Complexity of Sequence to Graph Alignment'],,,,0,0,5,"V: 5,
E: 3,
m: 3,
N: 5",$O(V + mE)$,,"$m$: length of input sequence
$V$: number of vertices
$E$: number of edges",N,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,0,Word RAM,words,3,"V: 3,
N: 3",$O(V)$,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,0,1,,0,,0,,0,0,,0,0,https://www.biorxiv.org/content/10.1101/522912v1.full.pdf,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,FALSE
122,Sequence-to-Graph Alignment,2,,Sequence-to-Graph Alignment,938,,,1,1,$O(V + mE)$,,,"[https://www.ncbi.nlm.nih.gov/pubmed/30851095 Rautiainen, Marschall (2019)]","Rautiainen, Marschall",2019,https://www.ncbi.nlm.nih.gov/pubmed/30851095,,"['Mikko Rautiainen', 'Veli Mäkinen', 'Tobias Marschall']",3,['Bit-parallel sequence-to-graph alignment'],,,,0,0,5,"V: 5,
E: 3,
m: 3,
N: 5",$O(V + mE)$,,"$m$: length of input sequence
$V$: number of vertices
$E$: number of edges",N,https://www.ncbi.nlm.nih.gov/pubmed/30851095,0,Word RAM,words,3,"V: 3,
m: 3,
N: 3",$O(mV)$,"Derived: algorithm uses a $V$-sized array of bitvectors each of which is of length $m$, and also uses a priority queue which has at most $V$ elements. The precomputed pattern bitvectors also takes up $O(Vm)$ space.",1,0,,0,,0,,0,1,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,FALSE
123,Logarithm Calculations,2,Discrete Logarithm Over Finite Fields,Discrete Logarithm Over Finite Fields,939,,,1,1,$O(2^n)$,,,[NA Trial Multiplication (1940)],Trial Multiplication,1940,NA,,[],0,,,,,0,0,8,n: 8,$O(2^n)$,,$n$: number of digits/bits in the order of the finite group,n,,,Word RAM,words,1,n: 1,$O(1)$,"Derived: Each power $k$ that you try in the brute force search is size $O(\log n)$, which is $O(1)$ when considering $O(\log n)$ size words. Only need to keep track of one at a time.",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Discrete_logarithm#Algorithms,,,,,1,,1,,1,,Inf,,,,,,,,,1,,,Statistics,FALSE
123,Logarithm Calculations,2,Discrete Logarithm Over Finite Fields,Discrete Logarithm Over Finite Fields,940,,,1,1,$O(2^{\sqrt{n}})$,,,[https://doi.org/10.1090/pspum/020 Baby-step Giant-step (1971)],Baby-step Giant-step,1971,https://doi.org/10.1090/pspum/020,10.1090/pspum/020,['Daniel Shanks'],1,"['Class number, a theory of factorization, and genera']",,,,0,0,8,n: 8,$O(2^{\sqrt{n}})$,,$n$: number of digits/bits in the order of the finite group,n,,,Word RAM,words,8,n: 8,$O(2^{\sqrt{n}})$,Derived: Uses a hash table of this size,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Baby-step_giant-step,,,,,,,,,,,Inf,,,,,,,,,1,,,Statistics,FALSE
123,Logarithm Calculations,1,Discrete Logarithm Over Finite Fields,Discrete Logarithm Over Finite Fields,941,,,1,1,$O(\exp((1+o(1))(32n/9)^{1/3}(\log n)^{2/3}))$,,,[https://www.sciencedirect.com/science/article/pii/S0890540198927614 Function Field Sieve (FFS) (1999)],Function Field Sieve (FFS),1999,https://www.sciencedirect.com/science/article/pii/S0890540198927614,,"['Leonard M. Adleman', 'Ming-Deh A. Huang']",2,['Function Field Sieve Method for Discrete Logarithms over Finite Fields'],,,,0,0,8,n: 8,"$O(\exp((1+o(1))(32n/9)^{1/3}(\log n)^{2/3}))$, under assumption about numbers in a sequence behaving randomly in a given range",,$n$: number of digits/bits in the order of the finite group,n,,,,bits,3,n: 3,$O(n^{2/3})$?,same space as Number Field Sieve?,0,1,,0,,0,,0,0,,0,0,(runtime depends on heuristic arguments),,,,,,,,,,,Inf,,,,,,,,,1,,,Statistics,FALSE
123,Logarithm Calculations,1,Discrete Logarithm Over Finite Fields,"Discrete Logarithm Over Finite Fields, F_q",942,,,1,1,$O(e^{\sqrt{2n\log n}})$,,,[NA Index calculus algorithm (1922)],Index calculus algorithm,1922,NA,,[],0,,,,,1,0,8,n: 8,$O(e^{\sqrt{2n\log n}})$,,"$n$: number of digits/bits in the order of the finite group
$r$: size of factor base",n,,,RAM?,bits,3,"n: 3,
r: 5",$O(n+r^2)$?,See Dixon's algorithm for factoring integers; also works with an $O(r)\times O(r)$ sized matrix (to obtain discrete logs of primes in factor base),1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Index_calculus_algorithm,,,,,1000,,1000000,,1000000000,,Inf,1,,Inf,1,,Inf,1,,1,,,Statistics,FALSE
123,Logarithm Calculations,2,Discrete Logarithm Over Finite Fields,Discrete Logarithm Over Finite Fields,943,,,1,1,$O(\exp((1+o(1))(64n/9)^{1/3}(\log n)^{2/3}))$,,,[http://www.ams.org/notices/199612/pomerance.pdf Number Field Sieve (NFS) (1990)],Number Field Sieve (NFS),1990,http://www.ams.org/notices/199612/pomerance.pdf,,['Carl Pomerance'],1,['A Tale of Two Sieves'],,,,0,0,8,n: 8,"$O(\exp((1+o(1))(64n/9)^{1/3}(\log n)^{2/3}))$, under assumption about numbers in a sequence behaving randomly in a given range",,$n$: number of digits/bits in the order of the finite group,n,,,,bits,3,n: 3,$O(n^{2/3})$,http://www.ams.org/notices/199612/pomerance.pdf,0,1,,0,,0,,0,0,,0,0,"https://core.ac.uk/download/pdf/15590206.pdf

(runtime depends on heuristic arguments)",,,,,,,,,,,Inf,,,,,,,,,1,,,Statistics,FALSE
123,Logarithm Calculations,1,Discrete Logarithm Over Finite Fields,Discrete Logarithm Over Finite Fields,944,,,1,1,"$O(2^{\sqrt{n}})$, only for primes; does much better for composites",,,[https://dl.acm.org/citation.cfm?id=2269283 Pohlig-Hellman (1978)],Pohlig-Hellman,1978,https://dl.acm.org/citation.cfm?id=2269283,,"['S. Pohlig', 'M. Hellman']",2,['An improved algorithm for computing logarithms over GF(p) and its cryptographic significance'],,,,0,0,8,n: 8,$O(2^{\sqrt{n}})$,940,$n$: number of digits/bits in the order of the finite group,n,,,Word RAM,words,8,n: 8,$O(2^{\sqrt{n}})$ (though only for primes),A step in the algorithm involves using baby-steps giant-steps to compute discrete logs; the rest of the algorithm (including CRT and repeated powers) isn't as intensive,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Statistics,FALSE
123,Logarithm Calculations,1,Discrete Logarithm Over Finite Fields,Discrete Logarithm Over Finite Fields,945,,,1,1,$O(2^{n/2})$,,,[https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf Pollard's rho algorithm (1978)],Pollard's rho algorithm,1978,https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf,,['J. M. Pollard'],1,['Monte Carlo Methods for Index Computation (mod p)'],,,,0,0,8,n: 8,$O(2^{n/2})$,988,$n$: number of digits/bits in the order of the finite group,n,,,Word RAM,words,1,n: 1,$O(1)$,Stores a constant number of $O(n)$-bit values per iteration,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Statistics,FALSE
123,Logarithm Calculations,1,Discrete Logarithm Over Finite Fields,Discrete Logarithm Over Finite Fields,946,,,1,1,$O(2^n)$,,,[https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf Pollard's kangaroo algorithm (1978)],Pollard's kangaroo algorithm,1978,https://www.ams.org/mcom/1978-32-143/S0025-5718-1978-0491431-9/S0025-5718-1978-0491431-9.pdf,,['J. M. Pollard'],1,['Monte Carlo Methods for Index Computation (mod p)'],,,,0,0,8,n: 8,$O(2^n)$,1000,$n$: number of digits/bits in the order of the finite group,n,,,Word RAM,words,1,n: 1,$O(1)$,"Stores a constant number of $O(n)$-bit values ($a, b, x_i, d, x_N, y_i, d_i$) per iteration; assumes that the pseudorandom map is part of the input",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Pollard%27s_kangaroo_algorithm,,,,,,,,,,,Inf,,,,,,,,,1,,,Statistics,FALSE
129,Transitive Reduction Problem,2,Transitive Reduction Problem of Directed Graphs,Transitive Reduction Problem of Directed Graphs,958.5,,,1,1,$O(n^{\omega})$,Any reasonable nontrivial distribution,https://arxiv.org/abs/2202.08996,"[https://epubs.siam.org/doi/pdf/10.1137/0201008 Aho, Garey & Ullman (1972)]","Aho, Garey & Ullman",1972,https://epubs.siam.org/doi/pdf/10.1137/0201008,10.1137/0201008,"['A. V. Aho', 'M. R. Garey', 'J. D. Ullman']",3,['The Transitive Reduction of a Directed Graph'],,,,1,0,5.3728596,n: 5.3728596,$O(n^{\omega})$,,"$n$: number of vertices
$m$: number of edges
$\omega$: the exponent on boolean matrix multiplication",n,,,Word RAM,words,5,n: 5,$O(n^2)$,see (boolean) matrix multiplication,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,263633138.6,1,,6.95024E+16,1,,1.83231E+25,1,,3,,,Combinatorics,FALSE
129,Transitive Reduction Problem,2,Transitive Reduction Problem of Directed Graphs,Transitive Reduction Problem of Directed Graphs,959,,,1,1,$O(n^3)$,Any distribution/runtime same regardless of input,(same general behavior regardless of input),"[https://www.sciencedirect.com/science/article/pii/0167642389900397 Gries, Martin (1989)]","Gries, Martin",1989,https://www.sciencedirect.com/science/article/pii/0167642389900397,,"['David Gries', 'Alain J. Martin', 'Jan L.A. van de Snepscheut', 'Jan Tijmen Udding']",4,['An algorithm for transitive reduction of an acyclic graph'],,,,0,0,6,n: 6,$O(n^3)$,16,"$n$: number of vertices
$m$: number of edges",n,,,Word RAM,words,5,n: 5,$O(n^2)$,"Generally keeps track of $O(1)$ information for every pair $(u, v)$ of vertices? and not much additional information needed",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,3,,,Combinatorics,FALSE
131,Turnpike Problem,1,,Turnpike Problem,963,,,1,1,$O(2^n n \logn)$,,,[NA Outside-In algorithm (1991)],Outside-In algorithm,1991,NA,,[],0,,,,,1,0,8,n: 8,$O(2^n n \logn)$,,$n$: number of points,n,,,Word RAM,words,3,n: 3,$O(n)$,Seems like this just needs to keep track of current configuration being tested,1,0,,0,,0,,0,0,,0,0,http://hariharan-ramesh.com/ppts/turnpike.pdf,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,TRUE
132,n-Queens Problem,2,,Counting Solutions; Constructing solutions,964,,,1,1,$O(n^n)$,(no distribution to talk about here),(none),[ Naive Algorithm (1848)],Naive Algorithm,1848,,,[],0,,1,1,,1,0,8,"n: 8,
n^2: 8",$O(n^n)$,,$n$: size of chessboard,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$O(n)$,"Keep track of current configuration being tested, along with current count",1,0,,0,,0,,0,0,,0,0,https://web.northeastern.edu/seigen/11Magic/Books/Rouse%20Ball.pdf,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
132,n-Queens Problem,2,,Counting Solutions; Constructing solutions,965,,,1,1,$O(n!)$,(no distribution to talk about here),(none),[ Naive + 1 queen per row restriction (1850)],Naive + 1 queen per row restriction,1850,,,[],0,,,,,1,0,8,"n: 8,
n^2: 8",$O(n!)$,,$n$: size of chessboard,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$O(n)$,"Keep track of current configuration being tested, along with current count",1,0,,0,,0,,0,0,,0,0,https://web.northeastern.edu/seigen/11Magic/Books/Rouse%20Ball.pdf,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
132,n-Queens Problem,2,,Counting Solutions; Constructing solutions,966,,,1,1,$O(n!)$,(no distribution to talk about here),(none),[https://dl.acm.org/citation.cfm?id=1243380 Dijkstra (1972)],Dijkstra,1972,https://dl.acm.org/citation.cfm?id=1243380,,['Edsger W. Dijkstra'],1,['Chapter I: Notes on structured programming'],1,1,https://www.geeksforgeeks.org/n-queen-problem-backtracking-3/,1,0,8,"n: 8,
n^2: 8",$O(n!)$,,$n$: size of chessboard,n^2,,,Word RAM,words,2.5,"n: 3,
n^2: 2.5",$O(n)$,"Keep track of current configuration being tested and restrictions on where next queen can be placed, along with current count",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
132,n-Queens Problem,1,,Counting Solutions; Constructing solutions,967,,,1,1,$O(n!)$,(no distribution to talk about here),(none),[https://www.gutenberg.org/files/26839/26839-pdf.pdf Method of determinants (1874)],Method of determinants,1874,https://www.gutenberg.org/files/26839/26839-pdf.pdf,,['W. W. Rouse Ball'],1,['The Eight Queens Problem'],,,,0,0,8,"n: 8,
n^2: 8",$O(n!)$,,$n$: size of chessboard,n^2,,,Word RAM,words,#VALUE!,,,,,,,0,,0,,0,0,,0,0,https://web.northeastern.edu/seigen/11Magic/Books/Rouse%20Ball.pdf,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,FALSE
132,n-Queens Problem,2,,Counting Solutions; Constructing solutions,968,,,1,1,$O(n!)$,(no distribution to talk about here),(none),[ Gunther Determinants solution (1874)],Gunther Determinants solution,1874,,,[],0,,,,,0,0,8,"n: 8,
n^2: 8",$O(n!)$,,$n$: size of chessboard,n^2,,,Word RAM,words,8,"n: 8,
n^2: 8",$O(n!)$?,Seems like this one lists out all of the terms in the discriminant; presumably there is a better way but that amounts to the naive algorithm,1,0,,0,,0,,0,0,,0,0,https://web.northeastern.edu/seigen/11Magic/Books/Rouse%20Ball.pdf,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,FALSE
132,n-Queens Problem,2,,Counting Solutions,969,,,1,1,$O(8^n \text{poly}(n))$,(no distribution to talk about here),(none),"[http://www.cs.cornell.edu/~rdz/Papers/RZ-IPL92.pdf Rivin, Zabih (1992)]","Rivin, Zabih",1992,http://www.cs.cornell.edu/~rdz/Papers/RZ-IPL92.pdf,,"['Igor Rivin', 'Ramin Zabih']",2,['A dynamic programming solution to the n-queens problem'],,,,0,0,8,"n: 8,
n^2: 8",$O(8^n \text{poly}(n))$,,$n$: size of chessboard,n^2,,,Word RAM,words,8,"n: 8,
n^2: 8",$O(8^n n^2)$,http://www.cs.cornell.edu/~rdz/Papers/RZ-IPL92.pdf,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,FALSE
133,Median String Problem,2,,Median String Problem with Unbounded Alphabets,971,,,1,1,$2^{O(n)}$,Any distribution/runtime same regardless of input,(same general behavior regardless of input),[ Naive Solution (1965)],Naive Solution,1965,,,[],0,,1.5,0,https://link.springer.com/chapter/10.1007/3-540-44888-8_23,1,0,8,n: 8,$2^{O(n)}$,1000,"$n$: maximum of (number of strings, max length of one of the strings)",n,,,Word RAM,words,3,n:3,$O(n)$,"Keep track of current string being checked, current best string, and Levenshtein distances (which can be computed recursively using $O(n)$ space)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
134,Frequent Words with Mismatches Problem,1,,,972,,0,1,1,"$O(n f_{bin}(\sigma-1, k, d))$ where $f_{bin}(x, y, z) = \sum_{i=0}^z \binom{y}{i}x^i$",,,[ Naive solution (1940)],Naive solution,1940,,,[],0,,,,,1,0,8,n: 8,"$O(n f_{bin}(\sigma-1, k, d))$ where $f_{bin}(x, y, z) = \sum_{i=0}^z \binom{y}{i}x^i$",,"$n$: length of string
$k$: length of words
$d$: number of allowed mismatches
$\sigma$: size of alphabet",n,,,Word RAM,words,8,n: 8,"$O(max(n f_{bin}(\sigma-1, k, d), \sigma^k))$ auxiliary where $f_{bin}(x, y, z) = \sum_{i=0}^z \binom{y}{i}x^i$",Keep track of counts on at most that many words,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Combinatorics,FALSE
135,Tower of Hanoi,2,,Tower of Hanoi,973,,0,1,1,$O(2^n)$,(no distribution to talk about here),(none),[NA Iteration based (1883)],Iteration based,1883,NA,,[],0,,1,1,https://marcin-chwedczuk.github.io/iterative-solution-to-towers-of-hanoi-problem,1,0,8,n: 8,$O(2^n)$,,$n$: number of disks,n,,,Word RAM,bits,3,n: 3,$O(n)$,Only need to keep track of current configuration,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi&oldid=1239970840,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Combinatorics,FALSE
135,Tower of Hanoi,2,,Tower of Hanoi,974,,0,1,1,$O(2^n)$,(no distribution to talk about here),(none),[NA Recursion based (1883)],Recursion based,1883,NA,,[],0,,1,1,https://marcin-chwedczuk.github.io/iterative-solution-to-towers-of-hanoi-problem,1,0,8,n: 8,$O(2^n)$,,$n$: number of disks,n,,,Word RAM,bits,4,n: 4,$O(n \log n)$,"Need to keep track of an $O(n)$-sized recursive stack, each entry requiring $O(\log n)$ space (i.e. which tower size to manipulate)",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi&oldid=1239970840,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,FALSE
135,Tower of Hanoi,2,,Tower of Hanoi,975,,0,1,1,$O(2^n)$,(no distribution to talk about here),(none),[NA Non-recursion based (1883)],Non-recursion based,1883,NA,,[],0,,1,1,https://marcin-chwedczuk.github.io/iterative-solution-to-towers-of-hanoi-problem,1,0,8,n: 8,$O(2^n)$,,$n$: number of disks,n,,,Word RAM,bits,3,n: 3,$O(n)$,Only need to keep track of current configuration,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi&oldid=1239970840,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,FALSE
135,Tower of Hanoi,2,,Tower of Hanoi,976,,0,1,1,$O(2^n)$,(no distribution to talk about here),(none),[NA Gray-code based (1883)],Gray-code based,1883,NA,,[],0,,1,1,https://marcin-chwedczuk.github.io/iterative-solution-to-towers-of-hanoi-problem,1,0,8,n: 8,$O(2^n)$,,$n$: number of disks,n,,,Word RAM,bits,3,n: 3,$O(n)$,Need to keep track of an $n$-bit counter for Gray codes,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/w/index.php?title=Tower_of_Hanoi&oldid=1239970840,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,FALSE
135,Tower of Hanoi,2,,Tower of Hanoi,977,,0,1,1,$O(3^n)$,(no distribution to talk about here),(none),[https://books.google.com/books/about/Topics_in_Graph_Theory.html?id=pSv3XotPCQgC Hanoi graph (2008)],Hanoi graph,2008,https://books.google.com/books/about/Topics_in_Graph_Theory.html?id=pSv3XotPCQgC,,"['Wilfried Imrich', 'Sandi Klavzar', 'Douglas F Rall']",3,['Topics in Graph Theory: Graphs and Their Cartesian Product'],,,,0,0,8,n: 8,$O(3^n)$,,$n$: number of disks,n,,,Word RAM,bits,8,n: 8,$O(3^n)$,Graph is of size $O(3^n)$,1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Hanoi_graph,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,FALSE
136,The Frequent Words Problem,2,,The Frequent Words Problem,978,,,1,1,$O(k(n-k)^2)$,,,[ Naive solution (1940)],Naive solution,1940,,,[],0,,2,1,http://bioinformaticsalgorithms.com/data/debugdatasets/replication/FrequentWordsProblem.pdf,1,0,6,n: 6,$O(k(n-k)^2)$,30,"$n$: length of string
$k$: length of words
$\sigma$: size of alphabet",n,,,Word RAM,words,3,n: 3,"$O(\max(n, \sigma^k))$",Keep track of counts on at most $n-k+1$ or $\sigma^k$ words,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Statistics,FALSE
136,The Frequent Words Problem,1,,The Frequent Words Problem,1984,,,1,1,$O(k(n-k))$,any distribution?,needs to read entire string,[ Rabin-Karp (hashing-based) (1987)],Rabin-Karp (hashing-based),1987,,,[],0,,,,,0,0,5,n: 5,$O(k(n-k))$,20,"$n$: length of string
$k$: length of words
$\sigma$: size of alphabet",n,,,Word RAM,words,3,n: 3,"$O(\max(n, \sigma^k))$?",Keep track of counts on at most $n-k+1$ or $\sigma^k$ words,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Statistics,FALSE
137,Integral Equations,0.001,,,979,,0,1,1,$O(2^n)$,,,[ Naive Implementation (1800)],Naive Implementation,1800,,,[],0,,,,,1,0,8,n: 8,$O(2^n)$,,,n,,,,,#VALUE!,,,,,,,0,,0,,0,0,,0,0,https://www.sciencedirect.com/science/article/pii/S0016003209000428,,,,,,,,,,,Inf,1,,Inf,1,,Inf,1,,1,,,Numerical Analysis,FALSE
138,One-Way Hash Functions,1,,Unkeyed Hash Functions,980,,0,0,1,$O(n)$,any distribution?,needs to read entire string,[ MD5 (1991)],MD5,1991,,,[],0,,,,,1,0,3,n: 3,$O(n)$,10,$n$: length of string,n,,,Word RAM,bits,1,n: 1,$O(1)$?,"only need constant padding, 128-bit state being manipulated, and constant-sized non-linear functions (i.e. operating on $O(1)$ bits). Also based off of Merkle-Damgard construction",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography,FALSE
138,One-Way Hash Functions,1,,Unkeyed Hash Functions,981,,0,0,1,$O(n)$,any distribution?,needs to read entire string,[ SHA-1 (1993)],SHA-1,1993,,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,$n$: length of string,n,,,Word RAM,bits,1,n: 1,$O(1)$?,Based off of Merkel-Damgard construction (see MD5),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography,FALSE
138,One-Way Hash Functions,1,,Unkeyed Hash Functions,982,,0,0,1,$O(n)$,any distribution?,needs to read entire string,[ RIPEMD-160 (1996)],RIPEMD-160,1996,,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,$n$: length of string,n,,,Word RAM,bits,1,n: 1,$O(1)$?,Likely based off of Merkel-Damgard construction (see MD5),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography,FALSE
138,One-Way Hash Functions,1,,Unkeyed Hash Functions,983,,0,0,1,$O(n)$,any distribution?,needs to read entire string,[ bcrypt (1999)],bcrypt,1999,,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,$n$: length of string,n,,,Word RAM,bits,1,n: 1,$O(1)$ auxiliary??,generally operates in the $O(1)$ scheme,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography,FALSE
138,One-Way Hash Functions,1,,,984,,0,0,1,$O(n)$,any distribution?,needs to read entire string,[ Whirlpool (2000)],Whirlpool,2000,,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,$n$: length of string,n,,,Word RAM,bits,1,n: 1,$O(1)$?,Based off of Merkel-Damgard construction (see MD5),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography,FALSE
138,One-Way Hash Functions,1,,Unkeyed Hash Functions,985,,0,0,1,$O(n)$,any distribution?,needs to read entire string,[ SHA-2 (2001)],SHA-2,2001,,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,$n$: length of string,n,,,Word RAM,bits,1,n: 1,$O(1)$?,Based off of Merkel-Damgard construction (see MD5),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography,FALSE
138,One-Way Hash Functions,1,,Unkeyed Hash Functions,986,,0,0,1,$O(n)$,any distribution?,needs to read entire string,[ SHA-3 (2015)],SHA-3,2015,,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,"$n$: length of string
$b$: width of bit blocks
$r$: rate parameter
$d$: output length",n,,,Word RAM,bits,1,"b: 3,
d: 3,
n: 1",$O(b+d)$ auxiliary?,"only need constant padding, $O(b)$-bit ""absorb"" state being manipulated, constant-sized non-linear functions (i.e. operating on $O(1)$ bits), and $O(d)$-sized ""squeezed"" state being manipulated. In practice $b$, $d$ are $O(1)$",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography,FALSE
138,One-Way Hash Functions,1,,Optional Key?,987,,0,0,1,$O(n)$,any distribution?,needs to read entire string,[ BLAKE2 (2012)],BLAKE2,2012,,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,$n$: length of string,n,,,Word RAM,bits,1,n: 1,$O(1)$?,"Generally processes the message in $O(1)$-sized chunks; parameters into the ""compress"" function are also technically $O(1)$-sized",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography,FALSE
139,Secret Sharing,1,,,988,,,1,1,$O(t^2)$ for secret computation? (requires polynomial interpolation),,,[ Shamir's scheme (1979)],Shamir's scheme,1979,,,[],0,,,,,1,0,5,"n: 5,
t: 5",$O(t^2)$ for secret computation? (requires polynomial interpolation),,"$n$: size of the group the secret is being shared with
$t$: threshold number of players",n,,,Word RAM,words,5,"n: 5,
t: 5","$O(1)$ per person, $O(t^2)$ to figure out secret?",Each person only needs to keep track of a single point ($O(1)$ info); figuring out secret depends on polynomial interpolation algorithm,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,1,,,1,,,1,,4,,,Cryptography,FALSE
139,Secret Sharing,1,,,989,,,1,1,$O(t^3)$ for secret computation? (requires linear solver),,,[ Blakley's scheme (1979)],Blakley's scheme,1979,,,[],0,,,,,0,0,6,"n: 6,
5: 6",$O(t^3)$ for secret computation? (requires linear solver),,"$n$: size of the group the secret is being shared with
$t$: threshold number of players",n,,,Word RAM,words,5,"n: 5,
t: 5","$O(t)$ per person, $O(t^2)$ to figure out secret","Each person needs to keep track of coefficients of hyperplane; figuring out secret requires $O(t)$ hyperplanes, with $O(t)$ coefficients",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,,,,,,,,,,4,,,Cryptography,FALSE
140,Solutions to Nonlinear Equations,1,Solutions to Nonlinear Equations,Solutions to Nonlinear Equations,990,,0,1,1,$O(\log((b-a)/\epsilon))$,,,[ Bisection method (-150)],Bisection method,-150,,,[],0,,,,,0,0,3,n_max: 3,$O(n_{max})$,10,"$\epsilon$: (additive) tolerance error
$a$, $b$: endpoint values, with $b>a$
$n_{max}$: maximum number of iterations",n_max,,,Word/Real RAM,words,1,n_max: 1,$O(1)$,"Store current endpoint values; iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis,FALSE
140,Solutions to Nonlinear Equations,1,Solutions to Nonlinear Equations,Solutions to Nonlinear Equations,991,,0,1,1,$O(n)$,,,[ Regula Falsi method (-200)],Regula Falsi method,-200,,,[],0,,,,,0,0,3,n_max: 3,$O(n_{max})$,10,"$\epsilon$: (additive) tolerance error
$a$, $b$: endpoint values, with $b>a$
$n_{max}$: maximum number of iterations",n_max,,,Word/Real RAM,words,1,n_max: 1,$O(1)$,"Store current endpoint values; iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis,FALSE
140,Solutions to Nonlinear Equations,1,Solutions to Nonlinear Equations,Solutions to Nonlinear Equations,992,,0,1,1,(order of convergence = $\phi$~1.618),,,[ Secant method (-1400)],Secant method,-1400,,,[],0,,1,1,,1,0,3,n_max: 3,$O(n_{max})$,10,"$\epsilon$: (additive) tolerance error
$a$, $b$: endpoint values, with $b>a$
$n_{max}$: maximum number of iterations",n_max,,,Word/Real RAM,words,1,n_max: 1,$O(1)$,"Store previous 2 estimates $x_i$ and $x_{i-1}$; iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Numerical Analysis,FALSE
140,Solutions to Nonlinear Equations,1,Solutions to Nonlinear Equations,Solutions to Nonlinear Equations,993,,0,1,1,(order of convergence = 2),,,[ Newton's method (1669)],Newton's method,1669,,,[],0,,,,,0,0,3,n_max: 3,$O(n_{max})$,10,"$\epsilon$: (additive) tolerance error
$a$, $b$: endpoint values, with $b>a$
$n_{max}$: maximum number of iterations",n_max,,,Word/Real RAM,words,1,n_max: 1,$O(1)$,"Store current estimate $x_i$ and the derivative $f'$ (assuming this takes $O(1)$ space); iterations take $O(1)$ time and thus $O(1)$ space, and space can be re-used across iterations",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Numerical Analysis,FALSE
141,Block Ciphers,1,,Block Ciphers,994,,0,0,1,$O(n)$,,,[NA Lucifer / DES (1976)],Lucifer / DES,1976,NA,,[],0,,,,,1,0,3,n: 3,$O(n)$,10,"$n$: text length (block size)
$k$: key length",n,,,Word RAM,bits,3,n: 3,$O(n)$?,"Network has a constant number of rounds and operates on $O(n)$ bits, thus structure should require $O(n)$ bits to describe",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/Data_Encryption_Standard,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography,FALSE
141,Block Ciphers,1,,Block Ciphers,995,,0,0,1,$O(n)$,,,[NA IDEA (1991)],IDEA,1991,NA,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,"$n$: text length (block size)
$k$: key length",n,,,Word RAM,bits,3,n: 3,$O(n)$?,"Network has a constant number of rounds and operates on $O(n)$ bits, thus structure should require $O(n)$ bits to describe",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/International_Data_Encryption_Algorithm,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography,FALSE
141,Block Ciphers,1,,Block Ciphers,996,,0,0,1,$O(n)$,,,[https://link.springer.com/chapter/10.1007/3-540-60590-8_7 RC5 (1994)],RC5,1994,https://link.springer.com/chapter/10.1007/3-540-60590-8_7,10.1007/3-540-60590-8_7,['Ronald L. Rivest'],1,['The RC5 encryption algorithm'],,,,0,0,3,n: 3,$O(n)$,10,"$n$: text length (block size)
$k$: key length
$r$: number of rounds
$w$: length of word",n,,,Word RAM,bits,1,"k: 3,
r: 3,
w: 3,
n: 1",$O(k+rw)$?,"Requires additional $O(k/w)$-length array of $O(w)$-size words (temporary working array) and $O(r)$-length array of $O(w)$-size words, as key-independent pseudorandom array.",1,0,,0,,0,,0,0,,0,0,https://en.wikipedia.org/wiki/RC5,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography,FALSE
141,Block Ciphers,1,,Block Ciphers,997,,0,0,1,$O(n)$,,,[https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf Rijndael / AES (2001)],Rijndael / AES,2001,https://csrc.nist.gov/csrc/media/projects/cryptographic-standards-and-guidelines/documents/aes-development/rijndael-ammended.pdf,,"['Joan Daemen', 'Vincent Rijmen']",2,['The Rijndael Block Cipher'],,,,0,0,3,n: 3,$O(n)$,10,"$n$: text length (block size)
$k$: key length",n,,,Word RAM,bits,3,n: 3,$O(n)$?,"Network generally operates on the $O(n)$ bits over $O(k)$ rounds, each round having roughly the same structure (so structure of rounds require $O(1)$ bits to describe)",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography,FALSE
141,Block Ciphers,1,,Block Ciphers,998,,0,0,1,$O(n)$,,,[https://link.springer.com/chapter/10.1007/3-540-58108-1_24 Blowfish (1993)],Blowfish,1993,https://link.springer.com/chapter/10.1007/3-540-58108-1_24,10.1007/3-540-58108-1_24,['Bruce Schneier'],1,"['Description of a new variable-length key, 64-bit block cipher (Blowfish)']",,,,0,0,3,n: 3,$O(n)$,10,"$n$: text length (block size)
$k$: key length",n,,,Word RAM,bits,3,n: 3,$O(n)$?,"Network has a constant number of rounds and operates on $O(n)$ bits, thus structure should require $O(n)$ bits to describe",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,6,,,Cryptography,FALSE
142,Polynomial Interpolation,1,2-D Polynomial Interpolation,2-D Polynomial Interpolation,999,,,1,1,$O(n^3)$,,,[ Gaussian elimination (-150)],Gaussian elimination,-150,,,[],0,,1,1,,1,0,8,n: 8,$O(n^3)$,30,$n$: number of points,n,,,Word/Real RAM,words,5,n: 5,$O(n^2)$,Requires computation of inverse of $O(n^2)$-sized Vandermonde matrix,1,0,,0,,0,,0,0,,0,0,,,,,,1000000,,1000000000000,,1E+18,,1000000000,1,,1E+18,1,,1E+27,1,,3,,,Numerical Analysis,FALSE
142,Polynomial Interpolation,1,2-D Polynomial Interpolation,2-D Polynomial Interpolation,1000,,,1,1,$O(n^2)$,,,[https://www.jstor.org/stable/2004623?origin=crossref&seq=5#metadata_info_tab_contents Bjorck (1970)],Bjorck,1970,https://www.jstor.org/stable/2004623?origin=crossref&seq=5#metadata_info_tab_contents,,"['Åke Björck', 'Victor Pereyra']",2,['Solution of Vandermonde Systems of Equations'],0.5,0,https://www.ams.org/journals/mcom/1970-24-112/S0025-5718-1970-0290541-1/S0025-5718-1970-0290541-1.pdf,1,3->4,5,n: 5,$O(n^2)$,20,$n$: number of points,n,,,Word/Real RAM,words,3,n: 3,$O(n)$,https://academic.oup.com/imajna/article/8/4/473/758789?login=true,0,0,,0,,0,,0,0,,0,0,,,,,,1000,0.2589254118,1000000,0.5848931925,1000000000,0.995262315,1000000,1000,0.2589254118,1000000000000,1000000,0.5848931925,1E+18,1000000000,0.995262315,3,,,Numerical Analysis,FALSE
142,Polynomial Interpolation,1,2-D Polynomial Interpolation,2-D Polynomial Interpolation,1001,,,1,1,$O(n^2)$,,,[https://academic.oup.com/imajna/article/8/4/473/758789?login=true Higham (1988)],Higham,1988,https://academic.oup.com/imajna/article/8/4/473/758789?login=true,10.1093/imanum/8.4.473,['NICHOLAS J. HIGHAM'],1,['Fast Solution of Vandermonde-Like Systems Involving Orthogonal Polynomials'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of points,n,,,Word/Real RAM,words,3,n: 3,$O(n)$,https://academic.oup.com/imajna/article/8/4/473/758789?login=true,0,1,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Numerical Analysis,FALSE
142,Polynomial Interpolation,1,2-D Polynomial Interpolation,2-D Polynomial Interpolation,1002,,,1,1,$O(n^2)$,,,"[https://link.springer.com/article/10.1007/BF01990529 Calvetti, Reichel (1993)]","Calvetti, Reichel",1993,https://link.springer.com/article/10.1007/BF01990529,10.1007/BF01990529,"['D. Calvetti', 'L. Reichel']",2,['Fast inversion of vandermonde-like matrices involving orthogonal polynomials'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: number of points,n,,,Word/Real RAM,words,3,n: 3,$O(n)$?,(maybe similar to the other $O(n^2)$ algorithms?),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,3,,,Numerical Analysis,FALSE
143,Greatest Common Divisor,1,Greatest Common Divisor,Greatest Common Divisor,1003,,,1,1,$O(n^2)$,,,[ Euclid's algorithm (-300)],Euclid's algorithm,-300,,,[],0,,1,1,,1,0,5,n: 5,$O(n^2)$,20,$n$: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,$O(n)$,Store only the current values being iterated on,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Statistics,FALSE
143,Greatest Common Divisor,1,Greatest Common Divisor,Greatest Common Divisor,1004,,,1,1,$O(n^2)$,,,[ Lehmer's GCD algorithm (1940)],Lehmer's GCD algorithm,1940,,,[],0,,,,,0,0,5,n: 5,$O(n^2)$,20,$n$: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,$O(n)$,"Store only the current values being iterated on, and an $O(1)$-sized matrix with $O(n)$-bit numbers",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Statistics,FALSE
143,Greatest Common Divisor,1,Greatest Common Divisor,Greatest Common Divisor,1005,,,1,1,$O(n^2)$,,,[https://arxiv.org/abs/0910.0095 Binary GCD algorithm (1967)],Binary GCD algorithm,1967,https://arxiv.org/abs/0910.0095,,['Shaohua Zhang'],1,['The concept of primes and the algorithm for counting the greatest common divisor in Ancient China'],,,,0,0,5,n: 5,$O(n^2)$,20,$n$: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,$O(n)$,Store only the current values being iterated on,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Statistics,FALSE
143,Greatest Common Divisor,1,Greatest Common Divisor,Greatest Common Divisor,,,,1,1,$O(n \log^2 n \log \log n)$,,,"[https://hal.inria.fr/file/index/docid/71533/filename/RR-5050.pdf Sthele, Zimmermann (2006)]","Sthele, Zimmermann",2006,https://hal.inria.fr/file/index/docid/71533/filename/RR-5050.pdf,,"['Damien Stehlé', 'Paul Zimmermann']",2,['A Binary Recursive Gcd Algorithm'],,,,1,0,4.011,n: 4.011,$O(n \log^2 n \log \log n)$,2021,$n$: sum of number of bits among the two integers,n,,,Word RAM? words size O(1),bits,3,n: 3,$O(n)$??,Depends on Schonhage-Strassen multiplication,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,33056.34051,30.25138248,0.05301736662,86044249.58,11621.92715,0.1523784375,146555204661,6823367.361,0.2692449252,4,,,Statistics,FALSE
145,Interval Scheduling,2,,Weighted Activity Selection Problem,1006,,,1,1,$O(2^n)$,Any distribution,(behavior same regardless of input),[ Brute force algorithm (1940)],Brute force algorithm,1940,,,[],0,,,,,1,0,8,n: 8,$O(2^n)$,,$n$: number of tasks (intervals),n,,,Word RAM,words,3,n: 3,$O(n)$,Need to keep track of which subset is being checked,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,Inf,,,,,,,,,1,,,Combinatorics,FALSE
145,Interval Scheduling,1,,Weighted Activity Selection Problem,1007,,,1,1,$O(n^3)$,,,[ $O(n^3)$ Dynamic Programming (1953)],$O(n^3)$ Dynamic Programming,1953,,,[],0,,,,,1,1->3,6,n: 6,$O(n^3)$,30,$n$: number of tasks (intervals),n,,,Word RAM,words,5,n: 5,$O(n^2)$,"Keep track of answers to $O(n^2)$ subproblems $[i, j]$",1,0,,0,,0,,0,0,,0,0,https://www.cs.ubc.ca/~liorma/cpsc320/files/weighted-activity-selection.pdf,,,,,,,,,,,1000000000,1,,1E+18,1,,1E+27,1,,1,,,Combinatorics,FALSE
145,Interval Scheduling,1,,Weighted Activity Selection Problem,1008,,,1,1,$O(n^2)$,,,[ $O(n^2)$ Dynamic Programming (1953)],$O(n^2)$ Dynamic Programming,1953,,,[],0,,,,,1,3->4,5,n: 5,$O(n^2)$,20,$n$: number of tasks (intervals),n,,,Word RAM,words,3,n: 3,$O(n)$,"Keep track of answers to $O(n)$ subproblems (cache), and sorted list of intervals",1,0,,0,,0,,0,0,,0,0,https://www.cs.ubc.ca/~liorma/cpsc320/files/weighted-activity-selection.pdf,,,,,,,,,,,1000000,,,,,,,,,1,,,Combinatorics,FALSE
145,Interval Scheduling,1,,Weighted Activity Selection Problem,1009,,,1,1,$O(n \log n)$,,,[ $O(n\log n)$ Dynamic Programming (1953)],$O(n\log n)$ Dynamic Programming,1953,,,[],0,,,,,1,4->5,4,n: 4,$O(n \log n)$,11,$n$: number of tasks (intervals),n,,,Word RAM,words,3,n: 3,$O(n)$,"Keep track of answers to $O(n)$ subproblems (cache), and sorted list of intervals",1,0,,0,,0,,0,0,,0,0,https://www.cs.ubc.ca/~liorma/cpsc320/files/weighted-activity-selection.pdf,,,,,,,,,,,9965,100351.2293,Inf,19931568.57,50171665944,Inf,29897352854,3.34478E+16,Inf,1,,,Combinatorics,FALSE
145,Interval Scheduling,1,,"Unweighted Interval Scheduling, Online",1010,,,1,1,$O(n)$,,,[ Fixed priority shortest job first (1940)],Fixed priority shortest job first,1940,,,[],0,,1,1,,1,0,4,n: 4,$O(n \log n)$,11,"$n$: number of tasks (intervals)
$k$: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",$O(n+k)$?,"Keep track of (sorted, based on criteria) list of (unscheduled, running, etc.; just un-done) tasks, along with machine statuses and task priorities",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,9965,1,,19931568.57,1,,29897352854,1,,5,,,Operating Systems,FALSE
145,Interval Scheduling,1,,"Unweighted Interval Scheduling, Online",1011,,,1,1,$O(n)$,,,[ Priority scheduling (1940)],Priority scheduling,1940,,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,"$n$: number of tasks (intervals)
$k$: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",$O(n+k)$?,"Keep track of (sorted, based on criteria) list of (unscheduled, running, etc.; just un-done) tasks, along with machine statuses",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,5,,,Operating Systems,FALSE
145,Interval Scheduling,1,,"Unweighted Interval Scheduling, Online",1012,,,1,1,$O(n)$,,,[ Shortest remaining time first (1940)],Shortest remaining time first,1940,,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,"$n$: number of tasks (intervals)
$k$: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",$O(n+k)$?,"Keep track of (sorted, based on criteria) list of (unscheduled, running, etc.; just un-done) tasks, along with machine statuses",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,5,,,Operating Systems,FALSE
145,Interval Scheduling,1,,"Unweighted Interval Scheduling, Online",1013,,,1,1,$O(n)$,,,"[ First come, first served (1940)]","First come, first served",1940,,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,"$n$: number of tasks (intervals)
$k$: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",$O(n+k)$?,"Keep track of (sorted, based on criteria) list of (unscheduled, running, etc.; just un-done) tasks, along with machine statuses",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,5,,,Operating Systems,FALSE
145,Interval Scheduling,1,,"Unweighted Interval Scheduling, Online",1014,,,1,1,$O(n)$,,,[ Round-robin scheduling (1940)],Round-robin scheduling,1940,,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,"$n$: number of tasks (intervals)
$k$: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",$O(n+k)$?,"Keep track of (sorted, based on criteria) list of (unscheduled, running, etc.; just un-done) tasks, along with machine statuses",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,5,,,Operating Systems,FALSE
145,Interval Scheduling,1,,"Unweighted Interval Scheduling, Online",1015,,,1,1,$O(n)$,,,[ Multilevel queue scheduling (1940)],Multilevel queue scheduling,1940,,,[],0,,,,,0,0,3,n: 3,$O(n)$,10,"$n$: number of tasks (intervals)
$k$: number of machines (resources)",n,,,Word RAM,words,3,"n: 3,
k: 3",$O(n+k)$?,"Keep track of (sorted, based on criteria) list of (unscheduled, running, etc.; just un-done) tasks, along with machine statuses and level information for each task",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,5,,,Operating Systems,FALSE
147,Deadlock avoidance,1,,Deadlock Avoidance,1019,,,1,1,$O(mn^2)$,,,[https://www.cs.utexas.edu/users/EWD/ewd01xx/EWD108.PDF Banker's Algorithm (1966)],Banker's Algorithm,1966,https://www.cs.utexas.edu/users/EWD/ewd01xx/EWD108.PDF,,['Edsger W. Dijkstra'],1,['Een algorithme ter voorkoming van de dodelijke omarming (EWD-108)'],,,,1,0,5,"m: 3,
n: 5",$O(mn^2)$,,"$n$: number of processes
$m$: number of resource types",n,,,Word RAM,words,3,"n: 3,
m: 3",$O(mn)$,"Main space-consuming arrays needed include ""Max,"" ""Allocation,"" and ""Need,"" which are all $n\times m$ arrays. Other arrays are either $O(n)$ or $O(m)$-sized",1,0,,0,,0,,0,0,,0,0,https://www.cs.colorado.edu/~rhan/CSCI_3753_Spring_2005/CSCI_3753_Spring_2005/Lectures/03_01_05_deadlock.pdf,,,,,,,,,,,,1,,,1,,,1,,3,,,Operating Systems,FALSE
148,Page Replacements,1,,Offline,1020,,,1,1,$O(n^2)$,,,[ The theoretically optimal page replacement algorithm (1940)],The theoretically optimal page replacement algorithm,1940,,,[],0,,2,1,,1,0,5,n: 5,$O(n^2)$,20,"$n$: number of page requests
$k$: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",$O(k)$,Need to keep track of cache; linear scan for searching for page not being used for the longest only requires $O(1)$ auxiliary space,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,1,,1000000000000,1,,1E+18,1,,4,,,Operating Systems,FALSE
148,Page Replacements,1,,Online,1021,,,1,1,$O(nk)$?,,,[ Not recently used (1940)],Not recently used,1940,,,[],0,,,,,0,0,3,"n: 3,
k: 3",$O(nk)$?,,"$n$: number of page requests
$k$: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",$O(k)$,Need to keep track of cache + reference bits only,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems,FALSE
148,Page Replacements,1,,Online,1022,,,1,1,$O(nk)$?,,,"[ First-in, first-out (1940)]","First-in, first-out",1940,,,[],0,,,,,0,0,3,"n: 3,
k: 3",$O(nk)$?,,"$n$: number of page requests
$k$: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",$O(k)$,Need to keep track of cache + reference bits only,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems,FALSE
148,Page Replacements,1,,Online,1023,,,1,1,$O(nk)$?,,,[ Second-chance (1940)],Second-chance,1940,,,[],0,,,,,0,0,3,"n: 3,
k: 3",$O(nk)$?,,"$n$: number of page requests
$k$: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",$O(k)$,Need to keep track of cache + reference bits only,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems,FALSE
148,Page Replacements,1,,Online,1024,,,1,1,$O(nk)$?,,,[ Clock (1940)],Clock,1940,,,[],0,,,,,0,0,3,"n: 3,
k: 3",$O(nk)$?,,"$n$: number of page requests
$k$: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",$O(k)$,Need to keep track of cache + reference bits only (plus iterator),1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems,FALSE
148,Page Replacements,1,,Online,1025,,,1,1,$O(nk)$?,,,[ Least recently used (1940)],Least recently used,1940,,,[],0,,,,,0,0,3,"n: 3,
k: 3",$O(nk)$?,,"$n$: number of page requests
$k$: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",$O(k)$,Need to keep track of cache + info related to time last referenced for each of $k$ pages,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems,FALSE
148,Page Replacements,1,,Online,1026,,,1,0,$O(n)$,,,[ Random (1940)],Random,1940,,,[],0,,,,,0,0,3,n: 3,$O(n)$,,"$n$: number of page requests
$k$: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",$O(k)$?,Need to keep track of cache?,1,0,,1,,0,,0,0,,0,0,,,,,,,,,,,,1000,,,,,,,,,4,,,Operating Systems,FALSE
148,Page Replacements,1,,Online,1027,,,1,1,$O(nk)$?,,,[ Not frequently used (NFU) (1940)],Not frequently used (NFU),1940,,,[],0,,,,,0,0,3,"n: 3,
k: 3",$O(nk)$?,,"$n$: number of page requests
$k$: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",$O(k)$,Need to keep track of cache + reference counters only,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems,FALSE
148,Page Replacements,1,,Online,1028,,,1,1,$O(nk)$?,,,[ Aging (1940)],Aging,1940,,,[],0,,,,,0,0,3,"n: 3,
k: 3",$O(nk)$?,,"$n$: number of page requests
$k$: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",$O(k)$,Need to keep track of cache + reference counters only,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems,FALSE
148,Page Replacements,1,,Online,1029,,,1,1,$O(nk)$?,,,[https://www.researchgate.net/profile/Gyanendra-Kumar-3/publication/319467661_A_Novel_Longest_Distance_First_Page_Replacement_Algorithm/links/59b209f1aca2728472d14684/A-Novel-Longest-Distance-First-Page-Replacement-Algorithm.pdf Longest distance first (LDF) page replacement algorithm (2017)],Longest distance first (LDF) page replacement algorithm,2017,https://www.researchgate.net/profile/Gyanendra-Kumar-3/publication/319467661_A_Novel_Longest_Distance_First_Page_Replacement_Algorithm/links/59b209f1aca2728472d14684/A-Novel-Longest-Distance-First-Page-Replacement-Algorithm.pdf,,"['Gyanendra Kumar', 'Parul Tomar']",2,['A Novel Longest Distance First Page Replacement Algorithm'],,,,0,0,3,"n: 3,
k: 3",$O(nk)$?,,"$n$: number of page requests
$k$: number of pages able to fit in cache",n,,,Word RAM,words,1,"k: 3,
n: 1",$O(k)$,Need to keep track of cache + information related to position of pages,1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000000,,,,,,,,,4,,,Operating Systems,FALSE
149,Recovery,2,,"Steal, No-Force",1030,,,1,1,$O(n)$,Any distribution/doesn't make too much sense to talk about distribution here,(behavior same regardless of input),[https://dl.acm.org/doi/10.1145/128765.128770 ARIES (1992)],ARIES,1992,https://dl.acm.org/doi/10.1145/128765.128770,10.1145/128765.128770,"['C. Mohan', 'Don Haderle', 'Bruce Lindsay', 'Hamid Pirahesh', 'Peter Schwarz']",5,['ARIES: a transaction recovery method supporting fine-granularity locking and partial rollbacks using write-ahead logging'],4,1,,1,0,3,n: 3,$O(n)$,10,$n$: number of transactions before crash,n,,,Word RAM,words,3,n: 3,$O(n)$?,"Uses write-ahead logging, so keeps track of transaction log, whose entries may be augmented with $O(1)$ more information each. During recovery, needs to keep track of variable/page states",1,0,,0,,0,,0,0,,0,0,,,,,,,,,,,,1000,1,,1000000,1,,1000000000,1,,6,,,Operating Systems,FALSE
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,FALSE
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Geomean,#REF!,,,#REF!,,,#REF!,,,,,FALSE
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,FALSE
,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,Doubling time,#REF!,,,#REF!,,,#REF!,,,,,FALSE